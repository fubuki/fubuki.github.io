<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Frontend | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/frontend/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-04-14T22:37:18+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Atom 編寫 Jade]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/16/jade-atom/"/>
    <updated>2015-02-16T23:30:12+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/16/jade-atom</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在使用 express 建立監控服務，使用 <a href="http://jade-lang.com/">jade</a> 當作樣板引擎，一開始不太順手跟剛開始寫 python 的感覺一樣，
後來寫起來感覺很不錯，atom 有預覽可以看編譯出來的 html 長什麼樣子。</p>

<p><a href="http://jade-lang.com/">jade</a> 跟原本的 html 比起來要撰寫的程式碼變少了，排版起來也乾淨，目前利用 atom 撰寫的時候需要另外安裝 package，
就能有高亮和預覽的功能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP/2 規格]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/13/http-slash-2/"/>
    <updated>2015-02-13T23:40:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/13/http-slash-2</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://http2.github.io/">HTTP/2</a> 下一代的 HTTP 協定。</p>

<p><a href="https://http2.github.io/">HTTP/2</a> 目前的情形 <a href="http://www.slideshare.net/shigeki_ohtsu/http2-ohtsu-html5conf2015">HTTP/2の現状とこれから</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WEB Cache 技術 CSI,SSI,ESI]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/11/web-cache-csi-ssi-esi/"/>
    <updated>2015-02-11T23:30:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/11/web-cache-csi-ssi-esi</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://drive.google.com/a/ustream.tv/file/d/0B9h_EQ82pIpuOUF6OHhSNW1FWUU/edit?pli=1">When dynamic becomes static: the next step in web caching techniques</a></p>

<ol>
<li>CSI</li>
<li>SSI</li>
<li>ESI</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas Fingerprinting]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/05/fingerprinting/"/>
    <updated>2014-12-05T21:56:17+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/05/fingerprinting</id>
    <content type="html"><![CDATA[<!-- more -->


<p>以前的網站都是使用 cookie 追蹤使用者所以現在的閱覽器通常會提供私密模式讓網站無法在機器
上寫入 cookie，所以最近看到有網站使用 <a href="http://en.wikipedia.org/wiki/Canvas_fingerprinting">Canvas fingerprinting</a> 的技術追蹤用戶。</p>

<p><a href="http://en.wikipedia.org/wiki/Canvas_fingerprinting">Canvas fingerprinting</a> 的原理是用 html5 的 Canvas 功能繪製圖片產生識別碼，由於每台機器
在繪製圖片的時候所使用繪製引擎和參數不同所以使用產生出的圖片便不會全部相同，在經過 hash
之類的操作得出的編碼就可以用來當作識別用戶的一種方法。</p>

<p>這邊有一篇相關論文可以參考 <a href="http://cseweb.ucsd.edu/~hovav/papers/ms12.html">Pixel Perfect: Fingerprinting Canvas in HTML5</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub 設計CSS]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/06/github-she-ji-css/"/>
    <updated>2014-09-06T22:36:23+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/06/github-she-ji-css</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://markdotto.com/2014/07/23/githubs-css/">GitHub’s CSS</a> 提到 GihHub 本身如何設計他們的 CSS 。文章裡面分成以下幾種部分。</p>

<ul>
<li>Quick facts</li>
<li>Preprocessor</li>
<li>Architecture</li>
<li>Linting</li>
<li>Two bundles</li>
<li>Included via Sprockets</li>
<li>Performance</li>
<li>Documentation</li>
<li>Primer</li>
<li>Refactoring</li>
</ul>

]]></content>
  </entry>
  
</feed>

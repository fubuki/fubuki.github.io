<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Mysql | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-01-27T23:39:47+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mysql 顯示進程列表]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/05/mysql-show-process/"/>
    <updated>2015-01-05T22:12:57+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/05/mysql-show-process</id>
    <content type="html"><![CDATA[<!-- more -->


<p>檢查目前 mysql 有多少進程，並且可以看出有多少連線，目前有在跑哪些 sql 和執行了多久，
有時網站變慢可以從列表中觀察是哪些 sql 拖慢系統的速度，另外也可以透過 kill 直接殺掉進程。</p>

<pre><code>show processlist;
show full processlist;
kill
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysqldump 備份資料庫指令]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/29/mysqldump/"/>
    <updated>2014-12-29T21:26:15+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/29/mysqldump</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近幫別人整理資料庫發現資料表的結構設計不當導致資料過多的時候效率變很差，原本更改資料表的結構
但是由於手上沒有 root 權限的帳號，資料庫也不能停機開啟 <code>safe mode</code>，所以只能先刪除資料。</p>

<p>目前 MySQL 資料庫最常用 <a href="http://dev.mysql.com/doc/refman/5.1/en/mysqldump.html">mysqldump</a> 備份，在 MySQL 官網有詳細的解說裡面有很多選項可以使用，但是
目前最常用到的選項是 <code>-single-transaction</code> 和 <code>-lock-all-tables</code>，<code>-single-transaction</code> 是在備份
資料前開啟交易，讓資料能夠盡量完整匯出，而 <code>-lock-all-tables</code> 則是給 MyISAM 這類不支援 transaction
 的資料表所用，他會在備份時 Lock Table 為 READ LOCAL 狀態，只允許 <a href="http://dev.mysql.com/doc/refman/5.0/en/concurrent-inserts.html">Concurrent Inserts</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 兼容方案]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/04/mysql-other-version/"/>
    <updated>2014-12-04T10:45:55+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/04/mysql-other-version</id>
    <content type="html"><![CDATA[<!-- more -->


<p>列出幾個相容於 mysql 的開源方案。</p>

<h3>Percona Mysql</h3>

<p><a href="http://www.percona.com/">Percona</a> 出的版本，目前看到身邊的人大都是使用這家公司出版的 Mysql 建立商業環境，
而且從它的討論區可以學習到不少如何對 Mysql 除錯的訊息。</p>

<h3>MariaDB</h3>

<p><a href="https://mariadb.org/">mariadb</a> 是 Mysql 的生父另外開發的版本，裡面多增加了 TokuDB 這個引擎，目前在國外看到有些人將資料庫從 Mysql 遷移到
MariaDB，是值得期待的產品。</p>

<h3>MySQL/Galera</h3>

<p><a href="http://galeracluster.com/">galeracluster</a> 只有在網路上聽過這個版本，在找跟 Mysql Cluster 方案時看到有人提到，不過身邊的人似乎沒有人在使用這個版本。</p>

<h3>WebScaleSQL</h3>

<p>Google 和 Facebook、LinkedIn、Twitter 共同開發的版本，上述的公司都有處理巨量資料的需求，所以看起來應該會朝向處理巨量資料和
佈署大規獏資料叢集的方向發展，不過我記得 Google 有決定當 MariaDB 成熟後將內部的 Mysql 資料庫遷移到 MariaDB，所以 MariaDB 和 WebScaleSQL
兩者會有有不同發展方向跟應用場景。</p>

<h3>InnoSQL</h3>

<p><a href="https://github.com/NetEase/InnoSQL">InnoSQL</a> 是網易開發的 Mysql 分支，在它的 Github 上有列出改變了哪些部分，這些應該都是基於
網易內部需要而修改的，也許可以透過那些特性思考一下網易是如何使用 Mysql 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 5.7 New Feature]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/19/mysql-5-dot-7-new-feature/"/>
    <updated>2014-11-19T22:13:09+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/19/mysql-5-dot-7-new-feature</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>Added Features</h3>

<ol>
<li>提高安全性</li>
<li>SQL mode changes</li>
<li>即時更新表結構</li>
<li>優化 InnoDB</li>
<li>supports stacked diagnostics areas</li>
<li>EXPLAIN 可以顯示更多資訊</li>
<li>觸發</li>
<li>新增 LOG 機制</li>
<li>MySQL Test Suite</li>
<li>mysql client</li>
<li>Database name rewriting with mysqlbinlog</li>
<li>HANDLER with partitioned tables</li>
<li>Index condition pushdown support for partitioned tables</li>
<li>WITHOUT VALIDATION support for ALTER TABLE &hellip; EXCHANGE PARTITION</li>
<li>Master dump thread improvements</li>
<li>Globalization improvements</li>
<li>Changing the replication master without STOP SLAVE</li>
</ol>


<h3>Deprecated Features</h3>

<h3>Removed Features</h3>

<ol>
<li>更改密碼加密格式</li>
<li>移除一些資料類型</li>
<li>使用 <code>Performance Schema tables</code> 取代 <code>SHOW ENGINE INNODB MUTEX</code></li>
</ol>


<p>參考:<a href="http://dev.mysql.com/doc/refman/5.7/en/mysql-nutshell.html">What Is New in MySQL 5.7</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 使用 PDO 與 Mysql 進行持久化連接]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/06/pdo-mysql-persistent-connection/"/>
    <updated>2014-11-06T21:58:49+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/06/pdo-mysql-persistent-connection</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在 PHP 裡面如果使用 PDO 連接 Mysql 有個 <code>PDO::ATTR_PERSISTENT</code> 的選項可以形成 <code>persistent connection</code>，其中的機制是在 PHP script 結束的時候將連線交由背後的進程管理，
如果是使用 fastcgi 就會由 fastcgi 負責管理，另外從 <a href="http://eslizn.com/archives/39/">php持久化连接数据库</a> 的測試結果不管是用 apachehandle 或是 php-fpm 都可以支援持久化連線。</p>

<p>在 <a href="http://stackoverflow.com/questions/3332074/what-are-the-disadvantages-of-using-persistent-connection-in-pdo/5541150#5541150">What are the disadvantages of using persistent connection in PDO</a> 裡面有提到一些持久化連線會導致的問題值得一看，另外在最近同事使用持久化連線的時候遇到了 <code>MySQL server has gone away</code>
的問題，似乎是 PHP 端的持久化連線已經 lost 掉跟 mysql 的連線了但是卻沒有在次跟 mysql  重新連線的關係。</p>
]]></content>
  </entry>
  
</feed>

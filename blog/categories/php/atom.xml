<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Php | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-09-11T23:29:36+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The PHP Quality Assurance Toolchain]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/11/the-php-quality-assurance-toolchain/"/>
    <updated>2014-09-11T22:00:38+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/11/the-php-quality-assurance-toolchain</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在用 持續集成的時候找到這個 <a href="http://phpqatools.org/">The PHP Quality Assurance Toolchain</a> ，裡面介紹不少針對 PHP 開發有用的工具，
能夠用來提高程式碼的品質。</p>

<ol>
<li>PHPUnit</li>
<li>PHPLOC</li>
<li>PHP_CodeSniffer</li>
<li>hhvm-wrapper</li>
<li>vfsStream</li>
<li>PHP_Depend</li>
<li>PHP Copy/Paste Detector</li>
<li>phpDox</li>
<li>Behat</li>
<li>PHP Mess Detector</li>
<li>PHP Dead Code Detector</li>
<li>Jenkins PHP</li>
</ol>


<p>目前有用到的有</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP With Composer]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/10/php-with-composer/"/>
    <updated>2014-09-10T22:52:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/10/php-with-composer</id>
    <content type="html"><![CDATA[<!-- more -->


<p>以前在安裝 PHP 的插件通常是透過 PEAR 安裝的，然後每個插件就要手動一個個安裝，不過現在有 <a href="https://getcomposer.org/">composer</a> 這個相依性管理工具，
用起來跟 NPM 感覺差不多，只要定義好需要用哪些套件和版本就會幫忙安裝好。</p>

<h3>安裝方法</h3>

<pre><code>curl -sS https://getcomposer.org/installer | php  
mv composer.phar /usr/local/bin/composer 
</code></pre>

<h3>基本用法</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPCI 安裝過程]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/02/phpci-an-zhuang-guo-cheng/"/>
    <updated>2014-08-02T23:49:24+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/02/phpci-an-zhuang-guo-cheng</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://www.phptesting.org/">phpci</a> 看起來是專門為 PHP 持續集成所做的， 這是他的<a href="https://github.com/Block8/PHPCI">github</a>， 它的wiki有寫怎麼安裝，
不過裝不起來所以在這邊記錄一下安裝過程。</p>

<p>我這邊是先從 github clone 一份下來，然後我資料庫使用 MariaDB ，server 使用 nginx，
然後使用 composer 安裝必要的部分，但是它本身所以用的 framework 有bug 還要更新，但是
還是有相同的錯誤出現。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 持續集成]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/31/php-chi-xu-ji-cheng/"/>
    <updated>2014-07-31T23:49:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/31/php-chi-xu-ji-cheng</id>
    <content type="html"><![CDATA[<p>記錄建立持續集成環境。</p>

<!-- more -->


<p>之前在工作上有使用 jenkins 搭建持續集成的環境，但是公司沒有導入，現在換用 PHPCI 自行建立一個，
並且使用在正在開發的專案上，從 PHPCI 官網上有比較跟其他同類型的軟體的差異，不過還是等到實際使用後
才能知道，之後也會在 node.js 上面搭建類似的環境。</p>

<ol>
<li><a href="http://www.slideshare.net/baterme/java-2013-java-developerday">java-2013-java-developerday</a></li>
<li><a href="http://book.douban.com/subject/2580604/">持续集成</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 自動化測試]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/23/php-zi-dong-hua-ce-shi/"/>
    <updated>2014-07-23T23:42:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/23/php-zi-dong-hua-ce-shi</id>
    <content type="html"><![CDATA[<p>關於 PHP 自動化測試部分。</p>

<!-- more -->


<p><a href="http://phpunit.de/">浅析 PHP 官方自动化测试方法</a>
<a href="https://github.com/sebastianbergmann/phpunit-selenium">phpunit-selenium</a></p>
]]></content>
  </entry>
  
</feed>

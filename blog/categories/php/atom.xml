<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Php | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-10-05T22:37:29+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mixin and Trait in PHP]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/03/mixin-and-trait-in-php/"/>
    <updated>2014-10-03T23:27:59+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/03/mixin-and-trait-in-php</id>
    <content type="html"><![CDATA[<!-- more -->


<h4>Mixin 設計模式</h4>

<p><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#mixinpatternjavascript">mixinpatternjavascript</a>，將部分或是全部的類的屬性複製到另外一個類。</p>

<h4>What is the Trait</h4>

<p><a href="http://php.net/manual/en/language.oop5.traits.php">Trait</a> 是在 PHP 5.4 新增的特性，實現了類似 Mixin 模式的方法，讓開發者更容易讓程式碼 Reuse。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第五回闇PHP勉強会]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/02/di-wu-hui-an-phpmian-qiang-hui/"/>
    <updated>2014-10-02T23:35:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/02/di-wu-hui-an-phpmian-qiang-hui</id>
    <content type="html"><![CDATA[<!-- more -->


<p>以前在找跟 PHP 內部記憶體管理相關的資料找到的東西，日本那邊一個跟 PHP 有關的讀書會，這是<a href="http://sasezaki.hatenablog.com/entry/2014/03/16/042422">連結</a>。
目前看完了 <code>入門Zend Memory Manager</code> 和 <code>こんなPHP開発者は嫌だ</code>，算是對 PHP 記憶體管理部分有些進入點，然後另外一篇投影片
提到一些跟 PHP 開發者有關的玩笑還蠻有趣的，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 的 Lambda 和 Closure]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/24/php-and-closure/"/>
    <updated>2014-09-24T23:49:27+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/24/php-and-closure</id>
    <content type="html"><![CDATA[<p>PHP 的閉包語法和用途。</p>

<!-- more -->


<p>PHP 在改版之後新增了一些其他語言的特性，閉包為其中一種，以前在撰寫 js 腳本的時候會用到閉包的結構，而 Lamdbda 比較像是
從函數式語言來的。</p>

<h3>語法</h3>

<h3>用途</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Session Handler]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/18/php-session-handler/"/>
    <updated>2014-09-18T23:16:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/18/php-session-handler</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在使用 node.js 搭建 WEB 聊天伺服器的時候，需要跟 PHP 端共用 session ，當時是使用 memcached 儲存 session 資訊，
但是預設是使用 PHP 的序列化格式，所以換成 msgpack 和 igbinary 兩種格式測試，使用 <code>session_set_save_handler</code> 實現，
如此一來透過 memcached 分享兩個平台的認證資訊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xdebug : PHP Debug 工具]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/13/xdebug-php-debug-gong-ju/"/>
    <updated>2014-09-13T23:44:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/13/xdebug-php-debug-gong-ju</id>
    <content type="html"><![CDATA[<!-- more -->


<p>xdebug 為一款 PHP 用的除錯工具，透過 pecl 安裝後在 php.ini 打開就可以使用了，然後可以搭配 Sublime text 2 的
xdebug client 除錯，此外要在 chorme 安裝 xdebug 的插件後就可以直接通知 server 需要開啟 xdebug 的環境。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Php | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-11-06T23:06:44+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[控制 PHP 執行時間]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/26/php-timeout/"/>
    <updated>2014-10-26T13:38:11+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/26/php-timeout</id>
    <content type="html"><![CDATA[<p>如何控制 PHP 的最長執行時間。</p>

<!-- more -->


<p>在執行 PHP 腳本的時候有可能因為程式邏輯上的問題或是為了取得外部的資料導致執行時間過久，而讓使用者等待回應的時間過長帶來不好的體驗，
因此在 PHP 本身一些常用的函式庫或是伺服器設定會讓開發者設定 timeout 的時間。</p>

<h4>nginx</h4>

<ol>
<li>fastcgi_connect_timeout</li>
<li>fastcgi_send_timeout</li>
<li>fastcgi_read_timeout</li>
</ol>


<h4>php-fpm</h4>

<ol>
<li>php-fpm.conf 的 request_terminate_timeout</li>
</ol>


<p>max_execution_time 和 set_time_limit 也能限制腳本執行的時間但是似乎在某些場景是有問題的。</p>

<h4>curl</h4>

<ol>
<li>CURLOPT_TIMEOUT</li>
<li>CURLOPT_TIMEOUT_MS</li>
<li>CURLOPT_CONNECTTIMEOUT</li>
<li>CURLOPT_CONNECTTIMEOUT_MS</li>
<li>CURLOPT_DNS_CACHE_TIMEOUT</li>
</ol>


<h4>mysql</h4>

<ol>
<li>innodb_lock_wait_timeout</li>
<li>libmysql 的 MYSQL_OPT_READ_TIMEOUT 和 MYSQL_OPT_WRITE_TIMEOUT</li>
</ol>


<h4>memcached</h4>

<ol>
<li>bool Memcache::connect ( string $host [, int $port [, int $timeout ]] )</li>
<li>Memcached 要另外實現</li>
</ol>


<h4>redis</h4>

<ol>
<li>$redis->connect(&lsquo;127.0.0.1&rsquo;, 6379, 2.5); // 2.5 sec timeout.</li>
<li>$redis->pconnect(&lsquo;127.0.0.1&rsquo;, 6379, 2.5, &lsquo;x&rsquo;); // x is sent as persistent_id and would be another connection the the three before.</li>
</ol>


<h4>其他</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php 的加密方案]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/14/php-and-crypt/"/>
    <updated>2014-10-14T22:09:47+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/14/php-and-crypt</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近需要生成一些加密字串，需要研究一下要採用哪種加密演算法， md5 跟 sha1 應該是不會列入考慮， 有可能會在 bcrypt 和 scrypt 兩者之間比較
一下看是要選擇哪一個。</p>

<ol>
<li>crypt</li>
<li>bcrypt</li>
<li>scrypt</li>
</ol>


<h4>關於加密的文章</h4>

<p><a href="http://stackoverflow.com/questions/401656/secure-hash-and-salt-for-php-passwords/8050063">How to securely hash passwords?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Xhprof 測量 Php 函式效能]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/13/xhprof-php/"/>
    <updated>2014-10-13T23:45:28+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/13/xhprof-php</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前有在尋找一些關於 PHP 除錯用的工具意外看到 <a href="https://github.com/phacility/xhprof">xhprof</a>，似乎可以測量 PHP function 層級的效能，之前在測試專案效能
通常是透過 ab 去測試併發數，並沒有基於單一函式進行測試，透過這個工具應該更容易找出問題在哪，這邊有個<a href="https://blog.engineyard.com/collections/profiling-with-xhprof-and-xhgui/">教學</a>可以參考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixin and Trait in PHP]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/03/mixin-and-trait-in-php/"/>
    <updated>2014-10-03T23:27:59+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/03/mixin-and-trait-in-php</id>
    <content type="html"><![CDATA[<!-- more -->


<h4>Mixin 設計模式</h4>

<p><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#mixinpatternjavascript">mixinpatternjavascript</a>，將部分或是全部的類的屬性複製到另外一個類。</p>

<h4>What is the Trait</h4>

<p><a href="http://php.net/manual/en/language.oop5.traits.php">Trait</a> 是在 PHP 5.4 新增的特性，實現了類似 Mixin 模式的方法，讓開發者更容易讓程式碼 Reuse。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第五回闇PHP勉強会]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/02/di-wu-hui-an-phpmian-qiang-hui/"/>
    <updated>2014-10-02T23:35:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/02/di-wu-hui-an-phpmian-qiang-hui</id>
    <content type="html"><![CDATA[<!-- more -->


<p>以前在找跟 PHP 內部記憶體管理相關的資料找到的東西，日本那邊一個跟 PHP 有關的讀書會，這是<a href="http://sasezaki.hatenablog.com/entry/2014/03/16/042422">連結</a>。
目前看完了 <code>入門Zend Memory Manager</code> 和 <code>こんなPHP開発者は嫌だ</code>，算是對 PHP 記憶體管理部分有些進入點，然後另外一篇投影片
提到一些跟 PHP 開發者有關的玩笑還蠻有趣的，</p>
]]></content>
  </entry>
  
</feed>

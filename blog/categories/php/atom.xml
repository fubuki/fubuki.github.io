<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Php | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-07-04T23:32:57+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Php-fpm 優化參數]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/01/php-fpm-you-hua-can-shu/"/>
    <updated>2014-07-01T23:30:29+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/01/php-fpm-you-hua-can-shu</id>
    <content type="html"><![CDATA[<p>warning pool www child exited on signal 9 (sigkill) after seconds from start</p>

<!-- more -->


<p>php-fpm管理進程的模式有靜態和動態，差別在於靜態會根據參數直接生成固定的進程，動態則是會動態調整所需要的進程，
選擇哪個模式端看於硬體上記憶體大小的差別。</p>

<h2>靜態或是動態</h2>

<p>pm = static or dynamic</p>

<h2>靜態方法</h2>

<p>pm.max_children</p>

<h2>動態方法</h2>

<p>pm.start_servers</p>

<p>pm.min_spare_servers</p>

<p>pm.max_spare_servers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 之 Fastcgi_finish_request]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/29/php-zhi-fastcgi-finish-request/"/>
    <updated>2014-06-29T23:02:40+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/29/php-zhi-fastcgi-finish-request</id>
    <content type="html"><![CDATA[<p>PHP 在 fast-cgi 模式下有一個有趣的函式 <code>fastcgi_finish_request</code> 可以使用，在<a href="http://php.net/manual/en/function.fastcgi-finish-request.php">function.fastcgi-finish-request</a>
有說明這個函式是讓開發者強制停止與客戶端之間的連線，但是服務端的腳本還是持續執行，這讓客戶端可以不用等待一些耗時的操作，
不過如果要達成類似的效果我還是比較喜歡用丟到隊列去執行的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 內核研究資源]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/02/php-he-yan-jiu-zi-yuan/"/>
    <updated>2014-06-02T23:50:44+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/02/php-he-yan-jiu-zi-yuan</id>
    <content type="html"><![CDATA[<p>深入理解PHP内核 <a href="http://www.php-internals.com/book/">http://www.php-internals.com/book/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached Connect vs Pconnect]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/23/memcache-connect-vs-pconnect/"/>
    <updated>2014-05-23T21:31:20+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/23/memcache-connect-vs-pconnect</id>
    <content type="html"><![CDATA[<p>memcache目前算是常用的快取server，很多人在使用php開發網站通常會搭配memcached，本文記錄一下
php 在使用memcached遇到的問題。</p>

<!-- more -->


<p>memcached 有分 connect 和 pconnect兩種方法，但是connect會斷掉連線，而pconnect會將連接持久化，從curr_connections可以看出
兩者的不同，同一個網頁重整conncet的curr_connections數值不會一直增加，但是pconnet會上升到一個上限。</p>

<p>但是在網路上有看到人說 fastcgi方式用長連接是無效的，這邊還需要了解關於pconnect是如何實作的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rolling cURL]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/22/rolling-curl/"/>
    <updated>2014-05-22T22:51:01+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/22/rolling-curl</id>
    <content type="html"><![CDATA[<p>cURL 是用來模擬各種http請求的工具，PHP也使用這個工具來取得網頁內容，或是呼叫一些API，
但是使用上會存在一些效能上的問題，如果只是單純呼叫cURL可能會阻塞住，就必須更加巧妙的去使用cURL。</p>

<!-- more -->


<p><a href="http://www.searchtb.com/2012/06/rolling-curl-best-practices.html">Rolling cURL: PHP并发最佳实践</a>這篇文章有提到兩種寫法，都是使用<a href="http://se2.php.net/manual/en/function.curl-multi-exec.php">curl_multi_exec</a>去實踐，但是實踐的
方法不太一樣可以仔細研究，在github上面也有些專案例如:<a href="https://github.com/jmathai/php-multi-curl">php-multi-curl</a>，可以看看裡面的原理，以提高
cURL並發下的效能。</p>
]]></content>
  </entry>
  
</feed>

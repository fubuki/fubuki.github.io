<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Php | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-05-09T22:36:15+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Phalcon Dynamic Update DataBase]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/15/phalcon-dynamicupdate/"/>
    <updated>2015-04-15T23:12:10+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/15/phalcon-dynamicupdate</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Phalcon 在更新資料庫的資料時會將所有欄位的資料都更新上去無論是有沒有修改過 Model 的欄位，這樣在某些情況下會有問題，
如果使用 oracle 的 clob 欄位時必須先取得 stream 的內容後在更新，不然會發現資料內容都變成 resource id。</p>

<p>不過後來發現 Phalcon 的 <a href="http://docs.phalconphp.com/en/latest/reference/models.html#dynamic-update">Dynamic Update</a>  功能可以避免上述的問題，使用這個功能後 phalcon 在產生 sql query 時只會更新
 Model 有修改的部分。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php Date 時間處理筆記]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/13/php-date/"/>
    <updated>2015-04-13T00:53:29+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/13/php-date</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>取得目前的日期</h3>

<pre><code>$now = DateTime():
$now-&gt;format('r');

$now1 = getdate();
print "{$now1['hours']}:{$now1['minutes']}:{$now1['seconds']}\n";


$now2 = localtime();
print "$now2[2]:$now2[1]:$now2[0]";
</code></pre>

<h3>取得當月的第一天</h3>

<pre><code>$start = date("Y-m-1"); 
$date = new DateTime($start);
</code></pre>

<h3>往前推1個月</h3>

<pre><code>$result = $date-&gt;modify( '-1 month' );
</code></pre>

<h3>當月的最後一天</h3>

<pre><code>$result = $date-&gt;modify( '+2 month' );
$result = $date-&gt;modify( '-1 day' );
</code></pre>

<h3>取得一段時間範圍</h3>

<pre><code>DateInterval();
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP : Pthreads Library]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/05/pthreads/"/>
    <updated>2015-04-05T21:28:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/05/pthreads</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li><a href="https://computing.llnl.gov/tutorials/pthreads/">pthreads</a></li>
<li><a href="https://github.com/krakjoe/pthreads">php pthreads</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phalcon 設定讀寫分離功能]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/02/phalcon-master-slave/"/>
    <updated>2015-04-02T23:29:18+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/02/phalcon-master-slave</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近需要建立 phalcon 連結 mysql 的專案，然後手上有一個 mysql cluster 的設備，所以
想要在 phalcon 設定讀寫分離的功能，讀跟寫是連接不同的資料庫位置，最後在 phalcon 的文檔
<a href="https://phalcon-php-framework-documentation.readthedocs.org/en/latest/reference/models.html?highlight=selectReadConnection#setting-multiple-databases">setting-multiple-databases</a> 有說明怎麼設定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 的 Yield]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/13/php-yield/"/>
    <updated>2015-03-13T23:08:34+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/13/php-yield</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前有使用過 python 的 yield 很有趣的功能，然後今天看到一篇投影片 <a href="http://www.slideshare.net/techblogyahoo/phpioyield-phpcon2014">PHPにおけるI/O多重化とyield</a>，裡面介紹一些跟 PHP 異步有關的東西，
但是最重要是 PHP 5.5 有增加支援 yield，詳細看 <a href="http://php.net/manual/en/language.generators.overview.php">Generators overview</a> 這篇。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Php | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-10-24T22:29:42+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Php 的加密方案]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/14/php-and-crypt/"/>
    <updated>2014-10-14T22:09:47+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/14/php-and-crypt</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近需要生成一些加密字串，需要研究一下要採用哪種加密演算法， md5 跟 sha1 應該是不會列入考慮， 有可能會在 bcrypt 和 scrypt 兩者之間比較
一下看是要選擇哪一個。</p>

<ol>
<li>crypt</li>
<li>bcrypt</li>
<li>scrypt</li>
</ol>


<h4>關於加密的文章</h4>

<p><a href="http://stackoverflow.com/questions/401656/secure-hash-and-salt-for-php-passwords/8050063">How to securely hash passwords?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Xhprof 測量 Php 函式效能]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/13/xhprof-php/"/>
    <updated>2014-10-13T23:45:28+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/13/xhprof-php</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前有在尋找一些關於 PHP 除錯用的工具意外看到 <a href="https://github.com/phacility/xhprof">xhprof</a>，似乎可以測量 PHP function 層級的效能，之前在測試專案效能
通常是透過 ab 去測試併發數，並沒有基於單一函式進行測試，透過這個工具應該更容易找出問題在哪，這邊有個<a href="https://blog.engineyard.com/collections/profiling-with-xhprof-and-xhgui/">教學</a>可以參考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixin and Trait in PHP]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/03/mixin-and-trait-in-php/"/>
    <updated>2014-10-03T23:27:59+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/03/mixin-and-trait-in-php</id>
    <content type="html"><![CDATA[<!-- more -->


<h4>Mixin 設計模式</h4>

<p><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#mixinpatternjavascript">mixinpatternjavascript</a>，將部分或是全部的類的屬性複製到另外一個類。</p>

<h4>What is the Trait</h4>

<p><a href="http://php.net/manual/en/language.oop5.traits.php">Trait</a> 是在 PHP 5.4 新增的特性，實現了類似 Mixin 模式的方法，讓開發者更容易讓程式碼 Reuse。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第五回闇PHP勉強会]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/02/di-wu-hui-an-phpmian-qiang-hui/"/>
    <updated>2014-10-02T23:35:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/02/di-wu-hui-an-phpmian-qiang-hui</id>
    <content type="html"><![CDATA[<!-- more -->


<p>以前在找跟 PHP 內部記憶體管理相關的資料找到的東西，日本那邊一個跟 PHP 有關的讀書會，這是<a href="http://sasezaki.hatenablog.com/entry/2014/03/16/042422">連結</a>。
目前看完了 <code>入門Zend Memory Manager</code> 和 <code>こんなPHP開発者は嫌だ</code>，算是對 PHP 記憶體管理部分有些進入點，然後另外一篇投影片
提到一些跟 PHP 開發者有關的玩笑還蠻有趣的，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 的 Lambda 和 Closure]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/24/php-and-closure/"/>
    <updated>2014-09-24T23:49:27+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/24/php-and-closure</id>
    <content type="html"><![CDATA[<p>PHP 的閉包語法和用途。</p>

<!-- more -->


<p>PHP 在改版之後新增了一些其他語言的特性，閉包為其中一種，以前在撰寫 js 腳本的時候會用到閉包的結構，而 Lamdbda 比較像是
從函數式語言來的。</p>

<h3>語法</h3>

<h3>用途</h3>
]]></content>
  </entry>
  
</feed>

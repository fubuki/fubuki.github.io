<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Php | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-11-06T00:53:34+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP-FPM and Apache 2.4.17]]></title>
    <link href="http://fubuki.github.io/blog/2015/10/26/php-fpm-and-apache-2-dot-4-17/"/>
    <updated>2015-10-26T23:50:42+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/10/26/php-fpm-and-apache-2-dot-4-17</id>
    <content type="html"><![CDATA[<!-- more -->


<p>[Bug #70757     $_SERVER[&ldquo;PHP_SELF&rdquo;] is malformed with PHP-FPM and Apache 2.4.17]</p>

<p>[Bug #70757     $_SERVER[&ldquo;PHP_SELF&rdquo;] is malformed with PHP-FPM and Apache 2.4.17]:<a href="https://bugs.php.net/bug.php?id=70757">https://bugs.php.net/bug.php?id=70757</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 處理 Unicode 字元]]></title>
    <link href="http://fubuki.github.io/blog/2015/09/07/php-regexp-unicode/"/>
    <updated>2015-09-07T23:06:35+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/09/07/php-regexp-unicode</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://php.net/manual/en/regexp.reference.unicode.php">Unicode character properties</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 的 Pcntl_fork 函式]]></title>
    <link href="http://fubuki.github.io/blog/2015/08/20/php-pcntl-fork/"/>
    <updated>2015-08-20T23:18:11+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/08/20/php-pcntl-fork</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在使用 PHP 撰寫 CLI 的功能時，想要實做能夠根據 CPU 數量自動 auto scale 加快計算的功能，
所以在尋找 PHP 裡面跟 fork 有關的函式，最後找到了 pcntl_fork 這個函式能夠 fork 出多個 process ，
使用上不太難不過子進程結束需要自行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phalcon Dynamic Update DataBase]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/15/phalcon-dynamicupdate/"/>
    <updated>2015-04-15T23:12:10+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/15/phalcon-dynamicupdate</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Phalcon 在更新資料庫的資料時會將所有欄位的資料都更新上去無論是有沒有修改過 Model 的欄位，這樣在某些情況下會有問題，
如果使用 oracle 的 clob 欄位時必須先取得 stream 的內容後在更新，不然會發現資料內容都變成 resource id。</p>

<p>不過後來發現 Phalcon 的 <a href="http://docs.phalconphp.com/en/latest/reference/models.html#dynamic-update">Dynamic Update</a>  功能可以避免上述的問題，使用這個功能後 phalcon 在產生 sql query 時只會更新
 Model 有修改的部分。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php Date 時間處理筆記]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/13/php-date/"/>
    <updated>2015-04-13T00:53:29+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/13/php-date</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>取得目前的日期</h3>

<pre><code>$now = DateTime():
$now-&gt;format('r');

$now1 = getdate();
print "{$now1['hours']}:{$now1['minutes']}:{$now1['seconds']}\n";


$now2 = localtime();
print "$now2[2]:$now2[1]:$now2[0]";
</code></pre>

<h3>取得當月的第一天</h3>

<pre><code>$start = date("Y-m-1"); 
$date = new DateTime($start);
</code></pre>

<h3>往前推1個月</h3>

<pre><code>$result = $date-&gt;modify( '-1 month' );
</code></pre>

<h3>當月的最後一天</h3>

<pre><code>$result = $date-&gt;modify( '+2 month' );
$result = $date-&gt;modify( '-1 day' );
</code></pre>

<h3>取得一段時間範圍</h3>

<pre><code>DateInterval();
</code></pre>
]]></content>
  </entry>
  
</feed>

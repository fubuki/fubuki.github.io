<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Php | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-09-07T23:05:29+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHPCI 安裝過程]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/02/phpci-an-zhuang-guo-cheng/"/>
    <updated>2014-08-02T23:49:24+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/02/phpci-an-zhuang-guo-cheng</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://www.phptesting.org/">phpci</a> 看起來是專門為 PHP 持續集成所做的， 這是他的<a href="https://github.com/Block8/PHPCI">github</a>， 它的wiki有寫怎麼安裝，
不過裝不起來所以在這邊記錄一下安裝過程。</p>

<p>我這邊是先從 github clone 一份下來，然後我資料庫使用 MariaDB ，server 使用 nginx，
然後使用 composer 安裝必要的部分，但是它本身所以用的 framework 有bug 還要更新，但是
還是有相同的錯誤出現。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 持續集成]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/31/php-chi-xu-ji-cheng/"/>
    <updated>2014-07-31T23:49:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/31/php-chi-xu-ji-cheng</id>
    <content type="html"><![CDATA[<p>記錄建立持續集成環境。</p>

<!-- more -->


<p>之前在工作上有使用 jenkins 搭建持續集成的環境，但是公司沒有導入，現在換用 PHPCI 自行建立一個，
並且使用在正在開發的專案上，從 PHPCI 官網上有比較跟其他同類型的軟體的差異，不過還是等到實際使用後
才能知道，之後也會在 node.js 上面搭建類似的環境。</p>

<ol>
<li><a href="http://www.slideshare.net/baterme/java-2013-java-developerday">java-2013-java-developerday</a></li>
<li><a href="http://book.douban.com/subject/2580604/">持续集成</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 自動化測試]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/23/php-zi-dong-hua-ce-shi/"/>
    <updated>2014-07-23T23:42:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/23/php-zi-dong-hua-ce-shi</id>
    <content type="html"><![CDATA[<p>關於 PHP 自動化測試部分。</p>

<!-- more -->


<p><a href="http://phpunit.de/">浅析 PHP 官方自动化测试方法</a>
<a href="https://github.com/sebastianbergmann/phpunit-selenium">phpunit-selenium</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto Restart Php Script by Register_shutdown_function and Pcntl_exec]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/07/register-shutdown-function-and-destructor/"/>
    <updated>2014-07-07T23:07:53+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/07/register-shutdown-function-and-destructor</id>
    <content type="html"><![CDATA[<p>在使用PHP CLI 跑背景程式有時候會因為記憶體溢出或是其他原因導致程式停止執行，需要讓程式自行重新啟動。</p>

<!-- more -->


<p>register_shutdown_function 是可以讓PHP在意外終止的時候可以去執行特定函式，配合 <code>pcntl_exec()</code> 便可以
完成當程式發生FatalError 時可以自動重新啟動。</p>

<script src="https://gist.github.com/fubuki/e621eb4844a975b9c0e1.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php-fpm 優化參數]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/01/php-fpm-you-hua-can-shu/"/>
    <updated>2014-07-01T23:30:29+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/01/php-fpm-you-hua-can-shu</id>
    <content type="html"><![CDATA[<p>warning pool www child exited on signal 9 (sigkill) after seconds from start</p>

<!-- more -->


<p>php-fpm管理進程的模式有靜態和動態，差別在於靜態會根據參數直接生成固定的進程，動態則是會動態調整所需要的進程，
選擇哪個模式端看於硬體上記憶體大小的差別。</p>

<h2>靜態或是動態</h2>

<p>pm = static or dynamic</p>

<h2>靜態方法</h2>

<p>pm.max_children : php-fpm 最大進程數</p>

<h2>動態方法</h2>

<p>pm.start_servers : php-fpm 一開始創鍵的進程數</p>

<p>pm.min_spare_servers : php-fpm 最小的進程數</p>

<p>pm.max_spare_servers : php-fpm 最大進程數</p>

<h2>其他參數</h2>

<p>pm.max_requests : 一個進程處理多少個請求後就重新啟動</p>

<h2>參數大小設定規則</h2>
]]></content>
  </entry>
  
</feed>

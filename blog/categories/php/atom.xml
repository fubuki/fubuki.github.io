<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Php | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-09-16T23:45:03+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xdebug : PHP Debug 工具]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/13/xdebug-php-debug-gong-ju/"/>
    <updated>2014-09-13T23:44:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/13/xdebug-php-debug-gong-ju</id>
    <content type="html"><![CDATA[<!-- more -->


<p>xdebug 為一款 PHP 用的除錯工具，透過 pecl 安裝後在 php.ini 打開就可以使用了，然後可以搭配 Sublime text 2 的
xdebug client 除錯，此外要在 chorme 安裝 xdebug 的插件後就可以直接通知 server 需要開啟 xdebug 的環境。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hippyvm and Hhvm]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/12/hippyvm-and-hhvm/"/>
    <updated>2014-09-12T22:54:48+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/12/hippyvm-and-hhvm</id>
    <content type="html"><![CDATA[<!-- more -->


<p>以前在研究 Facebook架構的時候看到 <code>hhvm</code> 這個東西，把 PHP 編譯成二進位碼然後運行在虛擬機器上，
而最近又看到另外一款類似的產品 <code>hippyvm</code>，據說比 <code>hhvm</code> 還要快。</p>

<p><code>hhvm</code> 是用 C 和 C++ 撰寫的，而 <code>hippyvm</code> 是用 pypy 撰寫的，不過兩者都是將 PHP 運行在自己的虛擬機器上，
也因此有些基於 zend engine 的插件應該無法直接使用，需要修改源碼才行，這也是當初沒有在工作上採用的原因，
而是使用 phalcon 跟 Zephir 開發專案。</p>

<p>目前在網路可以看到一些關於 hhvm 和 phalcon 之間比較的文章，兩者各有其優點，不過身旁看到的都是使用 phalcon 開發
來提高 PHP 的性能，反而沒看到使用 hhvm 的人，但是不管怎樣這兩者能夠共同發展對 PHP 也是件好事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The PHP Quality Assurance Toolchain]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/11/the-php-quality-assurance-toolchain/"/>
    <updated>2014-09-11T22:00:38+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/11/the-php-quality-assurance-toolchain</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在用 持續集成的時候找到這個 <a href="http://phpqatools.org/">The PHP Quality Assurance Toolchain</a> ，裡面介紹不少針對 PHP 開發有用的工具，
能夠用來提高程式碼的品質。</p>

<ol>
<li>PHPUnit</li>
<li>PHPLOC</li>
<li>PHP_CodeSniffer</li>
<li>hhvm-wrapper</li>
<li>vfsStream</li>
<li>PHP_Depend</li>
<li>PHP Copy/Paste Detector</li>
<li>phpDox</li>
<li>Behat</li>
<li>PHP Mess Detector</li>
<li>PHP Dead Code Detector</li>
<li>Jenkins PHP</li>
</ol>


<p>目前有用到的有</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP With Composer]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/10/php-with-composer/"/>
    <updated>2014-09-10T22:52:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/10/php-with-composer</id>
    <content type="html"><![CDATA[<!-- more -->


<p>以前在安裝 PHP 的插件通常是透過 PEAR 安裝的，然後每個插件就要手動一個個安裝，不過現在有 <a href="https://getcomposer.org/">composer</a> 這個相依性管理工具，
用起來跟 NPM 感覺差不多，只要定義好需要用哪些套件和版本就會幫忙安裝好。</p>

<h3>安裝方法</h3>

<pre><code>curl -sS https://getcomposer.org/installer | php  
mv composer.phar /usr/local/bin/composer 
</code></pre>

<h3>基本用法</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPCI 安裝過程]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/02/phpci-an-zhuang-guo-cheng/"/>
    <updated>2014-08-02T23:49:24+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/02/phpci-an-zhuang-guo-cheng</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://www.phptesting.org/">phpci</a> 看起來是專門為 PHP 持續集成所做的， 這是他的<a href="https://github.com/Block8/PHPCI">github</a>， 它的wiki有寫怎麼安裝，
不過裝不起來所以在這邊記錄一下安裝過程。</p>

<p>我這邊是先從 github clone 一份下來，然後我資料庫使用 MariaDB ，server 使用 nginx，
然後使用 composer 安裝必要的部分，但是它本身所以用的 framework 有bug 還要更新，但是
還是有相同的錯誤出現。</p>
]]></content>
  </entry>
  
</feed>

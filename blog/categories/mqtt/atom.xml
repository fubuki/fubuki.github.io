<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Mqtt | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/mqtt/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2016-07-24T20:34:19+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Facebok Messenger 的 新架構]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/25/mqtt-and-thrift/"/>
    <updated>2014-10-25T22:44:32+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/25/mqtt-and-thrift</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Facebook 更改他們的 Messageer 的背後架構，在 <a href="https://code.facebook.com/posts/820258981365363/building-mobile-first-infrastructure-for-messenger/">Building Mobile-First Infrastructure for Messenger</a> 一文中有提到做了哪些更改並且提到更改後提升的多少效能。</p>

<p>裡面其中一個引我注意的是使用 mqtt + thrift 和 iris，工作上原本有使用 mqtt 當作 server 與 client 之間溝通的協定，但是在傳輸量上面希望能夠在縮減一些，目前看到有人提到 mqtt + protobuf 和 mqtt + thrift，主要都是使用 mqtt 載體然後利用其他方式壓縮訊息內容，Facebook 似乎是用 thrift 壓縮訊息內容，也許可以嘗試看看。</p>

<p>另外一個是 Facebook 採用 &lsquo;push-based snapshot + delta model&#8217;，這個 model 是使用 iris 實現，似乎是一種 message queue，裡面有兩個指針指向 APP 最後收到的訊息和 server 最新收到的訊息，之前有計畫寫個類似的東西用來存放使用者訊息，也許可以參考一下 Facebook 的架構。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mosquitto Bridge Conf]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/10/mosquitto-bridge-conf/"/>
    <updated>2014-06-10T22:04:53+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/10/mosquitto-bridge-conf</id>
    <content type="html"><![CDATA[<p>記錄一下 mosquitto bridge config的部分</p>

<!-- more -->


<p>cleansession</p>

<p>當網路斷線的時候要不要清掉remote broker的連線資訊和訊息，預設是 false，但是不論是true 或是 false在某些情形下都會有問題。</p>

<p>round_robin
如果有多個bridge server 當第一個server當掉就會跳第二個server，然後會有兩種情形，會不會一直去測試第一個server能不能
連接，或是直到當第二個server當掉才會去連接第一個server。</p>

<p>start_type [ automatic | lazy | once ]</p>

<p>automatic 會自動連接上bridge server。</p>

<p>lazy 當收到的訊息超過一個門檻才會連接bridge server 當經過一個idle timeout 會斷開連結，這是為了在
使用者只希望有需要發送訊息的時候才會連接 server</p>

<p>once 會自動連接bridge server但是如果連接失敗就不會重連接。</p>

<p>threshold count
給start_type lazy使用，當收到多少訊息才會重開(從上面來看應該是連接bridge server才對)</p>

<p>topic pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]</p>

<p>topic # both 2 local/topic/ remote/topic/</p>

<p>有哪些 topic會被分享給其他broker，並且可以重新對應topic的部分。</p>

<p>try_private [ true | false ]</p>

<p>設定這個server是一個bridge或是一個普通的客戶端，如果是這個sever是一個bridge會有loop detection，
因此會消耗一些效能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Mqtt Server]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/08/scaling-mqtt-server/"/>
    <updated>2014-06-08T23:59:01+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/08/scaling-mqtt-server</id>
    <content type="html"><![CDATA[<p>目前測試過幾套mqtt broker，記錄一下使用過的心得和擴展方案。</p>

<!-- more -->


<p>目前用過以下幾種broker:<br/>
1. <a href="https://github.com/mcollina/mosca">mosca</a><br/>
2. <a href="http://www.rabbitmq.com/">rabbitmq</a><br/>
3. <a href="http://mosquitto.org/">mosquitto</a></p>

<h2>mosca</h2>

<p>使用node.js寫成的broker，負責pubsub和持久化的部分可以由使用者自行自訂，程式碼也不會太過於龐大，原本
要使用這個當mqtt server在擴展上可以透過共用pubsub和持久化的部分擴展，不過在處理offline message上有問題就放棄了。</p>

<h2>rabbitmq</h2>

<p>使用erlang寫成的broker，rabbitmq透過plugin的方式支援mqtt協定，支援到mqtt 3.1，rabbitmq原本就支援
cluster的架構，並且session可以互相共享，讓rabbitmq在懭展的同時也能處理offline message的問題。</p>

<h2>mosquitto</h2>

<p>使用C語言寫成的，原本是利用mosquitto的bridge架構擴展server，不過在測試offline message的時候沒有辦法
處理session的問題，server之間沒有共享session，但是如果能夠自行處理offline message的問題 mosquitto
也是個不錯的選擇。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MQTT Bridge]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/30/mqtt-bridge/"/>
    <updated>2014-05-30T20:57:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/30/mqtt-bridge</id>
    <content type="html"><![CDATA[<p>關於mqtt bridge的功能。</p>

<!-- more -->


<p>日前在研究各種 <code>MQTT Broker</code> 的方案，市面上有許多方案可以使用，原本是使用<a href="https://github.com/mcollina/mosca">mosca</a>作為server但是在處理離線訊息和擴展性上
有些問題，此外讓手機端連接 <a href="https://github.com/mcollina/mosca">mosca</a> 作測試會出現 connection reset的問題，因此換用 <a href="http://mosquitto.org/">Mosquitto</a>作為替代方案，使用上沒出現
什麼問題，在擴展性上有<a href="http://mqtt.org/wiki/doku.php/bridge_protocol">bridge_protocol</a>這個方案，可以讓一台broker作為bridge讓其他broker透過bridge互相溝通，也支援離線訊息
的功能，詳細設定可以參考<a href="http://mosquitto.org/man/mosquitto-conf-5.html">mosquitto-conf</a>的bridge部分。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mosca]]></title>
    <link href="http://fubuki.github.io/blog/2014/03/18/mosca/"/>
    <updated>2014-03-18T21:38:35+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/03/18/mosca</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://github.com/mcollina/mosca">mosca</a> 利用mqtt.js和Ascoltatori組成支援mqtt的server，後面可以接各種持久化方案，看了源碼可以自行實作跟持久化有關部分。</p>
]]></content>
  </entry>
  
</feed>

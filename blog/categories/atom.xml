<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories//atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-03-22T22:51:30+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[S-expression]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/20/s-expression/"/>
    <updated>2015-03-20T23:07:41+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/20/s-expression</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在學習 LISP 的時候看到的 <a href="http://en.wikipedia.org/wiki/S-expression">S-expression</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSP Concurrency Model]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/19/csp/"/>
    <updated>2015-03-19T01:35:15+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/19/csp</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在學習 golang 順便了解一下跟 erlang 的不同，然後看到了 golang 是採用 CSP 系統，
之前已經看過了 Actor 系統，這邊就去了解關於 CSP 系統。</p>

<p><code>Communicating sequential processes</code> (CSP) <a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes">wiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distcc 加速編譯 C/C++ 程式]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/14/distcc/"/>
    <updated>2015-03-14T23:41:48+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/14/distcc</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://ja.wikipedia.org/wiki/Distcc">Distcc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cellular Automaton]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/02/cellular-automaton/"/>
    <updated>2015-03-02T23:47:34+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/02/cellular-automaton</id>
    <content type="html"><![CDATA[<!-- more -->


<p>元胞自動機用來模擬實驗用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAP 理論關於 Network Partition]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/01/cap-twelve-years-later/"/>
    <updated>2015-03-01T23:11:52+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/01/cap-twelve-years-later</id>
    <content type="html"><![CDATA[<!-- more -->


<p>CAP 理論通常只能滿足其中兩個，但是在 <a href="http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=6133253&amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D6133253">CAP Twelve Years Later: How the &ldquo;Rules&rdquo; Have Changed</a> 裡面有寫另外處理 <code>Network partition</code>
將系統保持在滿足 CAP 的狀態下。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Rabbitmq | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/rabbitmq/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2016-03-30T23:33:06+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rabbitmq Auth Plugin]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/05/rabbitmq-plugin/"/>
    <updated>2014-11-05T22:49:35+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/05/rabbitmq-plugin</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在使用 rabbitmq 建立系統時，由於會將 rabbitmq 暴露在外層所以需要認證 client 是否合法，原本 rabbitmq 提供的認證方式並不適合讓
 client 都有自己的帳密進行認證，所以有想過撰寫一個中間層在 client 和 rabbitmq 之間進行認證，不過後來找到了 <a href="https://github.com/simonmacmullen/rabbitmq-auth-backend-http">rabbitmq-auth-backend-http</a>
 原來可以透過 rabbitmq plugin 擴增認證的方式，更仔細查詢似乎是跟 <code>SASL Authentication</code> 看來是 rabbitmq 已經有提供類似的機制給開發者了只是我沒有
 注意到而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rabbitmq Http Api]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/13/rabbitmq-http-api/"/>
    <updated>2014-08-13T23:51:29+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/13/rabbitmq-http-api</id>
    <content type="html"><![CDATA[<!-- more -->


<p>rabbitmq 的 Management Plugin 提供了 http 的接口讓開發者可以透過 API 控制， 直接透過 Management Plugin 提供
的後台速度不太能恭維， 並且希望能夠透過這些 API 管理 rabbitmq裡的 queue。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rabbitmq Process Leak]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/12/rabbitmq-process-leak/"/>
    <updated>2014-08-12T23:51:41+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/12/rabbitmq-process-leak</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Rabbitmq server 不定期會當機，經過長時間觀察，發現是 erl process 不正常增長的關係， connection 的數量
很正常但是 consumer 和 channel 的數量多出好幾倍，然後 queue的數量也不太對， 目前看得出來是 rabbitmq 的
other process 所佔的記憶體大小超過設定的記憶體上限並且將主機的記憶體整個吃滿，導致 rabbitmq 整個 crash。</p>

<p>目前運行的時候是一個 connecion 對應一個 channel 和 consumer 目前猜這是不是 queue 過多或是後端一次丟太多
訊息讓 rabbitmq 來不及處理的關係還需要一段時間觀察。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ ** WARNING ** Mnesia Is Overloaded]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/23/rabbitmq-star-star-warning-star-star-mnesia-is-overloaded/"/>
    <updated>2014-07-23T00:54:47+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/23/rabbitmq-star-star-warning-star-star-mnesia-is-overloaded</id>
    <content type="html"><![CDATA[<p>大坑待補</p>

<!-- more -->


<p>在使用 <code>rabbitmq</code> 的時候出現一些奇怪的問題，可以連線但是無法訂閱 <code>topic</code>，還有 rabbitmq 關機跟開機很慢的問題，
看 log 有一段是 <code>** WARNING ** Mnesia is overloaded"</code> ，網路上搜尋也有不少人有同樣的問題，在這邊記錄一下解法
在測試看看行不行。</p>

<p><a href="http://erlang.2086793.n4.nabble.com/Q-Mnesia-is-overloaded-td2098730.html">Q-Mnesia-is-overloaded-td2098730</a><br/>
<a href="http://streamhacker.com/2008/12/10/how-to-eliminate-mnesia-overload-events/">How to Eliminate Mnesia Overload Events</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rabbitmq Client Php and Nodejs]]></title>
    <link href="http://fubuki.github.io/blog/2014/03/07/rabbitmq-cliet-php-and-nodejs/"/>
    <updated>2014-03-07T23:57:59+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/03/07/rabbitmq-cliet-php-and-nodejs</id>
    <content type="html"><![CDATA[<ul>
<li>PHP<br/>
<a href="https://github.com/pdezwart/php-amqp" title="php-amqp">php-amqp</a></li>
<li>nodejs<br/>
<a href="https://github.com/squaremo/rabbit.js" title="rabbit.js">rabbit.js</a><br/>
<a href="https://github.com/postwait/node-amqp" title="node-amqp">node-amqp</a></li>
</ul>


<!-- more -->


<p>試驗傳送訊息，從php端傳給nodejs端，還需要測試其他功能。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Nodejs | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-09-15T23:55:24+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Cnpm 建立私有的 Npm 服務]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/30/shi-yong-cnpm-jian-li-si-you-de-npm-fu-wu/"/>
    <updated>2014-08-30T23:40:10+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/30/shi-yong-cnpm-jian-li-si-you-de-npm-fu-wu</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://cnpmjs.org/">cnpm</a> 可以讓使用者建立給企業用的 npm 服務，由於公司政策的關係有時候連接 npm 服務會有問題，
並且如果有自製的套件有發布到多台機器上會有點麻煩，藉此可以利用 <a href="http://cnpmjs.org/">cnpm</a> 加速下載並且避開一些
機器連網的問題。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github NodeLoad]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/24/github-nodeload/"/>
    <updated>2014-08-24T23:18:12+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/24/github-nodeload</id>
    <content type="html"><![CDATA[<!-- more -->


<p>今天在看一本書書名叫 <code>深入淺出 node.js</code> ， 裡面提到一個關於 node.js 在 github 上的應用名叫 <code>nodeload.</code>，使用 node.js 取代原本的
ruby 提供從倉庫下載打包好的原始碼的服務，不過去查 <a href="https://github.com/benschmaus/nodeload">nodeload</a> 的倉庫，似乎很久沒維護了，也許只是找到同名的專案，不過可以在 github的
官方 blog 參考下面兩篇文章讓開發者作為提供類似服務的參考。</p>

<ol>
<li><a href="https://github.com/blog/1089-nodeload-metrics">Nodeload Metrics</a></li>
<li><a href="https://github.com/blog/678-meet-nodeload-the-new-download-server">Meet Nodeload, the new Download server</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 Habits of a Happy Node Hacker]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/23/10-habits-of-a-happy-node-hacker/"/>
    <updated>2014-08-23T22:18:55+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/23/10-habits-of-a-happy-node-hacker</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近看了篇文章，標題是 <a href="https://blog.heroku.com/archives/2014/3/11/node-habits?utm_source=nodeweekly&amp;utm_medium=email#6-use-environment-variables-to-configure-npm&amp;utm_source=ourjs.com">10 Habits of a Happy Node Hacker</a>，裡面列了一些小技巧跟知識大多是跟 npm 這個有關，
那些技巧大多是讓開發者更容易管理專案的依賴庫， 裡面比較重要的我覺得是提到 <code>Harmony</code> 和 <code>Browserify</code> ，其他
的通常在深入使用 npm 的時候或是在開發一個大型專案的就會學到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Koajs 新的 Web 框架]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/21/koajs-xin-de-web-kuang-jia/"/>
    <updated>2014-08-21T22:58:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/21/koajs-xin-de-web-kuang-jia</id>
    <content type="html"><![CDATA[<!-- more -->


<p>由原本 express 的團隊開發的新 web 框架， 主要的特點是使用 yield ，避免 callback 地獄，
看了一下官網的文件如果寫過 express 就可以很容易上手了，在來就是多了解 Cascading 的部分，
似乎可以參考一下這篇<a href="https://docs.djangoproject.com/en/1.6/topics/http/middleware/">文章</a>。</p>

<ol>
<li><a href="https://github.com/koajs/koa">https://github.com/koajs/koa</a></li>
<li><a href="http://koajs.com/">http://koajs.com/</a></li>
<li><a href="http://koajs.cn/">http://koajs.cn/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js 0.12 版本]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/16/node-dot-js-0-dot-12-ban-ben/"/>
    <updated>2014-04-16T23:18:11+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/16/node-dot-js-0-dot-12-ban-ben</id>
    <content type="html"><![CDATA[<p>nodejs 0.12版本出來了，多了一些新的API，改進Cluster的功能此外ES6 的特性在0.11.9也可以開啟使用。</p>

<!-- more -->


<h3>Cork support for writable streams</h3>

<p>這邊是提升tcp傳輸的效率，當數據流裡面的小數據結合成大數據在送出減少tcp和系統的調用。</p>

<h3>tls module</h3>

<p>原本nodejs的tls模塊的效率提高了，之前有使用過http模組的tls功能不過沒有測試過他的效率。</p>

<h3>Crypto performance improvements</h3>

<p>改進加解密演算法的速度，不過我比較常用的主要在session方面的加密</p>

<h3>Reduced garbage collector strain</h3>

<p>0.12版本改寫了關於context的部分<a href="https://github.com/joyent/node/commit/756b622">multi-context refactoring</a>，藉此減少v8在multi-context的情形下，
不會讓V8一直處理關於handle的問題。</p>

<h3>Better cluster performance</h3>

<p>這個改進我有可能比較常用到，目前在作nodejs applicacion的架構優化並且希望機器的資源能充分使用，然後這篇<a href="http://strongloop.com/strongblog/whats-new-in-node-js-v0-12-cluster-round-robin-load-balancing/">post</a>有提到
如何改進cluster的效率。</p>

<h3>Faster timers, faster setImmediate(), faster process.nextTick()</h3>

<p>這部分是提升像是setTimeout之類API的效率，這裡就不太清楚了。</p>

<p>原文在此<a href="http://strongloop.com/strongblog/performance-node-js-v-0-12-whats-new/">node-js-v-0-12-whats-new</a></p>
]]></content>
  </entry>
  
</feed>

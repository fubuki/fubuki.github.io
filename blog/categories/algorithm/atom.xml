<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Algorithm | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-06-22T23:12:42+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wand Algorithm]]></title>
    <link href="http://fubuki.github.io/blog/2015/06/22/wand-algorithm/"/>
    <updated>2015-06-22T22:25:31+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/06/22/wand-algorithm</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在研究 ssdeep 演算法時另外看到的跟倒排有關的演算法，名為 wand (weak and)，這裡有一篇相關的論文 <code>Efficient Query Evaluation using a Two-Level Retrieval
Process</code> ，使用 wand 在搜尋引擎上可以增加搜尋的速度，先用速度較快的但是模糊較不精準的演算法過濾後，在使用耗時但是精準的演算法對文檔做排序。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Log-Structured Merge-Tree]]></title>
    <link href="http://fubuki.github.io/blog/2015/06/15/log-structured-merge-tree/"/>
    <updated>2015-06-15T23:21:36+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/06/15/log-structured-merge-tree</id>
    <content type="html"><![CDATA[<!-- more -->


<p>The log-structured merge-tree (LSM-tree) 在 SSD 上面的優化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quadtrees and Hilbert Curves]]></title>
    <link href="http://fubuki.github.io/blog/2015/06/09/quadtrees-and-hilbert-curves/"/>
    <updated>2015-06-09T23:41:16+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/06/09/quadtrees-and-hilbert-curves</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves">Damn Cool Algorithms: Spatial indexing with Quadtrees and Hilbert Curves</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[路徑演算法的一些介紹]]></title>
    <link href="http://fubuki.github.io/blog/2015/06/03/routing-algorithm/"/>
    <updated>2015-06-03T22:26:20+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/06/03/routing-algorithm</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://theory.stanford.edu/~amitp/GameProgramming/">GameProgramming</a> 裡面介紹了關於路徑演算法的概念和實現方法，以前在大學主要是學了下面幾種路徑演算法，不過
實際在一些領域有其他更有趣的演算法，上面的網頁主要是介紹在遊戲裡面的路徑演算法，可以拿來複習跟學習一些新的路徑演算法。</p>

<ol>
<li>A*</li>
<li>BFS</li>
<li>DFS</li>
<li>Dijkstra</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BRIC Algorithm]]></title>
    <link href="http://fubuki.github.io/blog/2015/05/21/bric-alogrim/"/>
    <updated>2015-05-21T23:27:05+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/05/21/bric-alogrim</id>
    <content type="html"><![CDATA[<!-- more -->


<p>BRIC (Blocked Recursive Image Composition) Algroithm ，最近在做 <code>Photo Collage</code>問題時在一篇 HP 發布的論文上提到的看到的演算法，
在一些 BLOG 跟 Stackoverflow 都看到有人使用這個演算法處理上面提到的問題。</p>

<p>下面列出一些文章裡面提到跟影像處理的關鍵字之後需要研究一下。</p>

<ol>
<li>Saliency Map</li>
<li></li>
</ol>

]]></content>
  </entry>
  
</feed>

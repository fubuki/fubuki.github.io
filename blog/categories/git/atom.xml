<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Git | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-07-24T22:32:50+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Error Object File Is Empty]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/24/git-error-object-file-is-empty/"/>
    <updated>2014-07-24T21:48:08+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/24/git-error-object-file-is-empty</id>
    <content type="html"><![CDATA[<!-- more -->


<p>昨天在使用 git 的時候發生了一件怪事，在 commit 的時候顯示下面的錯誤訊息，似乎是專案本身 git 的資訊出錯了，導致所以
整個專案都有問題了，由於專案在github 上面有備份所以就直接 clone 一份下來，不過似乎是可以修好的。</p>

<p>error: object file .git/objects/7e/b04b2f04cd57e890b010a465c755249ee57f27 is empty
fatal: loose object 7eb04b2f04cd57e890b010a465c755249ee57f27 (stored in .git/objects/7e/b04b2f04cd57e890b010a465c755249ee57f27) is corrupt</p>

<p><a href="http://stackoverflow.com/questions/11706215/how-to-fix-git-error-object-file-is-empty">how to fix GIT error: object file is empty?</a> 這篇文章有提到怎麼修復，如果有在遇到相同的問題可以嘗試看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-Flow]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/24/git-flow/"/>
    <updated>2014-04-24T21:55:19+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/24/git-flow</id>
    <content type="html"><![CDATA[<p>在工作上使用git已經有一段時間了，跟同事一起開發專案時常有個問題，每個人在撰寫新功能時只有本人才知道
這個分支裡面有實現哪些功能，通常快到上線的時候就大家你併我你併他的分支後在推上去，沒有一個工作流程可以
遵循，之後有看到有篇文章描寫一個git工作流程:<a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>。</p>

<!-- more -->


<p><a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>裡面主要敘述如何管理git的分支，可以做為一個團隊如何實踐專案工作
流程的參考，然後最近才發現他有一個管理工具<a href="https://github.com/danielkummer/git-flow-cheatsheet">git-flow</a>可以更容易去實踐這套工作流程，這邊也有篇管理工具的
<a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html">介紹</a>，以後如果有空在推廣給同事使用吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用git做程式碼debug]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/20/shi-yong-gitzuo-cheng-shi-ma-debug/"/>
    <updated>2014-04-20T17:02:31+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/20/shi-yong-gitzuo-cheng-shi-ma-debug</id>
    <content type="html"><![CDATA[<p>專案在多人協作的環境下有時會出現不明原因的bug，通常是因為撰寫的人沒有發現並且沒有經過良好的測試並且又併入主分支，
這導致bug隱藏在程式碼裡面，這邊就記錄一下平常使用git來找出問題點的方法。</p>

<!-- more -->


<p>通常如果知道出錯在哪個檔案可以透過git blame的指令找出此檔案最後修改的人是誰並且還可以得知最後的commit，並且還能夠
下條件限定在某些行數，下面的指令可以顯示 index.php 100行到150行之間的資訊另外我看可以下 <code>-C</code> 的選項可以顯示這段
程式碼的原始出處不過我一般沒有在使用。</p>

<pre><code>    git blame -L 100,150 index.php
</code></pre>

<p>另外一種情形是不知道問題是出錯在哪一個部分，這時可以使用<code>git bisect</code>，這個指令可以讓使用者決定從哪邊開始是運作良好
的commit，然後現在是有問題的commit，接下來會顯示從正常到有問題的commit之間還有多少筆commit並且開一個<code>no branch</code>的
分支使用者讓測試，如果目前的commit是測試出來是正常的狀態便可以下<code>git bisect good</code>告訴 bisect目前的commit是正確的，
如果是錯誤的就可以下<code>git bisect bad</code>說目前是錯誤的狀態，直到確定是在哪一筆commit出錯的，結束後下<code>git bisect reset</code>
就可以回到原本的開發環境。</p>

<pre><code>    git bisect start 開始執行bisect
    git bisect bad   目前的commit是有問題的
    git bisect good [commit] 目前已知的正常狀態是哪一個commit
    git bisect reset 結束 bisect
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 偏好設定]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/20/git-pian-hao-she-ding/"/>
    <updated>2014-04-20T10:22:01+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/20/git-pian-hao-she-ding</id>
    <content type="html"><![CDATA[<p>記錄從網路上看到關於git有用的設定。</p>

<!-- more -->


<h4>1. git 加上顏色</h4>

<pre><code>    git config --global color.ui true
</code></pre>

<h4>2. git 自動補完指令和分支名</h4>

<p>下載<a href="https://github.com/git/git/blob/master/contrib/completion/git-completion.bash">git-completion.bash </a>，然後在.bashrc 加入下面這段程式碼然後讓新的Bash生效就可以了。</p>

<pre><code>    if [ -f ~/.git-completion.bash ]; then
        . ~/.git-completion.bash
    fi
</code></pre>

<h4>3. 顯示目前在哪個分支</h4>

<p>下載<a href="https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh">git-prompt.sh</a>，然後在.bashrc加上下面指令，</p>

<pre><code>    source ~/.git-prompt.sh
    export PS1='$(__git_ps1 "(%s)") \W $'
</code></pre>

<p>之後就可以在git專案底下看到Bash顯示在哪個專案和分支。</p>

<pre><code>    (master) Lucene $
</code></pre>

<h4>4. git alias</h4>

<pre><code>    git config --global alias.check checkout
    git config --global alias.cmt commit
</code></pre>

<h4>5. 設定git使用的編輯器和diff工具</h4>

<p>下面的設定可以在~/.gitconfig修改。</p>

<pre><code>    git config --global core.editor
    git config --global diff.tool 
    git config --global merge.tool 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-reflog的用法]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/07/git-reflogde-yong-fa/"/>
    <updated>2014-04-07T21:11:57+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/07/git-reflogde-yong-fa</id>
    <content type="html"><![CDATA[<p>之前看到一篇去年的消息Jenkins開發者意外的抹消掉在github上一個月的commit，這跟Github的設定和
使用者本身使用強制推送有關，如果想要知道詳細情形請參照<a href="https://groups.google.com/forum/#!msg/jenkinsci-dev/-myjRIPcVwU/t4nkXONp8qgJ">&lsquo;這裡&rsquo;</a>。</p>

<!-- more -->


<p>不過裡面比較引我注意的是他如何回復被蓋掉的部分，利用git-reflog可以取得被刪除的commit，之後再開出
一個新的分支取回原本的版本，這個跟git-log 的差異在git-log只會顯示過去提交過的記錄，但是reflog會顯示
所有的變更紀錄，下面幾個我比較常用的指令都會紀錄在reflog裡面，藉此如果版本有問題了話更容易回復。</p>

<ul>
<li>branch</li>
<li>commit</li>
<li>checkout</li>
<li>pull</li>
<li>push</li>
<li>merge</li>
<li>clone</li>
<li>branch</li>
<li>stash</li>
</ul>


<h1>git-reflog OPTIONS</h1>

<ul>
<li><p>&mdash;stale-fix</p></li>
<li><p>&mdash;expire=<time></p></li>
<li><p>&mdash;expire-unreachable=<time></p></li>
<li><p>&mdash;all</p></li>
<li><p>&mdash;updateref</p></li>
<li><p>&mdash;rewrite</p></li>
<li><p>&mdash;verbose</p></li>
</ul>

]]></content>
  </entry>
  
</feed>

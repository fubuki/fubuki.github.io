<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Javascript | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-01-06T23:44:26+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSON Web Token]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/24/json-web-token/"/>
    <updated>2014-10-24T21:48:13+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/24/json-web-token</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在研究 socket.io 時看到了一個東西； <a href="http://jwt.io/]">jwt</a> ， 後來在 mosca 也看到了相同的東西，尋找之後發現全名為 <code>JSON Web Token</code>，
是用在加密 API 的回傳值，<a href="http://www.sitepoint.com/using-json-web-tokens-node-js/">Using JSON Web Tokens with Node.js</a> 這篇文章裡面有寫說 jwt 是怎麼加密，然後在 <a href="http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-19">ietf</a> 有更詳細的規格，
另外在 <a href="https://docs.auth0.com/scenarios-mqtt">Authenticating &amp; Authorizing Devices using MQTT with Auth0</a> 有寫如何跟 mosca server 一起使用，目前看起來是可以期待未來用在工作上面
，github 上面已經有些範例和函式庫可以使用，也許可以用在目前有使用 mqtt 的應用程式上面提高安全性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook React]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/23/facebook-react/"/>
    <updated>2014-10-23T23:04:08+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/23/facebook-react</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在參加 jsdc 2014 時看到一個很有趣的東西: react 和 flux， facebook 放出的開源專案，可以讓開發者很簡單的去建構前端服務，
下面是他在<a href="http://facebook.github.io/react/index.html">官網</a>上面提到的特性，根據從在 jsdc 的議程聽到的部分似乎是很好上手的框架，從目前用過一些前端的框架雖然不能說
哪個框架比較強大，但是這個 react 應該蠻適合團隊開發的，在開發前端的時候可以看到不少人沒有真的去了解前端閱覽器渲染的過程，
導致寫出十分耗用資源的 javascript，但是透過 Virtual DOM 可以避免這種情形，這是我目前看到最吸引我的特點。</p>

<ol>
<li>JUST THE UI</li>
<li>Virtual DOM</li>
<li>Data flow</li>
</ol>


<p>學習資源:<a href="https://egghead.io/articles/gentle-introduction-to-the-react-flux-architecture">Gentle Introduction to the React Flux Architecture</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何建構一個大型的 Javascript 結構]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/20/large-scale-javascript-application-architecture/"/>
    <updated>2014-09-20T23:41:31+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/20/large-scale-javascript-application-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://www.slideshare.net/jibyjohnc/jqquerysummit-largescale-javascript-application-architecture">largescale-javascript-application-architecture</a> 提到一些如何建構一個大型的 Javascript 結構的概念可最為參考，裡面主要提到 MVC 的概念
和一些 Javascript 的設計模式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Singleton Pattern]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/20/javascript-singleton-pattern/"/>
    <updated>2014-09-20T23:21:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/20/javascript-singleton-pattern</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Javascript 的單例模式確保對象在全域環境下只會有一個實例。</p>

<h3>使用全域變數實現</h3>

<h3>使用閉包</h3>

<h3>重寫 Constructor 構造函數</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 記憶體管理]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/04/javascript-ji-yi-ti-guan-li/"/>
    <updated>2014-09-04T23:40:17+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/04/javascript-ji-yi-ti-guan-li</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近看到這篇 <a href="https://speakerdeck.com/addyosmani/javascript-memory-management-masterclass">javascript-memory-management-masterclass</a> ，裡面主要是使用 chrome 作平台說明 Javascript 記憶體管理的部分，
之前在優化 node.js 有很多工具可以觀察記憶體的使用量，但是在優化閱覽器的 js 卻蠻少去研究這一塊，大部分都是盡量減少載入
檔案的數量和大小以及在優化處理 DOM，而這邊文章可以研究一下並且希望也能套用到 IE 身上雖然是不同的 JS 引擎。</p>
]]></content>
  </entry>
  
</feed>

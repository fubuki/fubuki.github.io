<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Nginx | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/nginx/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-03-20T23:10:13+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nginx 的 Fastcgi_cache 模組]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/16/nginx-fastcgi-cache/"/>
    <updated>2015-03-16T22:44:09+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/16/nginx-fastcgi-cache</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在看 [[Golang] Go言語でサービス作ってる話] 這篇投影片的時候看到了一個東西 <a href="http://wiki.nginx.org/HttpFastcgiModule">fastcgi_cache</a>， 在 fastcgi 層加上 cache，
不過要如何決定哪些要快取，還需要研究這邊有兩篇很有趣的文章可以參考 。</p>

<ol>
<li><a href="http://huoding.com/2014/01/13/321">通过FastCGI Cache实现服务降级</a></li>
<li><a href="http://www.cnxct.com/several-reminder-in-nginx-fastcgi_cache-and-php-session_cache_limiter/">Nginx模块fastcgi_cache的几个注意点</a></li>
</ol>


<p>[[Golang] Go言語でサービス作ってる話]:<a href="http://www.slideshare.net/yoshikazuhashimoto/go-37911621">http://www.slideshare.net/yoshikazuhashimoto/go-37911621</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SEnginx]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/11/senginx/"/>
    <updated>2015-03-11T22:29:42+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/11/senginx</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://github.com/NeusoftSecurity/SEnginx">SEnginx</a> 在安全方面加強的 nginx 版本，裡面內裝一些跟安全相關的套件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx 的 Worker_cpu_affinity 參數]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/25/nginx-worker-cpu-affinity/"/>
    <updated>2015-01-25T21:13:34+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/25/nginx-worker-cpu-affinity</id>
    <content type="html"><![CDATA[<!-- more -->


<p>nginx 可以藉由使用 <code>worker_cpu_affinity</code> 在多核分配進程在哪幾顆 CPU 下執行。</p>

<p>四核四個進程</p>

<pre><code>worker_processes 4;
worker_cpu_affinity 1000 0100 0010 0001;
</code></pre>

<p>四核兩個進程</p>

<pre><code>worker_processes 2;
worker_cpu_affinity 1000 0001;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx-systemtap-toolkit]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/07/nginx-systemtap-toolkit/"/>
    <updated>2015-01-07T21:52:05+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/07/nginx-systemtap-toolkit</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前有學到使用 <code>systemtap</code> 跟蹤內核的行為，這樣用來了解程式的行為十分有幫助，而今天看到了一個使用
<code>systemtap</code> 測試分析 nginx 的工具 : <a href="https://github.com/openresty/nginx-systemtap-toolkit">nginx-systemtap-toolkit</a>， 這個工具可以用來查看 nginx 內部各個
區塊實際執行的情形，在他的網頁有很多命令可以使用，如果遇到 strace 還不能解決的情形可以透過的工具查詢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openresty Server]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/21/ngx-openresty/"/>
    <updated>2014-12-21T22:59:33+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/21/ngx-openresty</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://openresty.org/">openresty</a> 為核心是 nginx 在外加一些第三方模組的版本。</p>

<p>之前在研究 nginx 跟 Lua 結合的資訊時看到了一篇 <a href="http://agentzh.org/misc/slides/ngx-openresty-ecosystem/#1">ngx_openresty: an Nginx ecosystem glued by Lua</a>，
裡面介紹了 <a href="https://github.com/openresty/ngx_openresty">ngx-openresty</a> ，並且介紹了這個基於 nginx 擴展版本裡面有哪些功能，並且從文章標題就可以
得知裡面使用 Lua 整合整個生態系統。</p>

<p><a href="http://openresty.org/">openresty</a> 從官網看到可以透過編寫 Lua 腳本跟 mysql,redis 連線做出反向代理的功能，另外也有看到有人
使用 Lua 編寫影音加密的 Http LiveStream 的功能，看起來可以考慮將一些應用層的東西轉移到 ngix 上面藉此提高
網站的效率。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Nginx | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/nginx/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-10-08T22:44:15+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ngxtop 監控 Nginx 的工具]]></title>
    <link href="http://fubuki.github.io/blog/2015/07/05/ngxtop/"/>
    <updated>2015-07-05T22:32:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/07/05/ngxtop</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://github.com/lebinh/ngxtop">ngxtop</a> 監控 nginx 的工具。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx vs Apache]]></title>
    <link href="http://fubuki.github.io/blog/2015/06/29/nginx-vs-apache/"/>
    <updated>2015-06-29T22:14:30+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/06/29/nginx-vs-apache</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li><a href="http://qiita.com/sion_cojp/items/edb20a6b87f10e186c23">apacheとnginxの比較表とベンチマーク</a></li>
<li><a href="http://nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/">Inside NGINX: How We Designed for Performance &amp; Scale</a></li>
</ol>


<p>上面第一篇文章是比較 apache 2.4 跟 nginx 之間的差別，另外下面的另一篇是在 nginx 的 blog 的文章，
裡面講解到了關於 nginx 內部機制以及 nginx 為何高效能的文章。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Use Sticky Session by Cookie]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/30/nginx-sticky-session/"/>
    <updated>2015-04-30T00:42:38+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/30/nginx-sticky-session</id>
    <content type="html"><![CDATA[<!-- more -->


<p>使用 nginx 作 proxy 的時候有時會希望相同的客戶端連線都會連結到相同的機器，因為有可能每台機器各自存放著一些資料，
而那些資料是沒有共享的，如果客戶端連到另外的主機就會遺失一些資料。</p>

<p>例如我每台機器都有各自 memcached 用來存放一些快取資料，如果客戶端沒有連線到相同主機便會失去這些快取資訊。</p>

<p>要在 nginx 上使用 sticky seession 需要安裝  <a href="https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/overview">nginx-sticky-module-ng</a>，安裝之後就可以在設定檔中使用 <code>sticky</code> ，但是
這個功能是使用 cookie 完成的，所以如果 cookie 有問題就會需要使用 <code>ip-hash</code> 代替。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx SSL 的相關設定]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/14/nginx-ssl/"/>
    <updated>2015-04-14T03:23:27+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/14/nginx-ssl</id>
    <content type="html"><![CDATA[<!-- more -->


<p>紀錄從 Nginx 看到跟 SSL 相關的設定和概念，提高 Nginx 本身透過 SSL 通訊的安全性。</p>

<p>之前在看同事設定 Apache SSL 功能時只有看到密鑰的檔案並沒有另外多加設定，後來自己在設定 nginx 的 SSL 功能時發現還有
其它需要設定的選項: <code>ssl_protocols</code> 和 <code>ssl_ciphers</code>。</p>

<h4>ssl_protocols</h4>

<p>這個設定主要是為了避免伺服器使用有問題的加密協定，目前加密協定主要有 SSL 和 TLS，SSL 本身安全性已經有問題，所以建議使用 TLS，
之前有看到一些瀏覽器廠商將 SSL 3.0 拿掉就是為了安全性問題。</p>

<h3>ssl_ciphers</h3>

<p>這個是用來設定 SSL 通訊所使用的加密演算法，設定內容可以參考下面的工具和網站。</p>

<ol>
<li><a href="https://cipherli.st/">Cipherli.st Strong Ciphers for Apache, nginx and Lighttpd</a></li>
<li><a href="https://github.com/jvehent/cipherscan">cipherscan</a></li>
</ol>


<p>另外網路上有個檢測工具可以看看你自己的網站在 SSL 加密上獲得多少分數 <a href="https://www.ssllabs.com/ssltest/index.html">Qualys Labs</a>。</p>

<h4>參考</h4>

<ol>
<li><a href="http://qiita.com/kuni-nakaji/items/5118b23bf2ea44fed96e">httpsだからというだけで安全？調べたら怖くなってきたSSLの話!？</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx 的 Fastcgi_cache 模組]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/16/nginx-fastcgi-cache/"/>
    <updated>2015-03-16T22:44:09+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/16/nginx-fastcgi-cache</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在看 [[Golang] Go言語でサービス作ってる話] 這篇投影片的時候看到了一個東西 <a href="http://wiki.nginx.org/HttpFastcgiModule">fastcgi_cache</a>， 在 fastcgi 層加上 cache，
不過要如何決定哪些要快取，還需要研究這邊有兩篇很有趣的文章可以參考 。</p>

<ol>
<li><a href="http://huoding.com/2014/01/13/321">通过FastCGI Cache实现服务降级</a></li>
<li><a href="http://www.cnxct.com/several-reminder-in-nginx-fastcgi_cache-and-php-session_cache_limiter/">Nginx模块fastcgi_cache的几个注意点</a></li>
</ol>


<p>[[Golang] Go言語でサービス作ってる話]:<a href="http://www.slideshare.net/yoshikazuhashimoto/go-37911621">http://www.slideshare.net/yoshikazuhashimoto/go-37911621</a></p>
]]></content>
  </entry>
  
</feed>

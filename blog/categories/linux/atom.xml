<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Linux | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-12-14T22:54:32+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[管理 Linux 啟動執行的服務]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/13/linux-start-service/"/>
    <updated>2014-12-13T23:09:26+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/13/linux-start-service</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在 Liinux 使用 <code>update--rc.d</code> 或是 <code>chkconfig</code> 管理開機時要啟動哪些服務，兩者用法是類似的，
另外還有 Ubuntu 底下也有 <code>rcconf</code> 和 <code>sysv-rc-conf</code> 可以使用，不過上面的指令會提到關於執行 level 的概念
決定服務要在哪個時候執行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讓 Crontab 執行 30 秒任務]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/07/crontab-second/"/>
    <updated>2014-12-07T10:48:17+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/07/crontab-second</id>
    <content type="html"><![CDATA[<!-- more -->


<p>crontab 是 linux 用來執行定時任務的指令，但是他最多只能指定到分，如果要有設定 30 秒執行的任務就要比較特殊的做法。</p>

<p>使用 sleep 指令延遲 30 秒執行，這樣就可以達成每 30 秒執行任務的功能。</p>

<pre><code>* * * * * ntpdate -s time.stdtime.gov.tw
* * * * * sleep 30 &amp;&amp;  ntpdate -s time.stdtime.gov.tw
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Ubuntu 14.04 快速安裝 gcc-4.9]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/30/gcc-4-dot-9-on-ubuntu-14-dot-04/"/>
    <updated>2014-11-30T19:45:48+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/30/gcc-4-dot-9-on-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近將作業系統從 Ubuntu 12.04 LTS 升級到 14.04 LTS ，裡面的軟體也一併升級但是後來發現 gcc 只有到 <code>4.8</code> 的版本，沒有到最新的
 <code>4.9</code> 版本，沒有辦法完整支持 <code>C++ 14</code> 的標準。</p>

<p>原本要使用源碼直接編譯，但是發現在 Ubuntu 可以透過 apt 安裝 <code>g++ 4.9</code> ，下面記錄透過 apt 安裝的指令。</p>

<pre><code>sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install g++-4.9
gcc-4.9 -v
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Systemtap]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/28/what-is-systemtap/"/>
    <updated>2014-11-28T23:17:20+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/28/what-is-systemtap</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://sourceware.org/systemtap/">systemtap</a> 一個可以用來抓取 Linux kernal 訊息的工具，在以前開發 Linux 核心的時候要抓去內部的資訊都需要開發者插入程式碼然後重新編譯
後才能顯示一些想要的資訊，但是後後來的核心版本提供了一個名叫 kprobe 機制，而 <a href="https://sourceware.org/systemtap/">systemtap</a> 便是藉由 kprobe 讓開發者更容易去抓取核心的運行資訊。</p>

<h3>如何開啟 systemtap 功能</h3>

<h3>範例</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NetBSD 作業系統簡介]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/21/netbsd/"/>
    <updated>2014-11-21T23:48:18+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/21/netbsd</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://www.netbsd.org/">NetBSD</a> 用來移植各種裝置的作業系統。</p>
]]></content>
  </entry>
  
</feed>

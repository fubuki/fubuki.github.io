<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Linux | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-01-10T23:43:21+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Strace 跟蹤進程]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/08/strace-nginx/"/>
    <updated>2015-01-08T23:28:43+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/08/strace-nginx</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前使用 lighttpd + web.py 架設環境時不知道什麼原因跑不起來，但是 log 裡面沒有顯示可用的訊息除錯，
後來學到使用 <code>strace</code> 追蹤 lighttpd 的運行過程，查到是有模組沒有安裝造成的。</p>

<p>直接運行</p>

<pre><code>strace -ff lighttpd -D -f /etc/lighttpd/lighttpd.conf
</code></pre>

<p>透過 pid 跟蹤</p>

<p>透過 port 跟蹤</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yum 出現 Cannot Retrieve Metalink for Repository: Epel 的錯誤]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/30/cannot-retrieve-metalink-for-repository-epel/"/>
    <updated>2014-12-30T22:49:21+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/30/cannot-retrieve-metalink-for-repository-epel</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在 Centos 6 上面更新套件的時候出現了 <code>Cannot retrieve metalink for repository: epel</code> 的錯誤，
命令列是寫說是因為 SSL 連線出問題，後來從網路上看到是要更新 <a href="http://en.wikipedia.org/wiki/Network_Security_Services">nss</a> 這個套件。</p>

<p><a href="http://en.wikipedia.org/wiki/Network_Security_Services">nss</a> 全名是 <code>Network Security Services</code> 似乎是負責網路加密傳送的功能，不知道是版本的關係才會出現
 SSL 問題，在網路上也到有一些加密的問題也是出自於 <a href="http://en.wikipedia.org/wiki/Network_Security_Services">nss</a>，而在 MDN 也有一篇 <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Overview">Overview of NSS</a> 的文章，
 裡面也說明 nss 是一個開源的加密函式庫，而 Yum 有使用到 nss 處理 SSL 加密連線。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Kernel 安裝 Aufs]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/26/kernel-aufs/"/>
    <updated>2014-12-26T23:18:05+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/26/kernel-aufs</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前研究 Docker 了解了有一個 aufs 檔案系統，所以就想安裝來玩玩看。</p>

<h4>概要</h4>

<p>我是用手上的 Centos 6 測試的，安裝前要先下載下面幾個檔案，然後使用 <code>aufs3-standalone</code> 給
aufs3-linux 打上補丁然後在 config 時打開 aufs 的選項後編譯核心即可。</p>

<ol>
<li>aufs3-linux</li>
<li>aufs3-standalone</li>
<li>aufs-util git://git.code.sf.net/p/aufs/aufs-util</li>
</ol>


<h4>下載</h4>

<pre><code>git clone git://github.com/sfjro/aufs3-linux.git
git clone git://git.code.sf.net/p/aufs/aufs-util
cd aufs3-linux
git clone git://git.code.sf.net/p/aufs/aufs3-standalone
</code></pre>

<h4>切換版本</h4>

<p>切換 <code>aufs3-linux</code> 和 <code>aufs3-standalone</code> 的版本，目前支援到最新的 3.18 版本，
但是要注意兩個版本要一致。</p>

<h4>打上補丁</h4>

<pre><code>aufs3-standalone/aufs3-kbuild.patch
aufs3-standalone/aufs3-base.patch
aufs3-standalone/aufs3-mmap.patch
aufs3-standalone/aufs3-standalone.patch
</code></pre>

<h4>從aufs3-standalone 複製必要的檔案到 kernel</h4>

<pre><code>{Documentation,fs}
include/linux/aufs_type.h 
include/uapi/linux/aufs_type.h
</code></pre>

<h4>最後</h4>

<p>打開 aufs 的編譯選項，然後編譯核心重開機後還需要安裝 <code>aufs-util</code>，這樣 aufs 才能正常運作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Centos 6 升級核心到 3.18]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/25/centos-6-upgrade-to-3-dot-18/"/>
    <updated>2014-12-25T01:21:48+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/25/centos-6-upgrade-to-3-dot-18</id>
    <content type="html"><![CDATA[<!-- more -->


<p>今天把手上的 Centos 的核心從 2.6 升級到 3.18，順便紀錄一下升級的過程。</p>

<p>先下載新版的 Linux Kernel 檔案並且解壓縮。</p>

<pre><code>wget  https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.18.1.tar.gz
tar zxf linux-3.18.1.tar.gz
</code></pre>

<p>設定編譯選項，我原本找不到舊的編譯檔案，後來在 <code>/usr/src/kernel</code> 底下找到。</p>

<pre><code>cp /usr/src/kernel/config .config
make menuconfig
</code></pre>

<p>開始編譯核心和模組，加上 -j 參數使用多核心編譯。</p>

<pre><code>make -j bzImage 
make -j modules 
make -j modules_install 
</code></pre>

<p>安裝並且修正開機順序後重開機。</p>

<pre><code>make install
vim /etc/grub.conf
reboot
</code></pre>

<p>重開機後就可以看到核心已經變成 3.18 版本，不過卻出現另外一個問題，當我要使用 <code>docker</code>
的時候卻出現 iptables 的錯誤，最後發現是編譯的時候沒有將 NAT 的模組編譯進去所導致的問題，
之後重新編譯就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分析 Vmcore 和 vmcore-dmesg.txt]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/22/vmcore-dmesg-dot-txt/"/>
    <updated>2014-12-22T23:11:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/22/vmcore-dmesg-dot-txt</id>
    <content type="html"><![CDATA[<!-- more -->


<p>今天在試玩 docker 的時候，因為不知名因素導致系統直接重啟，後來發現是整個內核 crash 原因是似乎是跟 <code>device-mapper</code> 脫不了關係，
看他 console 列出的最後訊息可以得知在 <code>/var/crash</code> 生成了兩個文件: <code>vmcore</code> 和 <code>vmcore-dmesg.txt</code>。</p>

<p>在 <code>/var/crash</code> 下面的兩個文件是記錄了系統 Crash 時的最後訊息，可以透過這些文件追蹤發生了什麼事，要追蹤需要使用幾個工具: kdump 和 crash
，kdump 是讓系統 Crash 時將內核的訊息 dump 到硬碟上以供使用者除錯， crash 是可以去分析 <code>vmcore</code> 的內容，但是需要 vmlinux 的檔案才能分析
 vmcore 的內容， vmlinux 需要跟目前的系統核心相同。</p>

<p> 另外一個 vmcore-dmesg.txt 檔案是記錄一些系統資訊和 Crash 時的資訊，雖然沒有比 vmcore 詳細但是也可以作為參考，</p>
]]></content>
  </entry>
  
</feed>

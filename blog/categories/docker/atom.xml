<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Docker | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-12-22T23:31:19+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Docker 建立 FFmpeg 環境]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/20/docker-ffmpeg/"/>
    <updated>2014-12-20T22:33:21+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/20/docker-ffmpeg</id>
    <content type="html"><![CDATA[<!-- more -->


<p> 之前在安裝 FFmpeg 的時候吃了不少苦頭，然後未來也有可能會需要更新一些已經有安裝的 Server，所以嘗試一下使用 docker 建立
  ffmpeg 環境，目前有找到 <a href="https://registry.hub.docker.com/u/cellofellow/ffmpeg/">cellofellow/ffmpeg</a> 這個 docker file 可以使用， docker file 安裝指令如下:</p>

<p>  docker pull cellofellow/ffmpeg
  docker run -i -t cellofellow/ffmpeg /bin/bash</p>

<p>安裝後進去就可以使用最新版的 ffmpeg 下面是他的編譯參數目前手上會用的編碼都有包進去了，比較有問題的是 <code>libfdk-aac</code> 與
 <code>libfaac</code> 的差別，兩個似乎都是用來解 FAAC 的，不過從網路上的資訊來看是 libfdk-aac 比較好。</p>

<pre><code>configuration: 
--extra-libs=-ldl 
--enable-gpl 
--enable-libass 
--enable-libfdk-aac 
--enable-libmp3lame 
--enable-libopus 
--enable-libtheora 
--enable-libvorbis 
--enable-libvpx 
--enable-libx264 
--enable-libx265 
--enable-nonfree
</code></pre>

<p>題外話在網路上有看到 Cookpad 也有用 docker 建立影音轉碼平台 : <a href="http://techlife.cookpad.com/entry/ffmpeg_and_imagemagick_setup_with_docker">Dockerでffmpegもimagemagickも怖くないという話</a>，
裡面的的 docker file 也有放出來 <a href="https://github.com/cookpad/janiConverter">janiConverter</a> 讓人使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Fig]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/03/fig-and-docker/"/>
    <updated>2014-12-03T23:05:08+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/03/fig-and-docker</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://www.fig.sh/">fig</a> 是一個跟 docker 有關的命令列管理工具，看起來比 coreos 本身簡單許多適合初學者使用但是提供功能就比較少，
不過在網路上看到有人有些轉換工具可以將 fig 產生的設定轉換成 coreos 所需的格式，所以可以先玩玩 fig 覺得不錯在
轉用 coreos。</p>

<p>下面官網在 ubuntu 下的安裝方法</p>

<pre><code>curl -L https://github.com/docker/fig/releases/download/1.0.1/fig-`uname -s`-`
uname -m` &gt; /usr/local/bin/fig; chmod +x /usr/local/bin/fig
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安裝 Coreos]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/01/install-coreos/"/>
    <updated>2014-12-01T01:19:28+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/01/install-coreos</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Coreos 在官網提供了不少安裝方式，我是使用它提供的 VMware 的映像檔安裝，下載之後解壓縮使用 VMware 啟動。</p>

<pre><code>curl -LO http://alpha.release.core-os.net/amd64-usr/current/coreos_production_vmware_insecure.zip
</code></pre>

<p>下載的檔案裡面有個 <code>insecure_ssh_key</code>，這個映像檔裡面沒有提供帳密登入預設你要用公私鑰登入，我這邊使用
<code>puttygen.exe</code> 載入 <code>insecure_ssh_key</code> 生成 putty 所吃的格式後使用 <code>core</code> 當作登入帳號便可以登入。</p>

<pre><code>docker run -t -i ubuntu /bin/bash
</code></pre>

<p>整個映像檔大小不到 200M  架設起來很方便，目前有看到有公司考慮要將系統移除 docker 裡面利用 Coreos 建立環境，
這也許可以參考未來架構的規劃。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker 15 Tips]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/26/docker-15-tips/"/>
    <updated>2014-11-26T23:10:32+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/26/docker-15-tips</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://speakerdeck.com/bmorearty/15-docker-tips-in-5-minutes">15 Docker Tips in 5 Minutes</a> 裡面簡介了一些關於 Docker 小技巧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coreos Docker]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/03/coreos-docker/"/>
    <updated>2014-11-03T21:06:19+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/03/coreos-docker</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://coreos.com/">coreos</a> 是基於 docker 可用來建立大型的運算平台的 linux 發行版本，從官網看來可以知道 coreos 是希望藉由建立群集然後在上面跑 docker 容器的方式
擴展整個平台， coreos 裡面除了有 docker 之外有兩個東西還蠻有趣的，一個是 etcd 另外一個是 fleet，這兩個都有開源在 github 上面。</p>

<h4>etcd</h4>

<p>etcd 類似 zookeeper 的東西能夠檢查伺服器是否存活，裡面使用了 Raft 的演算法。</p>

<h4>fleet</h4>

<p><a href="https://coreos.com/blog/cluster-level-container-orchestration/">Cluster-Level Container Deployment with fleet</a>。</p>
]]></content>
  </entry>
  
</feed>

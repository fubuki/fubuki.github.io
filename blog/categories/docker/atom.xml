<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Docker | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-11-25T23:51:15+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker 的 Volumes 功能]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/28/docker-volumes/"/>
    <updated>2014-12-28T22:51:26+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/28/docker-volumes</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在用 Docker 建立的 FFmpeg 的容器時，想要建立的直接在容器裡面寫入檔案執行轉檔，然後看到了 Docker 有類似掛載的功能，
可以建立 Volumes 讓各個不同的容器共用，之後如果有升級或是跟其他容器結合形成一個服務平台可以採取這樣的做法。</p>

<p>另外有看到一篇蠻有趣的文章 : <a href="http://stackoverflow.com/questions/18496940/how-to-deal-with-persistent-storage-e-g-databases-in-docker">How to deal with persistent storage (e.g. databases) in docker</a>，裡面的回答有提到一個東西
 <code>data only container</code>，似乎是建立一個專門掛載 Volumes 的 container ，從這篇 <a href="http://www.offermann.us/2013/12/tiny-docker-pieces-loosely-joined.html">Tiny Docker Pieces, Loosely Joined</a> 最後面
 有提到一些關於這樣做法的好處，似乎是能更好管理 Volumes 裡面的內容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker 的 Storage Driver]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/23/docker-storage/"/>
    <updated>2014-12-23T21:46:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/23/docker-storage</id>
    <content type="html"><![CDATA[<p>最近似乎是因為 docker 的 Storage Driver 關係導致 Kernel Bug 所以要研究一下這一個部分。</p>

<!-- more -->


<p>如果在命令列下 <code>docker -D info</code> 其中就可以看到目前機器上的 Storage Driver 是什麼，目前我手上兩種 Linux 發行版，
在 ubuntu 14.04LTS 下可以看是 <code>aufs</code>，如果是在 centos 6 會是 <code>device-mapper</code>，另外 docker 還有支援 Btrfs。</p>

<h4>　Aufs</h4>

<p>目前只有在 Debain 系列的 Linux 版本才有包進內核裡的檔案系統，開發者是名叫<code>岡島順治郎</code>的日本人，從網路上的評價
來看 Aufs 似乎是個蠻不錯的檔案系統，但是由於一些原因一直不能加進 Linux 的內核裡面，原因似乎是代碼寫的不太好的原因。</p>

<p>官網在這 <a href="http://aufs.sourceforge.net/">Aufs</a> 另有一些可以研究的東西 <code>Union mount</code> 和 <code>UnionFS</code>.</p>

<h4>Device-mapper</h4>

<p><a href="http://www.ibm.com/developerworks/cn/linux/l-devmapper/index.html">Linux 内核中的 Device Mapper 機制</a></p>

<h4>Btrfs</h4>

<p>Oracle 開發的檔案系統，從 2007 年開始開發，已經有穩定版可以使用，目前 facebook 有在測試這個檔案系統。</p>

<p>wiki : <a href="https://btrfs.wiki.kernel.org/index.php/Main_Page">btrfs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Docker 建立 FFmpeg 環境]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/20/docker-ffmpeg/"/>
    <updated>2014-12-20T22:33:21+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/20/docker-ffmpeg</id>
    <content type="html"><![CDATA[<!-- more -->


<p> 之前在安裝 FFmpeg 的時候吃了不少苦頭，然後未來也有可能會需要更新一些已經有安裝的 Server，所以嘗試一下使用 docker 建立
  ffmpeg 環境，目前有找到 <a href="https://registry.hub.docker.com/u/cellofellow/ffmpeg/">cellofellow/ffmpeg</a> 這個 docker file 可以使用， docker file 安裝指令如下:</p>

<pre><code>docker pull cellofellow/ffmpeg  
docker run -i -t cellofellow/ffmpeg /bin/bash
</code></pre>

<p>安裝後進去就可以使用最新版的 ffmpeg 下面是他的編譯參數目前手上會用的編碼都有包進去了，比較有問題的是 <code>libfdk-aac</code> 與
 <code>libfaac</code> 的差別，兩個似乎都是用來解 FAAC 的，不過從網路上的資訊來看是 libfdk-aac 比較好。</p>

<pre><code>configuration: 
--extra-libs=-ldl 
--enable-gpl 
--enable-libass 
--enable-libfdk-aac 
--enable-libmp3lame 
--enable-libopus 
--enable-libtheora 
--enable-libvorbis 
--enable-libvpx 
--enable-libx264 
--enable-libx265 
--enable-nonfree
</code></pre>

<p>題外話在網路上有看到 Cookpad 也有用 docker 建立影音轉碼平台 : <a href="http://techlife.cookpad.com/entry/ffmpeg_and_imagemagick_setup_with_docker">Dockerでffmpegもimagemagickも怖くないという話</a>，
裡面的的 docker file 也有放出來 <a href="https://github.com/cookpad/janiConverter">janiConverter</a> 讓人使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Fig]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/03/fig-and-docker/"/>
    <updated>2014-12-03T23:05:08+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/03/fig-and-docker</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://www.fig.sh/">fig</a> 是一個跟 docker 有關的命令列管理工具，看起來比 coreos 本身簡單許多適合初學者使用但是提供功能就比較少，
不過在網路上看到有人有些轉換工具可以將 fig 產生的設定轉換成 coreos 所需的格式，所以可以先玩玩 fig 覺得不錯在
轉用 coreos。</p>

<p>下面官網在 ubuntu 下的安裝方法</p>

<pre><code>curl -L https://github.com/docker/fig/releases/download/1.0.1/fig-`uname -s`-`
uname -m` &gt; /usr/local/bin/fig; chmod +x /usr/local/bin/fig
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安裝 Coreos]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/01/install-coreos/"/>
    <updated>2014-12-01T01:19:28+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/01/install-coreos</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Coreos 在官網提供了不少安裝方式，我是使用它提供的 VMware 的映像檔安裝，下載之後解壓縮使用 VMware 啟動。</p>

<pre><code>curl -LO http://alpha.release.core-os.net/amd64-usr/current/coreos_production_vmware_insecure.zip
</code></pre>

<p>下載的檔案裡面有個 <code>insecure_ssh_key</code>，這個映像檔裡面沒有提供帳密登入預設你要用公私鑰登入，我這邊使用
<code>puttygen.exe</code> 載入 <code>insecure_ssh_key</code> 生成 putty 所吃的格式後使用 <code>core</code> 當作登入帳號便可以登入。</p>

<pre><code>docker run -t -i ubuntu /bin/bash
</code></pre>

<p>整個映像檔大小不到 200M  架設起來很方便，目前有看到有公司考慮要將系統移除 docker 裡面利用 Coreos 建立環境，
這也許可以參考未來架構的規劃。</p>
]]></content>
  </entry>
  
</feed>

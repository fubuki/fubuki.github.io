<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Architecture | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/architecture/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-06-15T23:32:57+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quora Architecture]]></title>
    <link href="http://fubuki.github.io/blog/2015/05/12/quora-architecture/"/>
    <updated>2015-05-12T22:51:08+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/05/12/quora-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li><a href="http://www.quora.com/How-does-Quoras-parallel-rendering-architecture-work">How does Quora&rsquo;s parallel rendering architecture work?</a></li>
<li><a href="http://blog.quora.com/Improving-Site-Speed">Improving Site Speed</a></li>
<li><a href="http://engineering.quora.com/Web-Server-Architecture-at-Quora">Web Server Architecture at Quora</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stack Overflow 的架構]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/10/stack-overflow-de-jia-gou/"/>
    <updated>2015-02-10T23:00:17+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/10/stack-overflow-de-jia-gou</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Stack Overflow 是很有名的程式設計師用的問答網站， 下面兩篇文章介紹 Stack Overflow 怎麼使用 25 台伺服器撐起整個服務。</p>

<ol>
<li><a href="http://nickcraver.com/blog/2013/11/22/what-it-takes-to-run-stack-overflow/">What it takes to run Stack Overflow</a></li>
<li><a href="http://www.dev-metal.com/architecture-stackoverflow/">The architecture of StackOverflow</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WhatsApp 的架構]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/31/whatapp/"/>
    <updated>2015-01-31T23:06:37+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/31/whatapp</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li><a href="http://highscalability.com/blog/2014/3/31/how-whatsapp-grew-to-nearly-500-million-users-11000-cores-an.html">How WhatsApp Grew to Nearly 500 Million Users, 11,000 cores, and 70 Million Messages a Second</a></li>
<li><a href="http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html">The WhatsApp Architecture Facebook Bought For $19 Billion</a></li>
<li><a href="https://www.youtube.com/watch?v=c12cYAUTXXs">Erlang Factory 2014 - That&rsquo;s &lsquo;Billion&rsquo; with a &lsquo;B&rsquo;: Scaling to the Next Level at WhatsApp</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Event Sourcing Pattern]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/27/event-sourcing-pattern/"/>
    <updated>2015-01-27T23:03:23+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/27/event-sourcing-pattern</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在看 LMAX 的架構的時候，提到利用 <code>Event Sourcing</code> 這個模式開發程式可以完全在記憶體裡面運算，提升程式運算的效能，
那個時候尚未了解 <code>Event Sourcing</code> 是何物，今天就紀錄一下研究的資料: <a href="http://ookami86.github.io/event-sourcing-in-practice/">Event Sourcing in practice</a>。</p>

<p><a href="http://ookami86.github.io/event-sourcing-in-practice/">Event Sourcing in practice</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LMAX Architecture]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/16/lmax-architecture/"/>
    <updated>2015-01-16T22:37:48+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/16/lmax-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://martinfowler.com/articles/lmax.html">The LMAX Architecture</a> 一個高吞吐量的金融交易平台，是由 LMAX Exchange 基於 JVM 所建立的架構，文章裡面提到一些他們如何做到每秒六百萬訂單的
方法，另外這邊有 <a href="http://www.infoq.com/presentations/LMAX">LMAX - How to Do 100K TPS at Less than 1ms Latency</a> 文章作者的演講。</p>

<ol>
<li>Event Source</li>
<li>全都在記憶體裡面運算</li>
<li>由於 Event Source 的關係要另外處理持久化的問題</li>
<li>Disruptor 的 RingBuffer 結構</li>
</ol>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Architecture | Learning Blog]]></title>
  <link href="http://fubuki.github.io/blog/categories/architecture/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-01-22T23:48:02+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LMAX Architecture]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/16/lmax-architecture/"/>
    <updated>2015-01-16T22:37:48+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/16/lmax-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://martinfowler.com/articles/lmax.html">The LMAX Architecture</a> 一個高吞吐量的金融交易平台，是由 LMAX Exchange 基於 JVM 所建立的架構，文章裡面提到一些他們如何做到每秒六百萬訂單的
方法，另外這邊有 <a href="http://www.infoq.com/presentations/LMAX">LMAX - How to Do 100K TPS at Less than 1ms Latency</a> 文章作者的演講。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aeron Message Protocol]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/16/aeron-message-protocol/"/>
    <updated>2014-12-16T23:24:50+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/16/aeron-message-protocol</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近發現了一個跟消息系統有關的的開源專案: <a href="https://github.com/real-logic/Aeron">Aeron</a> ，目前已經手上是用過好幾種消息系統每種都有他們的特性，
所以是否還需要另外新的消息系統? 這篇 <a href="http://highscalability.com/blog/2014/11/17/aeron-do-we-really-need-another-messaging-system.html">Aeron: Do we really need another messaging system?</a> 可以讀讀，了解
跟為何開發這個系統。</p>

<p>上面的文章有提到其他消息系統像是瑞士刀， <a href="https://github.com/real-logic/Aeron">Aeron</a> 則像是一把手術刀，沒有提供太多功能，並且是放在 tcp 的層級使用，
看起來是用來建立系統低階的部分高階的部分在讓開發者另外去解決，這讓我感覺有點像 zeroMQ 但是文章裡面卻說是不一樣的東西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於處理 LOG 的事情]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/27/process-log/"/>
    <updated>2014-11-27T02:16:51+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/27/process-log</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在在研究 Apache Kafka 處理 LOG 的情報，最後發現我看到的資料都是 Jay Kreps 寫的， Jay Kreps 似乎是 Linkedln 的程式設計師，負責 Linkedln 的開源專案，
這些專案裡面都是似乎都是用來處理 BIG DATA ，而 Jay Kreps 也寫了一些關於 BIG DATA 和 Linkedln 架構的技術文章，下面有列出最近在搜尋如何處理大量 LOG 的參考資料。</p>

<p><a href="http://www.slideshare.net/JayKreps1/i-32858698">The Log: What every software engineer should know about real-time data&rsquo;s unifying abstraction</a>
<a href="http://shop.oreilly.com/product/0636920034339.do">I Heart Logs Event Data, Stream Processing, and Data Integration </a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[淘寶技術這十年]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/22/tao-bao-ji-shu-zhe-shi-nian/"/>
    <updated>2014-09-22T23:53:39+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/22/tao-bao-ji-shu-zhe-shi-nian</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近看完了<code>淘寶技術這十年</code>這本書，道盡淘寶技術的發展，從 LAMP 到 JAVA 這其中有些想法可以參考，
在擴展上和建構整個系統的歷史上可以看到淘寶如何建構 DB CDN Cache 還有硬體的過程。</p>

<h5>書中提到的技術列表</h5>

<ol>
<li><a href="http://tair.taobao.org/">tair</a></li>
<li><a href="http://code.taobao.org/p/tfs/src/">tfs</a></li>
<li><a href="http://sqlrelay.sourceforge.net/">sqlrelay</a></li>
<li><a href="https://github.com/alibaba/cobar">cobar</a></li>
</ol>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-08-13T23:57:25+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rabbitmq Http Api]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/13/rabbitmq-http-api/"/>
    <updated>2014-08-13T23:51:29+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/13/rabbitmq-http-api</id>
    <content type="html"><![CDATA[<!-- more -->


<p>rabbitmq 的 Management Plugin 提供了 http 的接口讓開發者可以透過 API 控制， 直接透過 Management Plugin 提供
的後台速度不太能恭維， 並且希望能夠透過這些 API 管理 rabbitmq裡的 queue。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rabbitmq Process Leak]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/12/rabbitmq-process-leak/"/>
    <updated>2014-08-12T23:51:41+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/12/rabbitmq-process-leak</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Rabbitmq server 不定期會當機，經過長時間觀察，發現是 erl process 不正常增長的關係， connection 的數量
很正常但是 consumer 和 channel 的數量多出好幾倍，然後 queue的數量也不太對， 目前看得出來是 rabbitmq 的
other process 所佔的記憶體大小超過設定的記憶體上限並且將主機的記憶體整個吃滿，導致 rabbitmq 整個 crash。</p>

<p>目前運行的時候是一個 connecion 對應一個 channel 和 consumer 目前猜這是不是 queue 過多或是後端一次丟太多
訊息讓 rabbitmq 來不及處理的關係還需要一段時間觀察。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Mobile Vclick , Tap and Click]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/11/jquery-mobile-vclick-tap-and-click/"/>
    <updated>2014-08-11T22:52:44+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/11/jquery-mobile-vclick-tap-and-click</id>
    <content type="html"><![CDATA[<!-- more -->


<p>工作上有需要製作Mobile Device用的網頁，以前有聽過有些閱覽器有些事件是不太一樣的，特此在這
紀錄一下幾種點擊事件。
可以參考<a href="http://stackoverflow.com/questions/15274809/in-jquery-mobile-whats-the-diff-between-tap-and-vclick">in-jquery-mobile-whats-the-diff-between-tap-and-vclick</a></p>

<h3>Click</h3>

<p>手機和桌面閱覽器都有支援，在 <code>android</code> 會有 Visible delay</p>

<h3>Tap</h3>

<p>只有手機閱覽器支援, no delay</p>

<h3>VClick</h3>

<p>手機和桌面閱覽器都有支援 no delay</p>

<p>目前看到有人同時使用 <code>click</code> 和 <code>vclick</code> 綁定，使用上要注意的應該是 Visible delay。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[True Random Numbers vs. Pseudo-random Numbers]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/10/true-random-numbers-vs-pseudo-random-numbers/"/>
    <updated>2014-08-10T00:10:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/10/true-random-numbers-vs-pseudo-random-numbers</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://en.wikipedia.org/wiki/Random_number_generation">Random_number_generation</a>
利用 <a href="http://en.wikipedia.org/wiki/Atmospheric_noise">Atmospheric noise</a> 的當亂數種子。</p>

<p>紀錄一下產生隨機亂數的方法，以及一般計算機的產生亂數的問題。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 學習資源]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/09/git-xue-xi-zi-yuan/"/>
    <updated>2014-08-09T22:58:44+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/09/git-xue-xi-zi-yuan</id>
    <content type="html"><![CDATA[<!-- more -->


<p>紀錄一下本身用來學習 Git 的資源</p>

<ol>
<li><a href="http://rogerdudler.github.io/git-guide/index.html">git &ndash; 简明指南</a></li>
<li><a href="https://try.github.io/">Try Git</a></li>
<li><a href="http://gitbook.liuhui998.com/">Git Community Book 中文版</a></li>
<li><a href="http://git-scm.com/book/zh-tw">Pro Git book</a></li>
<li>Version Control with Git</li>
<li><a href="http://pcottle.github.io/learnGitBranching/">learnGitBranching</a></li>
<li>Git权威指南</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boosting and Bagging]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/08/boosting-and-bagging/"/>
    <updated>2014-08-08T23:28:16+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/08/boosting-and-bagging</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Ensemble learning (集成學習)，似乎是混合多個學習演算法提高結果的精確度 ，而 boosting 和 bagging便是
其中集成學習的兩種方法，下面整理一些學習資源。</p>

<h3>boosting</h3>

<p>AdaBoost（Adaptive Boosting）</p>

<p>使用同一個訓練集， 每次訓練的時候針對有問題訓練資料加大權重，讓函數靠往有問題的訊息資料。</p>

<h3>bagging</h3>

<p>每次訓練函數的時候從資料取出子資料集，然後多次訓練函數，最後有多個分類函數以投票方式分類新的資料。</p>

<h3>差別</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自然語言分類演算法]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/08/zi-ran-yu-yan-fen-lei-yan-suan-fa/"/>
    <updated>2014-08-08T22:32:18+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/08/zi-ran-yu-yan-fen-lei-yan-suan-fa</id>
    <content type="html"><![CDATA[<!-- more -->


<p>紀錄一下在統計自然語言處理的看到的分類演算法。</p>

<ol>
<li>Logistic Regression</li>
<li>Linear Discriminant Analysis</li>
<li>Decision List</li>
<li>Winnow algorithm</li>
<li>Mistake N-Driven Online Linear Threshold Learning Algorithm</li>
<li>Rocchio algorithm</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perceptron Algorithm]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/07/perceptron/"/>
    <updated>2014-08-07T23:35:33+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/07/perceptron</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最簡單的類神經網路，在學習文本分類時，為了提高演算法的性能需要調整函數的參數使用了梯度下降的方法。
其中提到了感知器(Perceptron)，簡單來說是只有單層的類神經網路，並且因為感知器收斂定理(perceptron convergence theorem)
可以保證在處理線性可分的問題確保感知器可以收斂，在線性不可分的問題上會出現問題。</p>

<h3>定義</h3>

<h3>例子</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TextTiling 算法]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/06/texttiling-suan-fa/"/>
    <updated>2014-08-06T23:50:03+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/06/texttiling-suan-fa</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>分割算法</h3>

<ol>
<li>cohesion scorer</li>
<li>depth scorer</li>
<li>boundary selector</li>
</ol>


<h3>cohesion scorer</h3>

<ol>
<li>Vector Space Scoring</li>
<li>Block Comparison</li>
<li>Vocabulary Introduction</li>
</ol>


<h3>目的</h3>

<p>篇章分割，分析文章中使用者有興趣的部分。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Mobile Form]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/05/jquery-mobile-from/"/>
    <updated>2014-08-05T23:54:25+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/05/jquery-mobile-from</id>
    <content type="html"><![CDATA[<!-- more -->


<p>使用 jQuery Mobile 製作手機板用的表單，原本有在使用 <code>Twitter Bootstrap</code> 製作網站，最近想試試看
使用<a href="http://demos.jquerymobile.com/1.2.1/docs/forms/forms-all.html">jQuery Mobile Form</a> 製作看看， 目前工作上看到合作的設計師似乎只是使用Bootstrap的RWD功能，
但是按鈕設計和排版上有點怪怪的。</p>

<p><a href="http://demos.jquerymobile.com/1.2.1/docs/forms/forms-all.html">jQuery Mobile Form</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explore-Exploit Trade-off]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/04/explore-exploit-trade-off/"/>
    <updated>2014-08-04T23:33:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/04/explore-exploit-trade-off</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>We call experimentation  exploration  and we call profit-maximization exploitation</code> 在 Bandit.Algorithms.for.Website.Optimization 書中看到關於 Explore-Exploit trade-off
的定義，簡單來說在解決問題的成本和獲得的利潤上取得平衡，書中開頭的案例:為網站更換 LOGO， 傳統的做法是使用 AB TEST但是花大量的時間，所以從這邊我可以慢慢猜得出來如何跟
Bandit Algorithms 有關。</p>

<p>另外記錄一篇跟<code>Explore-Exploit trade-off</code>相關的有趣論文:<a href="http://research.microsoft.com/apps/pubs/default.aspx?id=122779">Web-Scale Bayesian Click-Through Rate Prediction for Sponsored Search Advertising in Microsoft’s Bing Search Engine</a></p>

<p>另外有幾篇關於A/B Testing 和 Bandit.Algorithms的比較的文章可以作為參考。</p>

<ol>
<li><a href="http://www.chrisstucchio.com/blog/2012/bandit_algorithms_vs_ab.html">Why Multi-armed Bandit Algorithm is Not “Better” than A/B Testing</a></li>
<li><a href="http://stevehanov.ca/blog/index.php?id=132">20 lines of code that will beat A/B testing every time</a></li>
<li><a href="http://www.chrisstucchio.com/blog/2012/bandit_algorithms_vs_ab.html">Why Multi-armed Bandit algorithms are superior to A/B testing</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PCFG]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/03/pcfg/"/>
    <updated>2014-08-03T23:46:36+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/03/pcfg</id>
    <content type="html"><![CDATA[<p>Probabilistic Context Free Grammar (PCFG)，之前有在編譯器原理和計算理論看過 <code>Context Free Grammar</code> 簡稱CFG，
當初會提到 CFG 是因為CFG可以用來表達大多數的程式語言的語法， 然後這次在自然語言處理的部分看到PCFG，</p>

<!-- more -->


<h3>定義</h3>

<h3>語法分析</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPCI 安裝過程]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/02/phpci-an-zhuang-guo-cheng/"/>
    <updated>2014-08-02T23:49:24+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/02/phpci-an-zhuang-guo-cheng</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://www.phptesting.org/">phpci</a> 看起來是專門為 PHP 持續集成所做的， 這是他的<a href="https://github.com/Block8/PHPCI">github</a>， 它的wiki有寫怎麼安裝，
不過裝不起來所以在這邊記錄一下安裝過程。</p>

<p>我這邊是先從 github clone 一份下來，然後我資料庫使用 MariaDB ，server 使用 nginx，
然後使用 composer 安裝必要的部分，但是它本身所以用的 framework 有bug 還要更新，但是
還是有相同的錯誤出現。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[八月書單]]></title>
    <link href="http://fubuki.github.io/blog/2014/08/01/ba-yue-shu-dan/"/>
    <updated>2014-08-01T23:35:10+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/08/01/ba-yue-shu-dan</id>
    <content type="html"><![CDATA[<p>記錄八月要看完的書單。</p>

<!-- more -->


<ol>
<li>Bandit Algorithms for Website Optimization</li>
<li>夢斷代碼</li>
<li>Mastering.Search.Analytics：Measuring.SEO.SEM.and.Site.Search</li>
<li>Python for Data Analysis</li>
<li>深入php 面向对象、模式与实践</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 持續集成]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/31/php-chi-xu-ji-cheng/"/>
    <updated>2014-07-31T23:49:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/31/php-chi-xu-ji-cheng</id>
    <content type="html"><![CDATA[<p>記錄建立持續集成環境。</p>

<!-- more -->


<p>之前在工作上有使用 jenkins 搭建持續集成的環境，但是公司沒有導入，現在換用 PHPCI 自行建立一個，
並且使用在正在開發的專案上，從 PHPCI 官網上有比較跟其他同類型的軟體的差異，不過還是等到實際使用後
才能知道，之後也會在 node.js 上面搭建類似的環境。</p>

<ol>
<li><a href="http://www.slideshare.net/baterme/java-2013-java-developerday">java-2013-java-developerday</a></li>
<li><a href="http://book.douban.com/subject/2580604/">持续集成</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi-armed Bandit Problem]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/30/multi-armed-bandit-problem/"/>
    <updated>2014-07-30T22:55:48+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/30/multi-armed-bandit-problem</id>
    <content type="html"><![CDATA[<p>吃角子老虎機問題。</p>

<!-- more -->


<p>在研究 UCT 演算法時有題到 UCB 這個東西，是為了解決<a href="http://en.wikipedia.org/wiki/Multi-armed_bandit">Multi-armed_bandit</a>類型的問題，要能在多個吃角子老虎機上找出最大收益
，而為了解決這個問題的其中一個演算法就是 UCB 演算法，不過令我注意的是這本書 <code>Bandit Algorithms for Website Optimization</code>這本書，
仔細研究發現這類型的問題也能夠用來優化網站，可以列進下個月的書單了。</p>

<p><a href="https://github.com/johnmyleswhite/BanditsBook">BanditsBook</a> 為 <code>Bandit Algorithms for Website Optimization</code>的範例程式碼。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[圍棋的UCT演算法]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/29/wei-qi-de-uctyan-suan-fa/"/>
    <updated>2014-07-29T23:03:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/29/wei-qi-de-uctyan-suan-fa</id>
    <content type="html"><![CDATA[<p>在搜尋關於使用統計方法處理自然語言的時候意外看到的東西。</p>

<!-- more -->


<p>以前在大學在上關於人工智慧的課程有提到比起象棋、西洋棋，製作圍棋的人工智慧更困難，
由於可能下的步數太多了導致複雜度比起上述的棋類遊戲還難製作。</p>

<p>到了現在意外看到了UCT演算法，似乎是基於蒙地卡羅法的樹狀搜尋演算法，詳細內容可以參照
<a href="http://en.wikipedia.org/wiki/Monte-Carlo_tree_search">Monte-Carlo_tree_search</a>或是<a href="http://www.game.csie.ndhu.edu.tw/gamewiki/index.php/Monte_Carlo_Tree_Search">Monte_Carlo_Tree_Search</a>，看起來主要是用了Upper Confidence Bounds (UCB)，如果要真正理解就要需要實作一次了。</p>

<p>附註 UCB 演算法 Multi-armed Bandit，   Bandit Algorithms for Website Optimization</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[語義消歧]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/28/yu-yi-xiao-qi/"/>
    <updated>2014-07-28T23:32:04+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/28/yu-yi-xiao-qi</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li>WSD （Word Sense Disambiguation）</li>
<li>基於語料庫的消歧 (監督學習)</li>
<li>基於詞典的消歧</li>
<li>無監督消歧</li>
<li>POS  (Part-of-speech tagging)</li>
</ol>


<p>語義代表一個詞所擁有的不同的意義，一個詞會因為上下文的關係而有不同的意義，
也因此在做翻譯的時候會有混淆，不過目前我知道用來實作機器翻譯是用大量的統計
資料譬如 google的 Ngram 所形成的統計模型。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KL距離]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/27/klju-li/"/>
    <updated>2014-07-27T23:08:27+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/27/klju-li</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在看<code>統計自然語言基礎</code>這本書看到的，又稱為相對熵，裡面有提到一種語言熵越大
代表能傳輸的訊息量越大，也會讓語言處理起來更困難，因為熵越大代表不確定性越大
更難預測。</p>

<p>下面幾個關鍵字要找時間重新看看，之前在大學上通訊原理跟信號處理有提到香農定理跟信噪比
之類的東西，當時是用來驗證某個編碼是否可以用來作為訊息傳輸用，沒有想到會在自然語言處理
的部分在遇到。</p>

<ol>
<li>信息論</li>
<li>噪音信道模型</li>
<li>熵</li>
<li>混亂度</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problem Frames]]></title>
    <link href="http://fubuki.github.io/blog/2014/07/26/problem-frames/"/>
    <updated>2014-07-26T23:46:59+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/07/26/problem-frames</id>
    <content type="html"><![CDATA[<p>Design pattern 設計模式最有名是由GOF提出來的， 其實主要是整理軟體開發上一些問題的解法，
之前以深入淺出設計模式為人門開始看的，但是看到最後卻只有一知半解，後來看到某個BLOG提到的
<code>Problem Frames</code> 才恍然大悟，我並不真正了解這個設計模式能夠解決什麼類型的問題，導致如果
遇到開發上的困難時無法好好利用設計模式解決問題。</p>

<p>之後需要看一下<a href="http://www.amazon.com/Problem-Frames-Analysing-Structuring-Development/dp/020159627X/ref=pd_sim_b_1?ie=UTF8&amp;refRID=1C3RGNNSA0J2RF13K5XJ">Problem Frames</a>然後在回去重看關於設計模式的書單。</p>
]]></content>
  </entry>
  
</feed>

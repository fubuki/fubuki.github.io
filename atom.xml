<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-04-14T22:37:18+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nginx SSL 的相關設定]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/14/nginx-ssl/"/>
    <updated>2015-04-14T03:23:27+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/14/nginx-ssl</id>
    <content type="html"><![CDATA[<!-- more -->


<p>紀錄從 Nginx 看到跟 SSL 相關的設定和概念，提高 Nginx 本身透過 SSL 通訊的安全性。</p>

<p>之前在看同事設定 Apache SSL 功能時只有看到密鑰的檔案並沒有另外多加設定，後來自己在設定 nginx 的 SSL 功能時發現還有
其它需要設定的選項: <code>ssl_protocols</code> 和 <code>ssl_ciphers</code>。</p>

<h4>ssl_protocols</h4>

<p>這個設定主要是為了避免伺服器使用有問題的加密協定，目前加密協定主要有 SSL 和 TLS，SSL 本身安全性已經有問題，所以建議使用 TLS，
之前有看到一些瀏覽器廠商將 SSL 3.0 拿掉就是為了安全性問題。</p>

<h3>ssl_ciphers</h3>

<p>這個是用來設定 SSL 通訊所使用的加密演算法，設定內容可以參考下面的工具和網站。</p>

<ol>
<li><a href="https://cipherli.st/">Cipherli.st Strong Ciphers for Apache, nginx and Lighttpd</a></li>
<li><a href="https://github.com/jvehent/cipherscan">cipherscan</a></li>
</ol>


<p>另外網路上有個檢測工具可以看看你自己的網站在 SSL 加密上獲得多少分數 <a href="https://www.ssllabs.com/ssltest/index.html">Qualys Labs</a>。</p>

<h4>參考</h4>

<ol>
<li><a href="http://qiita.com/kuni-nakaji/items/5118b23bf2ea44fed96e">httpsだからというだけで安全？調べたら怖くなってきたSSLの話!？</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php Date 時間處理筆記]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/13/php-date/"/>
    <updated>2015-04-13T00:53:29+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/13/php-date</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>取得目前的日期</h3>

<pre><code>$now = DateTime():
$now-&gt;format('r');

$now1 = getdate();
print "{$now1['hours']}:{$now1['minutes']}:{$now1['seconds']}\n";


$now2 = localtime();
print "$now2[2]:$now2[1]:$now2[0]";
</code></pre>

<h3>取得當月的第一天</h3>

<pre><code>$start = date("Y-m-1"); 
$date = new DateTime($start);
</code></pre>

<h3>往前推1個月</h3>

<pre><code>$result = $date-&gt;modify( '-1 month' );
</code></pre>

<h3>當月的最後一天</h3>

<pre><code>$result = $date-&gt;modify( '+2 month' );
$result = $date-&gt;modify( '-1 day' );
</code></pre>

<h3>取得一段時間範圍</h3>

<pre><code>DateInterval();
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erdős–Rényi Model and Random Graph]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/12/random-graph/"/>
    <updated>2015-04-12T22:38:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/12/random-graph</id>
    <content type="html"><![CDATA[<!-- more -->


<p>使用 <a href="http://en.wikipedia.org/wiki/Erd%C5%91s%E2%80%93R%C3%A9nyi_model">Erdős–Rényi Model</a> 產生 <a href="http://en.wikipedia.org/wiki/Random_graph">Random graph</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVLinux : 影音處理用的 Linux 發行版本]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/11/av-linux/"/>
    <updated>2015-04-11T23:44:57+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/11/av-linux</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://www.bandshed.net/AVLinux.html">AVLinux</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Filter-branch]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/10/filter-branch-git/"/>
    <updated>2015-04-10T23:06:20+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/10/filter-branch-git</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>git filter-branch‵ 能夠改寫整個專案的歷史，會用到這個是因為以前有人在專案裡面將很多
二進位檔案加入追蹤導致專案過於肥大，另外裡面有些檔案帶有敏感資訊所以必須連 commit 裡面的
訊息全部去除，這時就用到</code>git filter-branch‵ 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fuzzy Hashing and Ssdeep]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/09/fuzzy-hashing/"/>
    <updated>2015-04-09T22:03:11+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/09/fuzzy-hashing</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在研究 webshell 的時候，有提到關於如何偵測 webshell 的方法，其中有介紹一種叫 <code>Fuzzy Hashing</code>
的演算法，一般像 md5 的 hash 方法只要文件有一些變化計算出來的數值就有很大的改變，這樣不利於檢查兩
份文件的相似度，所以才有 <code>Fuzzy Hashing</code>。</p>

<p>而 ssdeep 則是實現 <code>Fuzzy Hashing</code> 的程式，所以可以直接拿來測試手上的加殼程式，來看看效果如何。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Web Conf 2014]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/08/modernwebconf-2014/"/>
    <updated>2015-04-08T23:25:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/08/modernwebconf-2014</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://modernwebconf.com/index.html">modern web conf 2014</a> 裡面有一些值得一看的 slide。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis 3.0 正式版本釋出]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/07/redis-3-dot-0/"/>
    <updated>2015-04-07T23:05:31+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/07/redis-3-dot-0</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Redis 3.0 正式版本已經釋出，可以測試 cluster 功能和 Redis 本身的性能 。</p>

<p><a href="https://raw.githubusercontent.com/antirez/redis/3.0/00-RELEASENOTES">Redis 3.0 release notes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSQ: Message Server]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/06/nsq/"/>
    <updated>2015-04-06T22:33:54+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/06/nsq</id>
    <content type="html"><![CDATA[<!-- more -->


<p>紀錄之前看過的一篇 slide <a href="http://www.slideshare.net/guregu/nsqcentric-architecture-gocon-autumn-2014">NSQ-Centric Architecture (GoCon Autumn 2014)</a> ，後端是用 <a href="https://github.com/bitly/nsq">nsq</a> 這個由 golang 撰寫
的 <code>message server</code> ，前端使用 react 這個 framework 建立一個聊天 APP</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP : Pthreads Library]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/05/pthreads/"/>
    <updated>2015-04-05T21:28:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/05/pthreads</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li><a href="https://computing.llnl.gov/tutorials/pthreads/">pthreads</a></li>
<li><a href="https://github.com/krakjoe/pthreads">php pthreads</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TLS 的效能跟問題]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/04/tls-problem/"/>
    <updated>2015-04-04T23:17:38+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/04/tls-problem</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://istlsfastyet.com/">TLS has exactly one performance problem: it is not used widely enough</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook 怎麼擴展 Memcached]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/03/scaling-memcache-at-facebook/"/>
    <updated>2015-04-03T23:01:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/03/scaling-memcache-at-facebook</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://www.usenix.org/conference/nsdi13/technical-sessions/presentation/nishtala">Scaling Memcache at Facebook</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phalcon 設定讀寫分離功能]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/02/phalcon-master-slave/"/>
    <updated>2015-04-02T23:29:18+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/02/phalcon-master-slave</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近需要建立 phalcon 連結 mysql 的專案，然後手上有一個 mysql cluster 的設備，所以
想要在 phalcon 設定讀寫分離的功能，讀跟寫是連接不同的資料庫位置，最後在 phalcon 的文檔
<a href="https://phalcon-php-framework-documentation.readthedocs.org/en/latest/reference/models.html?highlight=selectReadConnection#setting-multiple-databases">setting-multiple-databases</a> 有說明怎麼設定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OOCSS 相關資料]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/01/our-best-practices-are-killing-us/"/>
    <updated>2015-04-01T23:35:28+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/01/our-best-practices-are-killing-us</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li><a href="https://github.com/stubbornella/oocss/wiki">oocss</a></li>
<li><a href="http://www.slideshare.net/stubbornella/our-best-practices-are-killing-us">Our Best Practices Are Killing Us</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[四月書單]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/31/2015-04-book-list/"/>
    <updated>2015-03-31T22:05:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/31/2015-04-book-list</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li>Redis 設計與實現</li>
<li>Think Complexity</li>
<li>beautiful code</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Radix Tree]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/30/radix-tree/"/>
    <updated>2015-03-30T22:03:10+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/30/radix-tree</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在看 nginx 和紅黑樹時看到一種名叫 <code>radix tree</code> 的多元搜尋樹，後來了解到在 linux 使用 <code>radix tree</code> 管理 cache，
linux 裡面相關的程式碼在 <a href="https://github.com/torvalds/linux/blob/master/lib/radix-tree.c">radix-tree.c</a> 裡面。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached-tool]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/29/memcached-tool/"/>
    <updated>2015-03-29T23:19:35+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/29/memcached-tool</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://github.com/memcached/memcached/blob/master/scripts/memcached-tool">memcached-tool</a> 使用 perl 寫成的腳本，用來分析 memcachde 的運行狀況。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached 的 Lru_crawler]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/28/memcached-lru/"/>
    <updated>2015-03-28T22:02:57+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/28/memcached-lru</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在看 <code>memcached</code> 的原始碼看到一個  <code>lru_crawler</code> 的東西，這個東西是為了清除過期的資料存在的，但是一般是不會啟動這個功能，
會有這東西是因為 <code>memcached</code> 的資料在過期的時候不會立即清除，因此記憶體空間不會立即釋放，但是可以透過 <code>lru_crawler</code> 去遍歷 item
然後清除過期的 item。</p>

<p>另外 <code>memcached</code> 的官網有個有去的訊息 <a href="https://github.com/memcached/memcached/pull/97">Work In Progress LRU rework</a>，是替換關於 LRU 的部分目前在測試中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MADV_DONTNEED 和 MADV_FREE]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/27/madv-dontneed-madv-free/"/>
    <updated>2015-03-27T03:05:32+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/27/madv-dontneed-madv-free</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在看 firefox 記憶體管理的程式碼時看到下面兩個名詞。</p>

<ol>
<li>MADV_DONTNEED 會馬上回收指定的記憶體區塊</li>
<li>MADV_FREE kernel 會延遲回收那些頁面</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convolutional Neural Network]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/26/convolutional-neural-network/"/>
    <updated>2015-03-26T23:09:25+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/26/convolutional-neural-network</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://en.wikipedia.org/wiki/Convolutional_neural_network">Convolutional neural network</a> 為 Deep Learngin 演算法，最近在做圖像處理的時候用到。</p>
]]></content>
  </entry>
  
</feed>

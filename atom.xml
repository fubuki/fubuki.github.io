<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-01-22T23:48:02+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Barabási–Albert Model]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/22/barabasi-albert-model/"/>
    <updated>2015-01-22T23:44:55+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/22/barabasi-albert-model</id>
    <content type="html"><![CDATA[<!-- more -->


<p>複雜網路理論</p>

<p><a href="http://en.wikipedia.org/wiki/Barab%C3%A1si%E2%80%93Albert_model">Barabási–Albert model</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[討厭 PHP 的原因]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/21/do-a-large-majority-of-people-hate-php-solely-because-other-people-do-so/"/>
    <updated>2015-01-21T22:39:09+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/21/do-a-large-majority-of-people-hate-php-solely-because-other-people-do-so</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://www.quora.com/Do-a-large-majority-of-people-hate-PHP-solely-because-other-people-do-so">Do a large majority of people hate PHP solely because other people do so</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小世界理論]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/20/small-world-network/"/>
    <updated>2015-01-20T23:46:05+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/20/small-world-network</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://en.wikipedia.org/wiki/Small-world_network">Small-world network</a></p>

<p>冪定律</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Performance Patterns]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/19/android-performance-patterns/"/>
    <updated>2015-01-19T23:20:54+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/19/android-performance-patterns</id>
    <content type="html"><![CDATA[<!-- more -->


<p>一系列關於 Android 性能的影片: <a href="https://www.youtube.com/playlist?list=PLOU2XLYxmsIKEOXh5TwZEv89aofHzNCiu">Android Performance Patterns</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HITS Algorithm]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/18/hits-algorithm/"/>
    <updated>2015-01-18T22:16:05+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/18/hits-algorithm</id>
    <content type="html"><![CDATA[<!-- more -->


<p>HITS(Hyperlink lnduccd Topic Search)算法根據 URL 的演算法，跟 Page Rank 不同的地方是 HITS 針對已搜尋出來了的結果
進行排序，所以會每次的查詢都會計算一次結果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Taskset 指令]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/17/linux-taskset/"/>
    <updated>2015-01-17T23:20:43+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/17/linux-taskset</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Linux 有個 taskset 指令可以在多核環境下指定特定的 Process 在某個 CPU 下運行，這個指令是看到有人用在 node.js 腳本上，
由於 node.js 本身如果沒有特別處理是無法發揮多核的效能，所以建立多個 node.js Process 然後個別指定每個 CPU 上面，這樣
就可以將使用到多核的效能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LMAX Architecture]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/16/lmax-architecture/"/>
    <updated>2015-01-16T22:37:48+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/16/lmax-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://martinfowler.com/articles/lmax.html">The LMAX Architecture</a> 一個高吞吐量的金融交易平台，是由 LMAX Exchange 基於 JVM 所建立的架構，文章裡面提到一些他們如何做到每秒六百萬訂單的
方法，另外這邊有 <a href="http://www.infoq.com/presentations/LMAX">LMAX - How to Do 100K TPS at Less than 1ms Latency</a> 文章作者的演講。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sql Join 的類型]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/15/sql-join/"/>
    <updated>2015-01-15T22:51:10+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/15/sql-join</id>
    <content type="html"><![CDATA[<!-- more -->


<p>今天看到一篇關於介紹 sql join 的文章 <a href="http://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins">Visual Representation of SQL Joins</a>，裡面把所有的 join 形式解說一遍，並且
有程式碼和圖片搭配，看完就可以了解怎麼使用 sql 的 join 語法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 掛載 Samba 目錄的方法]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/14/linux-mount-samba/"/>
    <updated>2015-01-14T23:19:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/14/linux-mount-samba</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近幫人建立一個根據正式機的鏡像系統，需要掛載在多台主機掛載相同的目錄，所以紀錄一下掛載的方法，
以前有用 <code>smbfs</code> 掛載但是比較新的版本似乎只能用 <code>cifs</code>。</p>

<pre><code>mount -t cifs -o username="root",password="toor" //host ip/srv /srv
umount /srv
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Single User Mode 修改 Linux 密碼]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/13/linux-single-user-mode/"/>
    <updated>2015-01-13T22:19:55+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/13/linux-single-user-mode</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在管理虛擬機的時候有些機器以前人部署的，所以完全無法得知登入密碼，後來透過網路得知 Linux 有個
 <code>Single User Mode</code> 可以讓使用者這個模式不用密碼登入主機，然後就可以透過 <code>passwd</code> 更改密碼。</p>

<p> 要進入 <code>Single User Mode</code> 是要在開機時在 Grub 選單在開機的指令後面加上 single 參數，然後 ctrl + x 開機
 就會進入 <code>Single User Mode</code> ，但是在我的 ubuntu 14.04 LTS 上面測試卻行不通，會顯示 <code>give root password for maintenance single</code>
 這串訊息，這時就要用另外一種方法。</p>

<p> 如果使用 single 參數行不通就換成 <code>rw init=/bin/bash</code>， 然後按下 ctrl + x 開機就會直接進去主機，之後使用 passwd 更改密碼即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 安裝 Zsh]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/12/linux-zsh/"/>
    <updated>2015-01-12T23:26:31+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/12/linux-zsh</id>
    <content type="html"><![CDATA[<!-- more -->


<p>安裝 zsh</p>

<pre><code>apt-get install zsh
</code></pre>

<p>安裝 <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a></p>

<pre><code>wget --no-check-certificate http://install.ohmyz.sh -O - | bash
</code></pre>

<p>重啟後就可以看到效果了，但是有些安裝的命令卻無法使用還需要測試。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 VM 上面安裝 GNURadio]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/11/gnuradio/"/>
    <updated>2015-01-11T20:09:42+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/11/gnuradio</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近開始玩起 SDR 接收無線電訊號，於是另外安裝安裝 <a href="http://gnuradio.microembedded.com/">GNU Radio</a> 用來處理無線電訊號，一開始
是使用安裝好的 Live cd 測試能否接收到訊號，測試沒問題後就透過 <a href="http://gnuradio.org/redmine/projects/gnuradio/wiki/UbuntuInstall">UbuntuInstall</a> 這篇教學自行安裝。</p>

<p><a href="http://gnuradio.microembedded.com/">GNU Radio</a> 可以透過圖形直接對接收到的訊號進行處理，也可以透過 Python 撰寫程式碼，不過需要先去
複習大學的數位訊號處理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C 語言的巨集]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/10/define-multi-line/"/>
    <updated>2015-01-10T22:43:00+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/10/define-multi-line</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在研究 Phalcon 的語法時看到下面這種定義巨集的程式碼，跟以前直接用大括號寫成 Function 的方式不一樣，
後來在別人的網誌看到這兩種的差別，直接使用 Function 的區塊寫法如果沒有注意寫法在預編譯的時候展開可能導致錯誤。</p>

<pre><code>/** Get the current hash key without copying the hash key */
#define PHALCON_GET_HKEY(var, hash, hash_position) \
    do { \
        PHALCON_INIT_NVAR_PNULL(var); \
        phalcon_get_current_key(&amp;var, hash, &amp;hash_position TSRMLS_CC); \
    } while (0)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Information Foraging]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/09/information-foraging-theory/"/>
    <updated>2015-01-09T23:08:32+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/09/information-foraging-theory</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在 <code>設計搜索體驗：搜索的藝術與科學</code> 這本書的 <code>Information Seeking</code> 的章節看到這個名詞 <code>Information Foraging</code>，
網路上看到有人翻譯成信息覓食理論，是把人搜尋情報視為一種覓食行為，藉此研究使用者是怎麼從一個網頁轉移到到下一個網頁。</p>

<p>另外書中有提到理論生態學的東西，說明 <code>Information Foraging</code> 源自於生態學裡面的覓食理論，相關的有 Optimal foraging theory，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Strace 跟蹤進程]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/08/strace-nginx/"/>
    <updated>2015-01-08T23:28:43+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/08/strace-nginx</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前使用 lighttpd + web.py 架設環境時不知道什麼原因跑不起來，但是 log 裡面沒有顯示可用的訊息除錯，
後來學到使用 <code>strace</code> 追蹤 lighttpd 的運行過程，查到是有模組沒有安裝造成的。</p>

<p>直接運行</p>

<pre><code>strace -ff lighttpd -D -f /etc/lighttpd/lighttpd.conf
</code></pre>

<p>透過 pid 跟蹤</p>

<p>透過 port 跟蹤</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx-systemtap-toolkit]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/07/nginx-systemtap-toolkit/"/>
    <updated>2015-01-07T21:52:05+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/07/nginx-systemtap-toolkit</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前有學到使用 <code>systemtap</code> 跟蹤內核的行為，這樣用來了解程式的行為十分有幫助，而今天看到了一個使用
<code>systemtap</code> 測試分析 nginx 的工具 : <a href="https://github.com/openresty/nginx-systemtap-toolkit">nginx-systemtap-toolkit</a>， 這個工具可以用來查看 nginx 內部各個
區塊實際執行的情形，在他的網頁有很多命令可以使用，如果遇到 strace 還不能解決的情形可以透過的工具查詢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Undefined Behavior and Sequence Points]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/06/undefined-behavior-and-sequence-points/"/>
    <updated>2015-01-06T23:27:19+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/06/undefined-behavior-and-sequence-points</id>
    <content type="html"><![CDATA[<!-- more -->


<p>今天在看編譯原理的書時看到了 <a href="http://stackoverflow.com/questions/4176328/undefined-behavior-and-sequence-points">Undefined Behavior and Sequence Points</a> ，這兩個跟編譯器實作有關，通常在寫程式的時候應該是不會寫出有 <code>Undefined Behavior</code> 的片段，而 <code>Sequence Points</code> 跟 <code>side affetct</code> 比較有關。</p>

<p><code>Undefined Behavior</code> 簡單說是有些程式碼由於在標準( ex: C++11)裡面沒有定義會輸出怎樣的結果，所以便會交給 Compiler 的開發者自行
實作，導致這類的程式碼會有不可預期的結果。</p>

<p><code>Sequence Points</code> 是程式執行到某一個點時，前面的 <code>side affetct</code> 已經結束，後面的 <code>side affetct</code> 還沒有開始。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 顯示進程列表]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/05/mysql-show-process/"/>
    <updated>2015-01-05T22:12:57+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/05/mysql-show-process</id>
    <content type="html"><![CDATA[<!-- more -->


<p>檢查目前 mysql 有多少進程，並且可以看出有多少連線，目前有在跑哪些 sql 和執行了多久，
有時網站變慢可以從列表中觀察是哪些 sql 拖慢系統的速度，另外也可以透過 kill 直接殺掉進程。</p>

<pre><code>show processlist;
show full processlist;
kill
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opencv 加上 Intel IPP TBB 支援]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/04/intel-ip-tbb-opencv/"/>
    <updated>2015-01-04T22:17:05+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/04/intel-ip-tbb-opencv</id>
    <content type="html"><![CDATA[<!-- more -->


<p>參照 <a href="https://software.intel.com/en-us/articles/opencv-300-beta-ipp-tbb-enabled-on-yocto-with-intel-edison">OpenCV 3.0.0-beta ( IPP &amp; TBB enabled ) on Yocto with Intel® Edison</a> 替手上的 OpenCV 加上多緒支援。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[取得 Android 的原始碼]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/03/android-source/"/>
    <updated>2015-01-03T22:20:12+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/03/android-source</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li><p>安裝 repo</p>

<p> curl <a href="https://storage.googleapis.com/git-repo-downloads/repo">https://storage.googleapis.com/git-repo-downloads/repo</a> > /usr/bin/repo
 chmod  a+x /usr/bin/repo</p></li>
<li><p>建立文件夾下載程式碼</p>

<p> mkdir andorid_source
 cd andorid_source
 repo init -u <a href="https://android.googlesource.com/platform/manifest">https://android.googlesource.com/platform/manifest</a>
 repo sync</p></li>
</ol>


<p>參考 : <a href="https://source.android.com/source/downloading.html">Downloading the Source</a></p>
]]></content>
  </entry>
  
</feed>

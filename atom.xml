<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-06-26T23:29:29+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android 和 iOS在使用推播的不同處]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/25/android-he-ioszai-shi-yong-tui-bo-de-bu-tong-chu/"/>
    <updated>2014-06-25T23:05:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/25/android-he-ioszai-shi-yong-tui-bo-de-bu-tong-chu</id>
    <content type="html"><![CDATA[<p>記錄在使用推播時 Android 和 iOS 兩者不同之處。<br/>
<a href="http://blog.katty.in/4300">iOSとAndroidのプッシュ通知の開発の違いまとめ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached With Namespace]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/24/memcached-with-namespace/"/>
    <updated>2014-06-24T21:23:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/24/memcached-with-namespace</id>
    <content type="html"><![CDATA[<p>memcached如何實作namespace的方法。</p>

<!-- more -->


<p>memcached沒有支援namespace所以沒辦法直接批量刪除鍵值，原本是可以直接拉出在memcached裡面的key然後只
刪除想要刪除的鍵值，但是從取出所有key會很耗費資源所以不會考慮，之後有想過在DataBase的地方存放所有
key然後就可以快速查詢想要批量刪除的鍵值，最後是使用Deleting by Namespace的方法，實作出namespace後
透過namespace批量刪除，實作可以參考<a href="https://code.google.com/p/memcached/wiki/NewProgrammingTricks#Namespacing">NewProgrammingTricks</a>，其實他的主要想法是使用固定的key pattern
實作namespace，在透過管理namespace的版本號讓舊的cache自然失效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 和 HDF5]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/22/python-he-hdf5/"/>
    <updated>2014-06-22T23:41:59+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/22/python-he-hdf5</id>
    <content type="html"><![CDATA[<p>HDF5檔案格式: <a href="http://www.hdfgroup.org/HDF5/">HDF5</a><br/>
HDFS FOR Python : <a href="http://www.hdfgroup.org/HDF5/">HDF5</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL災難恢复]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/22/mysql-zai-nan-hui-fu/"/>
    <updated>2014-06-22T23:30:34+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/22/mysql-zai-nan-hui-fu</id>
    <content type="html"><![CDATA[<p>MySQL 如何備份和恢復</p>

<!-- more -->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 鎖的機制]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/21/mysql-suo-de-ji-zhi/"/>
    <updated>2014-06-21T22:37:52+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/21/mysql-suo-de-ji-zhi</id>
    <content type="html"><![CDATA[<p>記錄並分析各種鎖。</p>

<!-- more -->


<h2>lock 和 latch</h2>

<h2>鎖的種類</h2>

<h2>鎖有可能造成的問題</h2>

<h2>阻塞的問題</h2>

<h2>dead lock</h2>

<h2>Lock Escalation</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Upstream 反向代理的機制]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/19/nginx-upstream-fan-xiang-dai-de-ji-zhi/"/>
    <updated>2014-06-19T22:21:25+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/19/nginx-upstream-fan-xiang-dai-de-ji-zhi</id>
    <content type="html"><![CDATA[<p>如何設定nginx 反向代理的功能。</p>

<!-- more -->


<h2>upstream 建立流程與機制</h2>

<ol>
<li>啟動upstream</li>
<li>與上游伺服器建立連結</li>
<li>發送請求給上游伺服器</li>
<li>接收上游伺服器的響應頭部</li>
<li>轉發跟不轉發響應</li>
<li>結束upstream的請求</li>
</ol>


<h2>與upstream相關的原始碼</h2>

<ol>
<li>ngx_http_upstream_init</li>
<li>ngx_http_upstream_init_request</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached 1MB Limit]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/18/memcached-1mb-limit/"/>
    <updated>2014-06-18T23:06:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/18/memcached-1mb-limit</id>
    <content type="html"><![CDATA[<p>memcached在儲存單筆記錄的時候會有個限制，每筆記錄只能存放最大1MB的大小，以前沒有遇過這種問題，但是在最近一個
專案上面突然遇到快取沒有作用的問題，後來發現有可能是存放的資料大於1MB的問題，在<a href="http://docs.oracle.com/cd/E17952_01/refman-5.6-en/ha-memcached-faq.html">ha-memcached-faq</a>裡面有說為什麼
預設1MB和如何調整大小。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Conf 設定]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/18/nginx-conf-she-ding/"/>
    <updated>2014-06-18T22:56:40+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/18/nginx-conf-she-ding</id>
    <content type="html"><![CDATA[<p>記錄關於nginx 設定檔的配置。</p>

<!-- more -->


<h2>分類</h2>

<ol>
<li>debug</li>
<li>優化</li>
<li>運行必備</li>
<li>事件類型</li>
</ol>


<h2>debug用</h2>

<ol>
<li>deamon</li>
<li>master_process</li>
<li>error_log</li>
<li>debug_points</li>
<li>debug_connection</li>
<li>worker_rlimit_core</li>
<li>working_directory</li>
</ol>


<h2>優化</h2>

<ol>
<li>worker_processes</li>
<li>worker_cpu_affinity</li>
<li>ssl_engine</li>
<li>timer_resolution</li>
<li>worker_priority</li>
</ol>


<h2>運行必備</h2>

<ol>
<li>env 環境變數</li>
<li>include</li>
<li>pid file</li>
<li>user</li>
<li>worker_rlimit_nofile</li>
</ol>


<h2>事件類型</h2>

<ol>
<li>accept_mutex</li>
<li>lock_file</li>
<li>accept_mutex_dely</li>
<li>multi_accept</li>
<li>use epoll</li>
<li>worker_connections</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 SSE]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/17/html5-sse/"/>
    <updated>2014-06-17T21:40:47+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/17/html5-sse</id>
    <content type="html"><![CDATA[<p>SSE全名為 Server-Sent Events 屬於HTML5的API， 讓Server端可以更新Client端的資料，看起來跟websocket很像，
不過SSE是單向的，只能讓Server透過SSE傳輸資料給Client而websocket則是可以雙向的，不過如果只需要由Server
即時更新資料給Client的應用例如顯示新聞或是股市的資料應該蠻適合的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Telegram 新興的通訊軟體]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/16/xin-xing-de-tong-xun-ruan-ti/"/>
    <updated>2014-06-16T23:08:39+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/16/xin-xing-de-tong-xun-ruan-ti</id>
    <content type="html"><![CDATA[<p>最近在研究firefox os 的時候看到了<a href="https://telegram.org/">Telegram</a> 這款通訊軟體，他將API和通訊協定開源出來讓使用者可以建構自己的Client端，
到目前有看到有好幾種平台的專案，在<a href="https://telegram.org/">Telegram</a>的官網可以看到不少特點，其中比較讓我看到興趣的安全性的特性，可以透過研究
<a href="https://github.com/zhukov/webogram">webogram</a>來作為手上專案的參考範例。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 分區表]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/15/mysql-fen-qu-biao/"/>
    <updated>2014-06-15T23:49:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/15/mysql-fen-qu-biao</id>
    <content type="html"><![CDATA[<p>記錄一下在MySQL下 分區表的種類和用法。</p>

<!-- more -->


<h2>種類</h2>

<ol>
<li>RANGE分區</li>
<li>LIST分區</li>
<li>HASH分區</li>
<li>KEY分區</li>
<li>COLUMNS分區</li>
</ol>


<h2>用法</h2>

<ol>
<li>子分區</li>
<li>根據日期作RANGE分區優化查詢速度</li>
<li>LIST分區用於不連續離散的數值</li>
<li>HASH和KEY用來均勻的分配數據到各個分區</li>
<li>COLUMNS用在非整數類型的數值欄位</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox Os App Development]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/14/firefox-os-app-development/"/>
    <updated>2014-06-14T23:12:13+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/14/firefox-os-app-development</id>
    <content type="html"><![CDATA[<ol>
<li><a href="https://github.com/soapdog/firefoxos-quick-guide">firefoxos-quick-guide</a></li>
<li><a href="http://www.slideshare.net/benko/how-to-start-developing-apps-for-firefox-os">how-to-start-developing-apps-for-firefox-os</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/Firefox_OS/Screencast_series:_App_Basics_for_Firefox_OS">App_Basics_for_Firefox_OS</a></li>
<li><a href="http://buildingfirefoxos.com/">buildingfirefoxos</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 參數文件和日誌]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/12/mysql-can-shu-wen-jian-he-ri-zhi/"/>
    <updated>2014-06-12T23:41:39+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/12/mysql-can-shu-wen-jian-he-ri-zhi</id>
    <content type="html"><![CDATA[<h2>日誌</h2>

<ol>
<li>錯誤日誌</li>
<li>慢查詢日誌</li>
<li>查詢日誌</li>
<li>二進位日誌</li>
</ol>


<h2>文件</h2>

<ol>
<li>表結構定義文件</li>
<li>InnoDB儲存引擎文件</li>
<li>參數文件</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mosquitto Bridge Conf]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/10/mosquitto-bridge-conf/"/>
    <updated>2014-06-10T22:04:53+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/10/mosquitto-bridge-conf</id>
    <content type="html"><![CDATA[<p>記錄一下 mosquitto bridge config的部分</p>

<!-- more -->


<p>cleansession</p>

<p>當網路斷線的時候要不要清掉remote broker的連線資訊和訊息，預設是 false，但是不論是true 或是 false在某些情形下都會有問題。</p>

<p>round_robin
如果有多個bridge server 當第一個server當掉就會跳第二個server，然後會有兩種情形，會不會一直去測試第一個server能不能
連接，或是直到當第二個server當掉才會去連接第一個server。</p>

<p>start_type [ automatic | lazy | once ]</p>

<p>automatic 會自動連接上bridge server。</p>

<p>lazy 當收到的訊息超過一個門檻才會連接bridge server 當經過一個idle timeout 會斷開連結，這是為了在
使用者只希望有需要發送訊息的時候才會連接 server</p>

<p>once 會自動連接bridge server但是如果連接失敗就不會重連接。</p>

<p>threshold count
給start_type lazy使用，當收到多少訊息才會重開(從上面來看應該是連接bridge server才對)</p>

<p>topic pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]</p>

<p>topic # both 2 local/topic/ remote/topic/</p>

<p>有哪些 topic會被分享給其他broker，並且可以重新對應topic的部分。</p>

<p>try_private [ true | false ]</p>

<p>設定這個server是一個bridge或是一個普通的客戶端，如果是這個sever是一個bridge會有loop detection，
因此會消耗一些效能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Mqtt Server]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/08/scaling-mqtt-server/"/>
    <updated>2014-06-08T23:59:01+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/08/scaling-mqtt-server</id>
    <content type="html"><![CDATA[<p>目前測試過幾套mqtt broker，記錄一下使用過的心得和擴展方案。</p>

<!-- more -->


<p>目前用過以下幾種broker:<br/>
1. <a href="https://github.com/mcollina/mosca">mosca</a><br/>
2. <a href="http://www.rabbitmq.com/">rabbitmq</a><br/>
3. <a href="http://mosquitto.org/">mosquitto</a></p>

<h2>mosca</h2>

<p>使用node.js寫成的broker，負責pubsub和持久化的部分可以由使用者自行自訂，程式碼也不會太過於龐大，原本
要使用這個當mqtt server在擴展上可以透過共用pubsub和持久化的部分擴展，不過在處理offline message上有問題就放棄了。</p>

<h2>rabbitmq</h2>

<p>使用erlang寫成的broker，rabbitmq透過plugin的方式支援mqtt協定，支援到mqtt 3.1，rabbitmq原本就支援
cluster的架構，並且session可以互相共享，讓rabbitmq在懭展的同時也能處理offline message的問題。</p>

<h2>mosquitto</h2>

<p>使用C語言寫成的，原本是利用mosquitto的bridge架構擴展server，不過在測試offline message的時候沒有辦法
處理session的問題，server之間沒有共享session，但是如果能夠自行處理offline message的問題 mosquitto
也是個不錯的選擇。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook Login JavaScript SDK 在 Webview下的問題]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/06/facebook-login-javascript-sdk-zai-webviewxia-de-wen-ti/"/>
    <updated>2014-06-06T22:31:54+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/06/facebook-login-javascript-sdk-zai-webviewxia-de-wen-ti</id>
    <content type="html"><![CDATA[<p>在android或是ios底下使用Facebook 的JavaScript SDK通常是透過webview之類的實作，但是在需要登入Facebook的時候
，雖然會導向登入頁但是卻無法正常導回登入前的頁面，畫面會呈現一片空白，後來發現有可能是因為Facebook是用popout
出一個登入頁使得登入完成後無法正常redirect導原本的頁面才會發生這種情形，網路上有些解法是更改webview部分的程式碼
讓redirect可以正常運作，不過還有另外一個方法是使用javascript直接導向facebook手機板的登入頁在redirect回來便可以
避免登入後會出現空白頁的問題。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gearman 和 Beanstalk]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/05/gearman-he-beanstalk/"/>
    <updated>2014-06-05T23:41:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/05/gearman-he-beanstalk</id>
    <content type="html"><![CDATA[<p>記錄一下之後要研究和測試這兩種消息隊列。</p>

<!-- more -->


<p>目前在工作上是用<a href="https://github.com/kr/beanstalkd">beanstalkd</a>作為消息隊列，由於使用人數少所以也不會有什麼問題，不過在PHP conf上面看到有人提了一個<a href="http://gearman.org/">gearman</a>的消息隊列，
這兩個消息隊列都是用C語言撰寫的，在client library方面都有支援PHP和Node.js，不過似乎<a href="http://gearman.org/">gearman</a>的使用人數比較多的樣子，之後先研究這兩者
的管理工具<a href="https://github.com/ptrofimov/beanstalk_console">beanstalk_console</a>和<a href="https://github.com/gaspaio/gearmanui">gearmanui</a>和擃展性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 內核研究資源]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/02/php-he-yan-jiu-zi-yuan/"/>
    <updated>2014-06-02T23:50:44+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/02/php-he-yan-jiu-zi-yuan</id>
    <content type="html"><![CDATA[<p>深入理解PHP内核 <a href="http://www.php-internals.com/book/">http://www.php-internals.com/book/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[六月書單]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/01/liu-yue-shu-dan/"/>
    <updated>2014-06-01T21:34:16+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/01/liu-yue-shu-dan</id>
    <content type="html"><![CDATA[<p>記錄六月要看完的書單。</p>

<!-- more -->


<ol>
<li>MySQL技術內幕︰InnoDB存儲引擎（第2版）</li>
<li>MySQL技術內幕︰ SQL編程</li>
<li>數學之美</li>
<li>資料之美</li>
<li>Mastering Node.js</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NAVER Line Protocol]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/31/naver-line-protocol/"/>
    <updated>2014-05-31T22:38:23+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/31/naver-line-protocol</id>
    <content type="html"><![CDATA[<p>研究關於Line 的通訊架構。</p>

<!-- more -->


<p>目前可以知道Line 有使用 SPDY ，不過<a href="http://blogs.ixiacom.com/ixia-blog/emulating-the-line-application/">emulating-the-line-application</a>有提到也有使用thrift用來控制訊息的部分，
另外透過<a href="https://github.com/mvirkkunen/purple-line">purple-line</a>這個專案也能稍微了解Line的應用程式與伺服器之間互相通訊的過程，裡面也有一份<a href="http://altrepo.eu/git/line-protocol.git/">line-protocol</a>的
規格表可以做為日後開發類似功能的參考。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-12-15T22:56:11+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在 Apache 安裝上 Wsgi 執行 Django]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/15/apache-wsgi-python/"/>
    <updated>2014-12-15T21:57:18+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/15/apache-wsgi-python</id>
    <content type="html"><![CDATA[<!-- more -->


<p>apache 上面可以藉由安裝 mod_wsgi 執行 python 的程式碼，這邊記錄一下在 Centos 上面的安裝過程。</p>

<p>Apache 和 python 一開始就安裝在機器上面了，然後 django 和 web.py 則是透過 <code>pip</code> 或是 <code>easy_install</code> 安裝,以為很簡單卻卡在安裝 mod_wsgi 上面。</p>

<p>原本是透過 <a href="https://code.google.com/p/modwsgi/">mod_wsgi</a> 的原始碼編譯，但是出現下面的錯誤:</p>

<pre><code>apxs:Error: Command failed with rc=65536
</code></pre>

<p>原因在官網的 <a href="https://code.google.com/p/modwsgi/wiki/InstallationIssues">Installation Issues</a> 有提到是因為 python 和 apache 的版本不合，一個為 32 位元一個為 64 位元就會
出現這種錯誤，只能重新編譯。</p>

<p>後來試著用 <code>yum install mod_wsgi</code> 成功安裝但是在 apache 的 error log 出現 <code>ImportError: No module named web</code> ，
在 web.py 的官網建議加入檔案路徑加入環境變數，不過還是失敗。</p>

<p>最後發現是 python 版本的問題，機器上面安裝兩種 python 的版本 2.6 和 2.7， yum 透過 2.6 編譯 mod_wsgi 與程式使用的
 2.7 不同而導致這個問題，最後下載 python 原始碼重新編譯才行。</p>

<p> 下載 python 的原始碼並且在 configure 加上 &ndash;enable-shared 編譯安裝，安裝後執行 python 遇到下面的錯誤，找不到 lib 的路徑。</p>

<pre><code>python: error while loading shared libraries: libpython2.7.so.1.0: cannot open shared object file: No such file or directory
</code></pre>

<p>使用 ldconfig 指定 lib 位置後重新編譯安裝 mode_wsgi 就建立好環境了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Io.js]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/14/io-dot-js/"/>
    <updated>2014-12-14T22:29:30+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/14/io-dot-js</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近看到一個消息，出了一個 node.js 的分支 <a href="http://iojs.org/">Io.js</a>，是由原本開發的 node.js 的核心成員另外跳出來的作的，
原因是不滿 <a href="https://www.joyent.com/technology/nodejs">joyent</a> 的管理風格。</p>

<p>目前 node.js 的走向偏向將目前的版本穩定，但是這些核心成員更希望能夠聽取社區的聲音增加新的功能而成立了
<a href="http://nodeforward.org/">nodeforward</a> 然後過不久後就放出 <a href="http://iojs.org/">Io.js</a>，在這邊 <a href="http://blog.izs.me/post/104685388058/io-js">What is io.js?</a> 有寫出他們跳出來做的目的跟未來的方向。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[管理 Linux 啟動執行的服務]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/13/linux-start-service/"/>
    <updated>2014-12-13T23:09:26+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/13/linux-start-service</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在 Liinux 使用 <code>update--rc.d</code> 或是 <code>chkconfig</code> 管理開機時要啟動哪些服務，兩者用法是類似的，
另外還有 Ubuntu 底下也有 <code>rcconf</code> 和 <code>sysv-rc-conf</code> 可以使用，不過上面的指令會提到關於執行 level 的概念
決定服務要在哪個時候執行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lighttpd 搭配 Fastcgi 和 Webpy]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/12/lighttpd-fastcgi-web-dot-py/"/>
    <updated>2014-12-12T00:18:20+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/12/lighttpd-fastcgi-web-dot-py</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在研究別人寫的專案看到使用 Lighttpd 跑 Python 的程式碼，透過 Fastcgi 跟 Python 程式碼溝通，
Python 端則是使用 <a href="http://webpy.org">Webpy</a>，環境可以參考 <a href="http://webpy.org/cookbook/fastcgi-lighttpd">Webpy + LightTTPD with FastCGi</a>。</p>

<pre><code>apt-get install lighttpd
vim /etc/lighttpd/lighttpd.conf

fastcgi.server = ( "/app.py" =&gt;
(( "socket" =&gt; "/tmp/fastcgi.socket",
    "bin-path" =&gt; "/var/www/html/app.py",
    "max-procs" =&gt; 1,
    "bin-environment" =&gt; (
    "REAL_SCRIPT_NAME" =&gt; ""
    ),
    "check-local" =&gt; "disable"
))
)

easy_install web.py
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分散式檔案系統]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/11/distributed-filesystem/"/>
    <updated>2014-12-11T22:50:42+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/11/distributed-filesystem</id>
    <content type="html"><![CDATA[<p>紀錄一下目前有看過哪些分散式檔案系統。</p>

<!-- more -->


<p>在以前 Google 內部使用自行開發的 GFS 作為檔案系統，並且將相關論文開放給外界參考後生出了 hadoop 之類的軟體，
而現在有不少生產環境使用了分散式檔案系統，</p>

<ol>
<li>HDFS</li>
<li>LeoFS</li>
<li>MogileFS</li>
<li>ZFS</li>
<li>FastDFS</li>
<li>GlusterFS</li>
<li>GridFS</li>
<li>TFS</li>
</ol>


<h3>HDFS</h3>

<p>hadoop 所使用的檔案系統。</p>

<h3>LeoFS</h3>

<p>以前同事待的公司使用 DFS 系統。</p>

<h3>MogileFS</h3>

<p>KKBOX 內部使用 MogileFS 存放音樂資料。</p>

<h3>ZFS</h3>

<p>由 SUN 所開發檔案系統，一開始是在 Solaris 才有的後來有人移植到各種作業系統上。</p>

<h3>FastDFS</h3>

<h3>GlusterFS</h3>

<p>目前似乎由 Red Hat 維護。</p>

<h3>GridFS</h3>

<p>MongoDB  使用的一種檔案系統。</p>

<h3>TFS</h3>

<p>淘寶開發的檔案系統。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ORA-01461: Can Bind a LONG Value Only for Insert Into a LONG Column]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/10/ora-01461-can-bind-a-long-value-only-for-insert-into-a-long-column/"/>
    <updated>2014-12-10T22:51:27+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/10/ora-01461-can-bind-a-long-value-only-for-insert-into-a-long-column</id>
    <content type="html"><![CDATA[<!-- more -->


<p>今天在工作上遇到了 &ldquo;ORA-01461: can bind a LONG value only for insert into a LONG column&rdquo; 這個錯誤訊息，後來發現是
因為有人在資料庫使用 <code>clob</code> 的關係，似乎是插入的字串超過了 4k 的長度。</p>

<p>之前使用 <code>clob</code> 時應該是支援超過 4k 長度的字串，網路上找了一些大部分都是寫 JDBC 版本的問題，不過我們開發環境是 PHP，
原本以為是 oracle client 版本跟資料庫不一樣導致的問題，不過兩者版本是一致的，後來用 <code>oci_bind_by_name</code> 就可以過去了，
而在 phalcon 底下使用 phql bind param 的方式也能夠執行避免錯誤，似乎問題在於 phalcon 使用 pdo 實現 oracle 的問題，
直接使用 model 賦值是無法成功寫入的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NeuralTalk : 從圖片生成文字描述的工具]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/09/neuraltalk/"/>
    <updated>2014-12-09T02:31:01+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/09/neuraltalk</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://github.com/karpathy/neuraltalk">NeuralTalk</a> 是相當有趣的工具，透過 <code>deep learning</code> 的方法可以將圖片的情境使用文字描述出來，
這邊有不少 <a href="http://cs.stanford.edu/people/karpathy/deepimagesent/">example</a> 可以看到運行的效果，在 Github 上面也放有原始碼可以自行下載測試效果。</p>

<p>裡面使用了下面幾種模型:</p>

<ol>
<li>Vinyals et al. from Google (CNN + LSTM)</li>
<li>Karpathy and Fei-Fei from Stanford (CNN + RNN)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VS2013 搭配 opencv-2.4.10]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/08/opencv-vs2013/"/>
    <updated>2014-12-08T21:35:38+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/08/opencv-vs2013</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在 <code>Visual Studio 2013</code> 下配置 OpenCV 開發環境。</p>

<ol>
<li>下載 OpenCV for Windows 的安裝檔並安裝，安裝檔會在目錄下生成 opencv 的函式庫。</li>
<li>在環境變量裡的 Path 加入 opencv 的 bin 文件夾。</li>
<li>在 <code>Visual Studio 2013</code> 的編譯設定裡加入相關函式庫。</li>
<li>如果是 32 位元的環境就加入 x86， 64 位元就加入 x64 下的檔案</li>
<li><code>VC++ 目錄</code> 的 <code>Include 目錄</code> 加入 opencv 的 include 目錄下的所有檔案，
 在<code>程式庫目錄</code> 下根據編譯環境加入 <code>x86\vc12\lib</code>。</li>
<li>在連接器下輸入的其他相依性加入在 <code>x86\vc12\lib</code> 下 dll 檔案，這根據專案本身用到哪些 opencv 的功能
 ，決定載入哪些 dll 膽案。</li>
<li>撰寫測試用的 opencv 專案測試是否可以執行。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讓 Crontab 執行 30 秒任務]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/07/crontab-second/"/>
    <updated>2014-12-07T10:48:17+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/07/crontab-second</id>
    <content type="html"><![CDATA[<!-- more -->


<p>crontab 是 linux 用來執行定時任務的指令，但是他最多只能指定到分，如果要有設定 30 秒執行的任務就要比較特殊的做法。</p>

<p>使用 sleep 指令延遲 30 秒執行，這樣就可以達成每 30 秒執行任務的功能。</p>

<pre><code>* * * * * ntpdate -s time.stdtime.gov.tw
* * * * * sleep 30 &amp;&amp;  ntpdate -s time.stdtime.gov.tw
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[開發 Firefox 附加元件]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/06/firefox-develop-addon/"/>
    <updated>2014-12-06T23:32:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/06/firefox-develop-addon</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近想要開發一個 firefox 的附加元件擴展原先的書籤功能，所以收集一下官方的開發文件。</p>

<ol>
<li><a href="https://developer.mozilla.org/zh-TW/docs/XPCOM">XPCOM</a> 是用來開發 firefox 附加元件的物件模型。</li>
<li><a href="https://developer.mozilla.org/en-US/Add-ons">Modify and extend Mozilla applications</a></li>
<li><a href="https://blog.mozilla.org/addons/2014/06/05/how-to-develop-firefox-extension/">How to develop a Firefox extension</a></li>
<li><a href="https://wiki.mozilla.org/Jetpack">Jetpack</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas Fingerprinting]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/05/fingerprinting/"/>
    <updated>2014-12-05T21:56:17+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/05/fingerprinting</id>
    <content type="html"><![CDATA[<!-- more -->


<p>以前的網站都是使用 cookie 追蹤使用者所以現在的閱覽器通常會提供私密模式讓網站無法在機器
上寫入 cookie，所以最近看到有網站使用 <a href="http://en.wikipedia.org/wiki/Canvas_fingerprinting">Canvas fingerprinting</a> 的技術追蹤用戶。</p>

<p><a href="http://en.wikipedia.org/wiki/Canvas_fingerprinting">Canvas fingerprinting</a> 的原理是用 html5 的 Canvas 功能繪製圖片產生識別碼，由於每台機器
在繪製圖片的時候所使用繪製引擎和參數不同所以使用產生出的圖片便不會全部相同，在經過 hash
之類的操作得出的編碼就可以用來當作識別用戶的一種方法。</p>

<p>這邊有一篇相關論文可以參考 <a href="http://cseweb.ucsd.edu/~hovav/papers/ms12.html">Pixel Perfect: Fingerprinting Canvas in HTML5</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 兼容方案]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/04/mysql-other-version/"/>
    <updated>2014-12-04T10:45:55+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/04/mysql-other-version</id>
    <content type="html"><![CDATA[<!-- more -->


<p>列出幾個相容於 mysql 的開源方案。</p>

<h3>Percona Mysql</h3>

<p><a href="http://www.percona.com/">Percona</a> 出的版本，目前看到身邊的人大都是使用這家公司出版的 Mysql 建立商業環境，
而且從它的討論區可以學習到不少如何對 Mysql 除錯的訊息。</p>

<h3>MariaDB</h3>

<p><a href="https://mariadb.org/">mariadb</a> 是 Mysql 的生父另外開發的版本，裡面多增加了 TokuDB 這個引擎，目前在國外看到有些人將資料庫從 Mysql 遷移到
MariaDB，是值得期待的產品。</p>

<h3>MySQL/Galera</h3>

<p><a href="http://galeracluster.com/">galeracluster</a> 只有在網路上聽過這個版本，在找跟 Mysql Cluster 方案時看到有人提到，不過身邊的人似乎沒有人在使用這個版本。</p>

<h3>WebScaleSQL</h3>

<p>Google 和 Facebook、LinkedIn、Twitter 共同開發的版本，上述的公司都有處理巨量資料的需求，所以看起來應該會朝向處理巨量資料和
佈署大規獏資料叢集的方向發展，不過我記得 Google 有決定當 MariaDB 成熟後將內部的 Mysql 資料庫遷移到 MariaDB，所以 MariaDB 和 WebScaleSQL
兩者會有有不同發展方向跟應用場景。</p>

<h3>InnoSQL</h3>

<p><a href="https://github.com/NetEase/InnoSQL">InnoSQL</a> 是網易開發的 Mysql 分支，在它的 Github 上有列出改變了哪些部分，這些應該都是基於
網易內部需要而修改的，也許可以透過那些特性思考一下網易是如何使用 Mysql 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Fig]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/03/fig-and-docker/"/>
    <updated>2014-12-03T23:05:08+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/03/fig-and-docker</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://www.fig.sh/">fig</a> 是一個跟 docker 有關的命令列管理工具，看起來比 coreos 本身簡單許多適合初學者使用但是提供功能就比較少，
不過在網路上看到有人有些轉換工具可以將 fig 產生的設定轉換成 coreos 所需的格式，所以可以先玩玩 fig 覺得不錯在
轉用 coreos。</p>

<p>下面官網在 ubuntu 下的安裝方法</p>

<pre><code>curl -L https://github.com/docker/fig/releases/download/1.0.1/fig-`uname -s`-`
uname -m` &gt; /usr/local/bin/fig; chmod +x /usr/local/bin/fig
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十二月書單]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/02/shi-er-yue-shu-dan/"/>
    <updated>2014-12-02T07:39:21+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/02/shi-er-yue-shu-dan</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li>高效能網站開發指南</li>
<li>Search Analytics for Your Site</li>
<li>並行之美學：撰寫平行應用程式的新手指南</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安裝 Coreos]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/01/install-coreos/"/>
    <updated>2014-12-01T01:19:28+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/01/install-coreos</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Coreos 在官網提供了不少安裝方式，我是使用它提供的 VMware 的映像檔安裝，下載之後解壓縮使用 VMware 啟動。</p>

<pre><code>curl -LO http://alpha.release.core-os.net/amd64-usr/current/coreos_production_vmware_insecure.zip
</code></pre>

<p>下載的檔案裡面有個 <code>insecure_ssh_key</code>，這個映像檔裡面沒有提供帳密登入預設你要用公私鑰登入，我這邊使用
<code>puttygen.exe</code> 載入 <code>insecure_ssh_key</code> 生成 putty 所吃的格式後使用 <code>core</code> 當作登入帳號便可以登入。</p>

<pre><code>docker run -t -i ubuntu /bin/bash
</code></pre>

<p>整個映像檔大小不到 200M  架設起來很方便，目前有看到有公司考慮要將系統移除 docker 裡面利用 Coreos 建立環境，
這也許可以參考未來架構的規劃。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Ubuntu 14.04 快速安裝 gcc-4.9]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/30/gcc-4-dot-9-on-ubuntu-14-dot-04/"/>
    <updated>2014-11-30T19:45:48+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/30/gcc-4-dot-9-on-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近將作業系統從 Ubuntu 12.04 LTS 升級到 14.04 LTS ，裡面的軟體也一併升級但是後來發現 gcc 只有到 <code>4.8</code> 的版本，沒有到最新的
 <code>4.9</code> 版本，沒有辦法完整支持 <code>C++ 14</code> 的標準。</p>

<p>原本要使用源碼直接編譯，但是發現在 Ubuntu 可以透過 apt 安裝 <code>g++ 4.9</code> ，下面記錄透過 apt 安裝的指令。</p>

<pre><code>sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install g++-4.9
gcc-4.9 -v
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox Developer Edition]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/29/firefox-developer-edition/"/>
    <updated>2014-11-29T21:06:59+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/29/firefox-developer-edition</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在 Mozilla 的電子報看到了 <a href="http://mozilla.com.tw/firefox/developer/">Firefox Developer Edition</a> : 一個為了開發者設計的閱覽器版本，這個版本似乎是直接將 <a href="https://github.com/campd/fxdt-adapters">fxdt-adapters</a> 包進去。</p>

<p>這個開發者版本直接提供開發 <code>Firefox OS APP</code> 的功能叫做 <code>WebIDE</code> 可以直接在閱覽器編輯專案，裡面也有內建用來對網頁除錯的工具，
之前我都是使用 firebug 測試網頁而兩者之間的差異還在研究中，另外也有一個可以讓使用者透過連接外部的裝置讓開發者在其他平台上除錯。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Systemtap]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/28/what-is-systemtap/"/>
    <updated>2014-11-28T23:17:20+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/28/what-is-systemtap</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://sourceware.org/systemtap/">systemtap</a> 一個可以用來抓取 Linux kernal 訊息的工具，在以前開發 Linux 核心的時候要抓去內部的資訊都需要開發者插入程式碼然後重新編譯
後才能顯示一些想要的資訊，但是後後來的核心版本提供了一個名叫 kprobe 機制，而 <a href="https://sourceware.org/systemtap/">systemtap</a> 便是藉由 kprobe 讓開發者更容易去抓取核心的運行資訊。</p>

<h3>如何開啟 systemtap 功能</h3>

<h3>範例</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於處理 LOG 的事情]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/27/process-log/"/>
    <updated>2014-11-27T02:16:51+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/27/process-log</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在在研究 Apache Kafka 處理 LOG 的情報，最後發現我看到的資料都是 Jay Kreps 寫的， Jay Kreps 似乎是 Linkedln 的程式設計師，負責 Linkedln 的開源專案，
這些專案裡面都是似乎都是用來處理 BIG DATA ，而 Jay Kreps 也寫了一些關於 BIG DATA 和 Linkedln 架構的技術文章，下面有列出最近在搜尋如何處理大量 LOG 的參考資料。</p>

<p><a href="http://www.slideshare.net/JayKreps1/i-32858698">The Log: What every software engineer should know about real-time data&rsquo;s unifying abstraction</a>
<a href="http://shop.oreilly.com/product/0636920034339.do">I Heart Logs Event Data, Stream Processing, and Data Integration </a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker 15 Tips]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/26/docker-15-tips/"/>
    <updated>2014-11-26T23:10:32+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/26/docker-15-tips</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://speakerdeck.com/bmorearty/15-docker-tips-in-5-minutes">15 Docker Tips in 5 Minutes</a> 裡面簡介了一些關於 Docker 小技巧。</p>
]]></content>
  </entry>
  
</feed>

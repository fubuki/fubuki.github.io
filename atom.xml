<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-01-14T23:30:09+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux 掛載 Samba 目錄的方法]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/14/linux-mount-samba/"/>
    <updated>2015-01-14T23:19:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/14/linux-mount-samba</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近幫人建立一個根據正式機的鏡像系統，需要掛載在多台主機掛載相同的目錄，所以紀錄一下掛載的方法，
以前有用 <code>smbfs</code> 掛載但是比較新的版本似乎只能用 <code>cifs</code>。</p>

<pre><code>mount -t cifs -o username="root",password="toor" //host ip/srv /srv
umount /srv
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Single User Mode 修改 Linux 密碼]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/13/linux-single-user-mode/"/>
    <updated>2015-01-13T22:19:55+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/13/linux-single-user-mode</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在管理虛擬機的時候有些機器以前人部署的，所以完全無法得知登入密碼，後來透過網路得知 Linux 有個
 <code>Single User Mode</code> 可以讓使用者這個模式不用密碼登入主機，然後就可以透過 <code>passwd</code> 更改密碼。</p>

<p> 要進入 <code>Single User Mode</code> 是要在開機時在 Grub 選單在開機的指令後面加上 single 參數，然後 ctrl + x 開機
 就會進入 <code>Single User Mode</code> ，但是在我的 ubuntu 14.04 LTS 上面測試卻行不通，會顯示 <code>give root password for maintenance single</code>
 這串訊息，這時就要用另外一種方法。</p>

<p> 如果使用 single 參數行不通就換成 <code>rw init=/bin/bash</code>， 然後按下 ctrl + x 開機就會直接進去主機，之後使用 passwd 更改密碼即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 安裝 Zsh]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/12/linux-zsh/"/>
    <updated>2015-01-12T23:26:31+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/12/linux-zsh</id>
    <content type="html"><![CDATA[<!-- more -->


<p>安裝 zsh</p>

<pre><code>apt-get install zsh
</code></pre>

<p>安裝 <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a></p>

<pre><code>wget --no-check-certificate http://install.ohmyz.sh -O - | bash
</code></pre>

<p>重啟後就可以看到效果了，但是有些安裝的命令卻無法使用還需要測試。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 VM 上面安裝 GNURadio]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/11/gnuradio/"/>
    <updated>2015-01-11T20:09:42+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/11/gnuradio</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近開始玩起 SDR 接收無線電訊號，於是另外安裝安裝 <a href="http://gnuradio.microembedded.com/">GNU Radio</a> 用來處理無線電訊號，一開始
是使用安裝好的 Live cd 測試能否接收到訊號，測試沒問題後就透過 <a href="http://gnuradio.org/redmine/projects/gnuradio/wiki/UbuntuInstall">UbuntuInstall</a> 這篇教學自行安裝。</p>

<p><a href="http://gnuradio.microembedded.com/">GNU Radio</a> 可以透過圖形直接對接收到的訊號進行處理，也可以透過 Python 撰寫程式碼，不過需要先去
複習大學的數位訊號處理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C 語言的巨集]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/10/define-multi-line/"/>
    <updated>2015-01-10T22:43:00+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/10/define-multi-line</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在研究 Phalcon 的語法時看到下面這種定義巨集的程式碼，跟以前直接用大括號寫成 Function 的方式不一樣，
後來在別人的網誌看到這兩種的差別，直接使用 Function 的區塊寫法如果沒有注意寫法在預編譯的時候展開可能導致錯誤。</p>

<pre><code>/** Get the current hash key without copying the hash key */
#define PHALCON_GET_HKEY(var, hash, hash_position) \
    do { \
        PHALCON_INIT_NVAR_PNULL(var); \
        phalcon_get_current_key(&amp;var, hash, &amp;hash_position TSRMLS_CC); \
    } while (0)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Information Foraging]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/09/information-foraging-theory/"/>
    <updated>2015-01-09T23:08:32+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/09/information-foraging-theory</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在 <code>設計搜索體驗：搜索的藝術與科學</code> 這本書的 <code>Information Seeking</code> 的章節看到這個名詞 <code>Information Foraging</code>，
網路上看到有人翻譯成信息覓食理論，是把人搜尋情報視為一種覓食行為，藉此研究使用者是怎麼從一個網頁轉移到到下一個網頁。</p>

<p>另外書中有提到理論生態學的東西，說明 <code>Information Foraging</code> 源自於生態學裡面的覓食理論，相關的有 Optimal foraging theory，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Strace 跟蹤進程]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/08/strace-nginx/"/>
    <updated>2015-01-08T23:28:43+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/08/strace-nginx</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前使用 lighttpd + web.py 架設環境時不知道什麼原因跑不起來，但是 log 裡面沒有顯示可用的訊息除錯，
後來學到使用 <code>strace</code> 追蹤 lighttpd 的運行過程，查到是有模組沒有安裝造成的。</p>

<p>直接運行</p>

<pre><code>strace -ff lighttpd -D -f /etc/lighttpd/lighttpd.conf
</code></pre>

<p>透過 pid 跟蹤</p>

<p>透過 port 跟蹤</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx-systemtap-toolkit]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/07/nginx-systemtap-toolkit/"/>
    <updated>2015-01-07T21:52:05+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/07/nginx-systemtap-toolkit</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前有學到使用 <code>systemtap</code> 跟蹤內核的行為，這樣用來了解程式的行為十分有幫助，而今天看到了一個使用
<code>systemtap</code> 測試分析 nginx 的工具 : <a href="https://github.com/openresty/nginx-systemtap-toolkit">nginx-systemtap-toolkit</a>， 這個工具可以用來查看 nginx 內部各個
區塊實際執行的情形，在他的網頁有很多命令可以使用，如果遇到 strace 還不能解決的情形可以透過的工具查詢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Undefined Behavior and Sequence Points]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/06/undefined-behavior-and-sequence-points/"/>
    <updated>2015-01-06T23:27:19+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/06/undefined-behavior-and-sequence-points</id>
    <content type="html"><![CDATA[<!-- more -->


<p>今天在看編譯原理的書時看到了 <a href="http://stackoverflow.com/questions/4176328/undefined-behavior-and-sequence-points">Undefined Behavior and Sequence Points</a> ，這兩個跟編譯器實作有關，通常在寫程式的時候應該是不會寫出有 <code>Undefined Behavior</code> 的片段，而 <code>Sequence Points</code> 跟 <code>side affetct</code> 比較有關。</p>

<p><code>Undefined Behavior</code> 簡單說是有些程式碼由於在標準( ex: C++11)裡面沒有定義會輸出怎樣的結果，所以便會交給 Compiler 的開發者自行
實作，導致這類的程式碼會有不可預期的結果。</p>

<p><code>Sequence Points</code> 是程式執行到某一個點時，前面的 <code>side affetct</code> 已經結束，後面的 <code>side affetct</code> 還沒有開始。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 顯示進程列表]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/05/mysql-show-process/"/>
    <updated>2015-01-05T22:12:57+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/05/mysql-show-process</id>
    <content type="html"><![CDATA[<!-- more -->


<p>檢查目前 mysql 有多少進程，並且可以看出有多少連線，目前有在跑哪些 sql 和執行了多久，
有時網站變慢可以從列表中觀察是哪些 sql 拖慢系統的速度，另外也可以透過 kill 直接殺掉進程。</p>

<pre><code>show processlist;
show full processlist;
kill
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opencv 加上 Intel IPP TBB 支援]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/04/intel-ip-tbb-opencv/"/>
    <updated>2015-01-04T22:17:05+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/04/intel-ip-tbb-opencv</id>
    <content type="html"><![CDATA[<!-- more -->


<p>參照 <a href="https://software.intel.com/en-us/articles/opencv-300-beta-ipp-tbb-enabled-on-yocto-with-intel-edison">OpenCV 3.0.0-beta ( IPP &amp; TBB enabled ) on Yocto with Intel® Edison</a> 替手上的 OpenCV 加上多緒支援。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[取得 Android 的原始碼]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/03/android-source/"/>
    <updated>2015-01-03T22:20:12+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/03/android-source</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li><p>安裝 repo</p>

<p> curl <a href="https://storage.googleapis.com/git-repo-downloads/repo">https://storage.googleapis.com/git-repo-downloads/repo</a> > /usr/bin/repo
 chmod  a+x /usr/bin/repo</p></li>
<li><p>建立文件夾下載程式碼</p>

<p> mkdir andorid_source
 cd andorid_source
 repo init -u <a href="https://android.googlesource.com/platform/manifest">https://android.googlesource.com/platform/manifest</a>
 repo sync</p></li>
</ol>


<p>參考 : <a href="https://source.android.com/source/downloading.html">Downloading the Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallel Sum and Prefix Scan]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/02/parallel-sum-prefix-scan/"/>
    <updated>2015-01-02T23:26:11+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/02/parallel-sum-prefix-scan</id>
    <content type="html"><![CDATA[<!-- more -->


<p>PRAM (Parallel random-access machine)</p>

<p>使用多緒函式庫實踐兩種平行演算法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Social Physics]]></title>
    <link href="http://fubuki.github.io/blog/2015/01/01/social-physics/"/>
    <updated>2015-01-01T22:21:30+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/01/01/social-physics</id>
    <content type="html"><![CDATA[<p>關於什麼是 Social Physics ?</p>

<!-- more -->


<ol>
<li><a href="http://socialphysics.media.mit.edu/about/">MIT Media Lab</a></li>
<li><a href="http://www.amazon.com/Social-Physics-Spread-Lessons-Science/dp/1594205655">Social Physics: How Good Ideas Spread—The Lessons from a New Science</a></li>
<li><a href="https://www.youtube.com/watch?v=HMBl0ttu-Ow">Sandy Pentland: &ldquo;Social Physics: How Good Ideas Spread&rdquo; | Talks at Google</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一月書單]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/31/2015-1-booklist/"/>
    <updated>2014-12-31T22:06:46+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/31/2015-1-booklist</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li>Becoming a Better Programmer</li>
<li>Designing the Search Experience: The Information Architecture of Discovery</li>
<li>FreeSWITCH 權威指南</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yum 出現 Cannot Retrieve Metalink for Repository: Epel 的錯誤]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/30/cannot-retrieve-metalink-for-repository-epel/"/>
    <updated>2014-12-30T22:49:21+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/30/cannot-retrieve-metalink-for-repository-epel</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在 Centos 6 上面更新套件的時候出現了 <code>Cannot retrieve metalink for repository: epel</code> 的錯誤，
命令列是寫說是因為 SSL 連線出問題，後來從網路上看到是要更新 <a href="http://en.wikipedia.org/wiki/Network_Security_Services">nss</a> 這個套件。</p>

<p><a href="http://en.wikipedia.org/wiki/Network_Security_Services">nss</a> 全名是 <code>Network Security Services</code> 似乎是負責網路加密傳送的功能，不知道是版本的關係才會出現
 SSL 問題，在網路上也到有一些加密的問題也是出自於 <a href="http://en.wikipedia.org/wiki/Network_Security_Services">nss</a>，而在 MDN 也有一篇 <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Overview">Overview of NSS</a> 的文章，
 裡面也說明 nss 是一個開源的加密函式庫，而 Yum 有使用到 nss 處理 SSL 加密連線。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysqldump 備份資料庫指令]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/29/mysqldump/"/>
    <updated>2014-12-29T21:26:15+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/29/mysqldump</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近幫別人整理資料庫發現資料表的結構設計不當導致資料過多的時候效率變很差，原本更改資料表的結構
但是由於手上沒有 root 權限的帳號，資料庫也不能停機開啟 <code>safe mode</code>，所以只能先刪除資料。</p>

<p>目前 MySQL 資料庫最常用 <a href="http://dev.mysql.com/doc/refman/5.1/en/mysqldump.html">mysqldump</a> 備份，在 MySQL 官網有詳細的解說裡面有很多選項可以使用，但是
目前最常用到的選項是 <code>-single-transaction</code> 和 <code>-lock-all-tables</code>，<code>-single-transaction</code> 是在備份
資料前開啟交易，讓資料能夠盡量完整匯出，而 <code>-lock-all-tables</code> 則是給 MyISAM 這類不支援 transaction
 的資料表所用，他會在備份時 Lock Table 為 READ LOCAL 狀態，只允許 <a href="http://dev.mysql.com/doc/refman/5.0/en/concurrent-inserts.html">Concurrent Inserts</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker 的 Volumes 功能]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/28/docker-volumes/"/>
    <updated>2014-12-28T22:51:26+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/28/docker-volumes</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在用 Docker 建立的 FFmpeg 的容器時，想要建立的直接在容器裡面寫入檔案執行轉檔，然後看到了 Docker 有類似掛載的功能，
可以建立 Volumes 讓各個不同的容器共用，之後如果有升級或是跟其他容器結合形成一個服務平台可以採取這樣的做法。</p>

<p>另外有看到一篇蠻有趣的文章 : <a href="http://stackoverflow.com/questions/18496940/how-to-deal-with-persistent-storage-e-g-databases-in-docker">How to deal with persistent storage (e.g. databases) in docker</a>，裡面的回答有提到一個東西
 <code>data only container</code>，似乎是建立一個專門掛載 Volumes 的 container ，從這篇 <a href="http://www.offermann.us/2013/12/tiny-docker-pieces-loosely-joined.html">Tiny Docker Pieces, Loosely Joined</a> 最後面
 有提到一些關於這樣做法的好處，似乎是能更好管理 Volumes 裡面的內容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[USRP + Rtl2832u 接收無線電]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/27/usrp-rtl2832u/"/>
    <updated>2014-12-27T22:25:49+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/27/usrp-rtl2832u</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前有看到一篇關於 火人節跟 <a href="http://openbts.blogspot.tw/">OpenBTS</a> 的文章，看到其中使用開源軟硬體建立一個通信平台讓我
很想玩玩看，理面比較重要的是 <code>USRP</code> 這部分的硬體，所以先從 <code>USRP</code> 這部分開始著手。</p>

<p>目前從網路上來看直接買硬體不太便宜但是有使用電視棒的替代入門方案，電視棒裡面的 rtl2832u 晶片
可以用來接收無線電的訊號，利用這個特性將訊號接入 PC 然後使用軟體解調訊號，剛好手上有個沒人
使用的電視棒， 就參考這篇 <a href="http://wiki.spench.net/wiki/USRP_Interfaces#Installer">教學</a> 架設平台，過程中最重要的更換電視棒的驅動程式這樣 SRP 的軟體才
抓得到電視棒，我是透過 HDSDR 處理電波訊號。</p>

<p>最後雖然架起來了但是似乎抓不到無線電訊號，我連 FM 也抓不到只有抓到一些雜訊，看起來是天線太爛了，
也有可能是電視本身的問題，之後在露天找一下相關的商品測試。</p>

<h4>安裝過程</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Kernel 安裝 Aufs]]></title>
    <link href="http://fubuki.github.io/blog/2014/12/26/kernel-aufs/"/>
    <updated>2014-12-26T23:18:05+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/12/26/kernel-aufs</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前研究 Docker 了解了有一個 aufs 檔案系統，所以就想安裝來玩玩看。</p>

<h4>概要</h4>

<p>我是用手上的 Centos 6 測試的，安裝前要先下載下面幾個檔案，然後使用 <code>aufs3-standalone</code> 給
aufs3-linux 打上補丁然後在 config 時打開 aufs 的選項後編譯核心即可。</p>

<ol>
<li>aufs3-linux</li>
<li>aufs3-standalone</li>
<li>aufs-util git://git.code.sf.net/p/aufs/aufs-util</li>
</ol>


<h4>下載</h4>

<pre><code>git clone git://github.com/sfjro/aufs3-linux.git
git clone git://git.code.sf.net/p/aufs/aufs-util
cd aufs3-linux
git clone git://git.code.sf.net/p/aufs/aufs3-standalone
</code></pre>

<h4>切換版本</h4>

<p>切換 <code>aufs3-linux</code> 和 <code>aufs3-standalone</code> 的版本，目前支援到最新的 3.18 版本，
但是要注意兩個版本要一致。</p>

<h4>打上補丁</h4>

<pre><code>aufs3-standalone/aufs3-kbuild.patch
aufs3-standalone/aufs3-base.patch
aufs3-standalone/aufs3-mmap.patch
aufs3-standalone/aufs3-standalone.patch
</code></pre>

<h4>從aufs3-standalone 複製必要的檔案到 kernel</h4>

<pre><code>{Documentation,fs}
include/linux/aufs_type.h 
include/uapi/linux/aufs_type.h
</code></pre>

<h4>最後</h4>

<p>打開 aufs 的編譯選項，然後編譯核心重開機後還需要安裝 <code>aufs-util</code>，這樣 aufs 才能正常運作。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-03-09T23:03:51+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 LiteIDE 開發 Golang]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/09/liteide/"/>
    <updated>2015-03-09T22:17:36+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/09/liteide</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近找了一些 IDE 最後決定用 <a href="https://github.com/visualfc/liteide">LiteIDE</a> 開發 golang，從官網下載 golang 的 msi 安裝檔，之後就可以用 <a href="https://github.com/visualfc/liteide">LiteIDE</a> 直接編譯程式碼，
另外為了安裝套件需要設定設定 GOPATH 並且還要安裝 git，這樣便可以用 goget 取得需要的套件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Velocity Js]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/08/velocity/"/>
    <updated>2015-03-08T22:29:13+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/08/velocity</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近看到有人使用 <a href="https://github.com/julianshapiro/velocity">velocity</a> 製作 UI 的動畫效果，看起來比  <code>jQuery animate</code>  還強大，
這邊 <a href="http://codepen.io/collection/tIjGb/">Velocity.js: The Official Collection</a> 有一些可以參考的例子。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang 的 Goroutine]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/07/golang-goroutine/"/>
    <updated>2015-03-07T23:35:53+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/07/golang-goroutine</id>
    <content type="html"><![CDATA[<!-- more -->


<p>golang 的類似線程的東西，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 安裝 Nfs]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/06/linux-nfs/"/>
    <updated>2015-03-06T23:48:46+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/06/linux-nfs</id>
    <content type="html"><![CDATA[<!-- more -->


<p>記錄在 Centos 上面安裝 nfs server。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spider Storage Engine]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/05/spider-storage-engine/"/>
    <updated>2015-03-05T22:31:42+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/05/spider-storage-engine</id>
    <content type="html"><![CDATA[<!-- more -->


<p>今天看到一個沒看過的 &lsquo;mysql storage engine&rsquo; 叫 spider，開發者可以透過這個 storage engine 將數據分片，
在 Mariadb 官網的這篇 <a href="https://mariadb.com/kb/en/mariadb/spider-storage-engine-overview/">Spider Storage Engine Overview</a> 有解說怎麼使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coroutine Gevent Stackless]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/04/coroutine-gevent/"/>
    <updated>2015-03-04T23:13:04+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/04/coroutine-gevent</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Process -> Thread -> Toroutine</p>

<ol>
<li><a href="http://www.gevent.org/">gevent</a></li>
<li><a href="http://www.stackless.com/">stackless</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cayley 圖形資料庫]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/03/cayley/"/>
    <updated>2015-03-03T23:28:10+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/03/cayley</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://github.com/google/cayley">cayley</a> 使用 go 撰寫的圖形資料庫，使用的語法跟 jquery 很像，可以跟 neo4j 比較。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cellular Automaton]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/02/cellular-automaton/"/>
    <updated>2015-03-02T23:47:34+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/02/cellular-automaton</id>
    <content type="html"><![CDATA[<!-- more -->


<p>元胞自動機用來模擬實驗用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAP 理論關於 Network Partition]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/01/cap-twelve-years-later/"/>
    <updated>2015-03-01T23:11:52+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/01/cap-twelve-years-later</id>
    <content type="html"><![CDATA[<!-- more -->


<p>CAP 理論通常只能滿足其中兩個，但是在 <a href="http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=6133253&amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D6133253">CAP Twelve Years Later: How the &ldquo;Rules&rdquo; Have Changed</a> 裡面有寫另外處理 <code>Network partition</code>
將系統保持在滿足 CAP 的狀態下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[V8 的 Crankshaft 和 TurboFan]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/28/v8-turbofan-crankshaft/"/>
    <updated>2015-02-28T21:33:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/28/v8-turbofan-crankshaft</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>Crankshaft</h3>

<p><a href="http://blog.chromium.org/2010/12/new-crankshaft-for-v8.html">Crankshaft</a>， JIT 優化功能。</p>

<h3>TurboFan</h3>

<p>新的優化編譯器，裡面加入了 asm.js 的支持。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[三月書單]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/27/2015-03-book-list/"/>
    <updated>2015-02-27T21:04:48+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/27/2015-03-book-list</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li>大數據日知錄-架構與算法</li>
<li>Mobile and Web Messaging Messaging Protocols for Web and Mobile Devices</li>
<li>松本行弘談程式世界的未來</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached Session 問題]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/26/memcached-session/"/>
    <updated>2015-02-26T23:46:27+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/26/memcached-session</id>
    <content type="html"><![CDATA[<!-- more -->


<p>使用 memcached 存放 session 有可能遇到的問題，可以了解一下 memcached 內部的機制，Slab , Page, Chunk 分別代表的意義。</p>

<ol>
<li><a href="http://www.dormando.me/articles/memcached_sessions/">Sessions in Memcached</a></li>
<li><a href="http://dormando.livejournal.com/495593.html">dormando - Cache your sessions. Don&rsquo;t piss off your users</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[樂天的 ROMA]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/25/roma/"/>
    <updated>2015-02-25T23:06:18+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/25/roma</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://github.com/roma/roma">ROMA</a> 是樂天基於 Ruby 開發的 key-value 快取伺服器，相容於 memcached 也就是可以透過 memcached 的
函式庫操作 <a href="https://github.com/roma/roma">ROMA</a>。</p>

<p><a href="https://github.com/roma/roma">ROMA</a> 最有趣的部分是他是分散式的系統，去中心化的 PSP 架構，從 <a href="http://roma-kvs.org">ROMA-Project</a> 官網的說明看似乎如果
有一個端點離開群集卻不會失去資料。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chubby 和 Zookeeper 的區別]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/24/chubby-zookeeper/"/>
    <updated>2015-02-24T23:22:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/24/chubby-zookeeper</id>
    <content type="html"><![CDATA[<!-- more -->


<p>兩者都是用來處理分散式系統的問題，chubby 是由 google 提出的，而 zookeeper 是類似 chubby 的開源實現軟體，
這篇 <a href="http://research.google.com/archive/chubby.html">The Chubby lock service for loosely-coupled distributed systems</a> 是 google 提出的論文，可以看一下
chubby 是提供了哪些功能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js 建立 Child Process]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/23/node-dot-js-child-process/"/>
    <updated>2015-02-23T22:49:18+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/23/node-dot-js-child-process</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在測試將手上一個 node.js 的系統分成好幾個子系統，然後主要的系統就只是去監控子系統
避免當子系統出現問題時導致整個系統出現問題，這邊紀錄一下 node.js 怎麼建立 child process。</p>

<p>以前有用過 node.js 的 cluster 模組去擴展 socket.io 的伺服器，現在是用 <code>child process</code> 模組建立
新的 process 收到處理完成的訊息後就將 process 給殺掉， <code>child process</code> 目前有提供下面幾種方法。</p>

<ol>
<li>spawn</li>
<li>exec</li>
<li>execFile</li>
<li>fork</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[開發者討論 JIT 的文章]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/22/jit-compilers/"/>
    <updated>2015-02-22T23:27:39+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/22/jit-compilers</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在研究 HHVM 的時候看到關於 JIT 的討論文章 <a href="http://lambda-the-ultimate.org/node/3851">Have tracing JIT compilers won?</a>，裡面有不少是跟 JIT 相關的編譯器的開發者，
文章討論到一些關於 JIT 技術的事情。</p>

<p><a href="http://en.wikipedia.org/wiki/Threaded_code">Threaded code</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MemC3 優化 Memcached 讀取效率]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/21/memc3/"/>
    <updated>2015-02-21T20:55:16+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/21/memc3</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>MemC3: Compact and Concurrent MemCache with Dumber Caching and Smarter Hashing</code> 這篇論文
提出一些優化 Memcached 的方式，主要都是替換原本 Mmemcached 的算法和機制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cuckoo Hash]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/20/cuckoo-hash/"/>
    <updated>2015-02-20T22:26:38+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/20/cuckoo-hash</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Cuckoo hash 是用來解決 hash 碰撞的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[透過 Devstack 使用 Openstack]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/19/openstack-devstack/"/>
    <updated>2015-02-19T19:27:47+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/19/openstack-devstack</id>
    <content type="html"><![CDATA[<!-- more -->


<p>如果想要測試看看 Openstack 的功能，可以先使用 <a href="https://github.com/openstack-dev/devstack">Devstack</a> 在一台機器上面建立環境，可以免去很多麻煩的設定。</p>

<p>我是在 ubuntu 14.04 的虛擬機器裡面執行，安裝方式主要是取得 <a href="https://github.com/openstack-dev/devstack">Devstack</a> 後使用非 root 帳號執行 <code>stack.sh</code> 腳本，
另外這邊需要在 <code>/etc/sudoers</code> 設定本帳號在使用 sudo 時無需輸入密碼，然後在重新開機後需要使用 <code>rejoin-stack.sh</code> 啟動服務。</p>

<h4>Install</h4>

<pre><code>git clone https://github.com/openstack-dev/devstack.git
cd devstack
./stack.sh
</code></pre>

<h4>Minimal Configuration</h4>

<pre><code>[[local|localrc]]
ADMIN_PASSWORD=secrete
DATABASE_PASSWORD=$ADMIN_PASSWORD
RABBIT_PASSWORD=$ADMIN_PASSWORD
SERVICE_PASSWORD=$ADMIN_PASSWORD
SERVICE_TOKEN=a682f596-76f3-11e3-b3b2-e716f9080d50
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codis : A Redis Proxy]]></title>
    <link href="http://fubuki.github.io/blog/2015/02/18/codis-redis-proxy/"/>
    <updated>2015-02-18T10:04:03+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/02/18/codis-redis-proxy</id>
    <content type="html"><![CDATA[<!-- more -->


<p>這星期看到<code>豌豆荚</code>分享他們怎麼設計 Redis 的架構，裡面提到他們使用 <code>Twemproxy</code> 和 reids cluster 的心得，
但是他們似乎都不太滿意因此自行撰寫了 <a href="https://github.com/wandoulabs/codis">codis</a>。</p>

<p><a href="https://github.com/wandoulabs/codis">codis</a> 是用 C 和 GO 撰寫的 proxy，看起來類似 <code>Twemproxy</code>，不過他跟 <code>Twemproxy</code> 不一樣的地方在提供動態 <code>scale</code>
和監控後台的功能，但是效能上開發人員說會慢 20% 左右。</p>
]]></content>
  </entry>
  
</feed>

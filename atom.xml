<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-06-18T23:13:12+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Memcached 1MB Limit]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/18/memcached-1mb-limit/"/>
    <updated>2014-06-18T23:06:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/18/memcached-1mb-limit</id>
    <content type="html"><![CDATA[<p>memcached在儲存單筆記錄的時候會有個限制，每筆記錄只能存放最大1MB的大小，以前沒有遇過這種問題，但是在最近一個
專案上面突然遇到快取沒有作用的問題，後來發現有可能是存放的資料大於1MB的問題，在<a href="http://docs.oracle.com/cd/E17952_01/refman-5.6-en/ha-memcached-faq.html">ha-memcached-faq</a>裡面有說為什麼
預設1MB和如何調整大小。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Conf 設定]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/18/nginx-conf-she-ding/"/>
    <updated>2014-06-18T22:56:40+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/18/nginx-conf-she-ding</id>
    <content type="html"><![CDATA[<p>記錄關於nginx 設定檔的配置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 SSE]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/17/html5-sse/"/>
    <updated>2014-06-17T21:40:47+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/17/html5-sse</id>
    <content type="html"><![CDATA[<p>SSE全名為 Server-Sent Events 屬於HTML5的API， 讓Server端可以更新Client端的資料，看起來跟websocket很像，
不過SSE是單向的，只能讓Server透過SSE傳輸資料給Client而websocket則是可以雙向的，不過如果只需要由Server
即時更新資料給Client的應用例如顯示新聞或是股市的資料應該蠻適合的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Telegram 新興的通訊軟體]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/16/xin-xing-de-tong-xun-ruan-ti/"/>
    <updated>2014-06-16T23:08:39+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/16/xin-xing-de-tong-xun-ruan-ti</id>
    <content type="html"><![CDATA[<p>最近在研究firefox os 的時候看到了<a href="https://telegram.org/">Telegram</a> 這款通訊軟體，他將API和通訊協定開源出來讓使用者可以建構自己的Client端，
到目前有看到有好幾種平台的專案，在<a href="https://telegram.org/">Telegram</a>的官網可以看到不少特點，其中比較讓我看到興趣的安全性的特性，可以透過研究
<a href="https://github.com/zhukov/webogram">webogram</a>來作為手上專案的參考範例。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 分區表]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/15/mysql-fen-qu-biao/"/>
    <updated>2014-06-15T23:49:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/15/mysql-fen-qu-biao</id>
    <content type="html"><![CDATA[<p>記錄一下在MySQL下 分區表的種類和用法。</p>

<!-- more -->


<h2>種類</h2>

<ol>
<li>RANGE分區</li>
<li>LIST分區</li>
<li>HASH分區</li>
<li>KEY分區</li>
<li>COLUMNS分區</li>
</ol>


<h2>用法</h2>

<ol>
<li>子分區</li>
<li>根據日期作RANGE分區優化查詢速度</li>
<li>LIST分區用於不連續離散的數值</li>
<li>HASH和KEY用來均勻的分配數據到各個分區</li>
<li>COLUMNS用在非整數類型的數值欄位</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox Os App Development]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/14/firefox-os-app-development/"/>
    <updated>2014-06-14T23:12:13+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/14/firefox-os-app-development</id>
    <content type="html"><![CDATA[<ol>
<li><a href="https://github.com/soapdog/firefoxos-quick-guide">firefoxos-quick-guide</a></li>
<li><a href="http://www.slideshare.net/benko/how-to-start-developing-apps-for-firefox-os">how-to-start-developing-apps-for-firefox-os</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/Firefox_OS/Screencast_series:_App_Basics_for_Firefox_OS">App_Basics_for_Firefox_OS</a></li>
<li><a href="http://buildingfirefoxos.com/">buildingfirefoxos</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 參數文件和日誌]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/12/mysql-can-shu-wen-jian-he-ri-zhi/"/>
    <updated>2014-06-12T23:41:39+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/12/mysql-can-shu-wen-jian-he-ri-zhi</id>
    <content type="html"><![CDATA[<h2>日誌</h2>

<ol>
<li>錯誤日誌</li>
<li>慢查詢日誌</li>
<li>查詢日誌</li>
<li>二進位日誌</li>
</ol>


<h2>文件</h2>

<ol>
<li>表結構定義文件</li>
<li>InnoDB儲存引擎文件</li>
<li>參數文件</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mosquitto Bridge Conf]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/10/mosquitto-bridge-conf/"/>
    <updated>2014-06-10T22:04:53+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/10/mosquitto-bridge-conf</id>
    <content type="html"><![CDATA[<p>記錄一下 mosquitto bridge config的部分</p>

<!-- more -->


<p>cleansession</p>

<p>當網路斷線的時候要不要清掉remote broker的連線資訊和訊息，預設是 false，但是不論是true 或是 false在某些情形下都會有問題。</p>

<p>round_robin
如果有多個bridge server 當第一個server當掉就會跳第二個server，然後會有兩種情形，會不會一直去測試第一個server能不能
連接，或是直到當第二個server當掉才會去連接第一個server。</p>

<p>start_type [ automatic | lazy | once ]</p>

<p>automatic 會自動連接上bridge server。</p>

<p>lazy 當收到的訊息超過一個門檻才會連接bridge server 當經過一個idle timeout 會斷開連結，這是為了在
使用者只希望有需要發送訊息的時候才會連接 server</p>

<p>once 會自動連接bridge server但是如果連接失敗就不會重連接。</p>

<p>threshold count
給start_type lazy使用，當收到多少訊息才會重開(從上面來看應該是連接bridge server才對)</p>

<p>topic pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]</p>

<p>topic # both 2 local/topic/ remote/topic/</p>

<p>有哪些 topic會被分享給其他broker，並且可以重新對應topic的部分。</p>

<p>try_private [ true | false ]</p>

<p>設定這個server是一個bridge或是一個普通的客戶端，如果是這個sever是一個bridge會有loop detection，
因此會消耗一些效能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Mqtt Server]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/08/scaling-mqtt-server/"/>
    <updated>2014-06-08T23:59:01+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/08/scaling-mqtt-server</id>
    <content type="html"><![CDATA[<p>目前測試過幾套mqtt broker，記錄一下使用過的心得和擴展方案。</p>

<!-- more -->


<p>目前用過以下幾種broker:<br/>
1. <a href="https://github.com/mcollina/mosca">mosca</a><br/>
2. <a href="http://www.rabbitmq.com/">rabbitmq</a><br/>
3. <a href="http://mosquitto.org/">mosquitto</a></p>

<h2>mosca</h2>

<p>使用node.js寫成的broker，負責pubsub和持久化的部分可以由使用者自行自訂，程式碼也不會太過於龐大，原本
要使用這個當mqtt server在擴展上可以透過共用pubsub和持久化的部分擴展，不過在處理offline message上有問題就放棄了。</p>

<h2>rabbitmq</h2>

<p>使用erlang寫成的broker，rabbitmq透過plugin的方式支援mqtt協定，支援到mqtt 3.1，rabbitmq原本就支援
cluster的架構，並且session可以互相共享，讓rabbitmq在懭展的同時也能處理offline message的問題。</p>

<h2>mosquitto</h2>

<p>使用C語言寫成的，原本是利用mosquitto的bridge架構擴展server，不過在測試offline message的時候沒有辦法
處理session的問題，server之間沒有共享session，但是如果能夠自行處理offline message的問題 mosquitto
也是個不錯的選擇。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook Login JavaScript SDK 在 Webview下的問題]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/06/facebook-login-javascript-sdk-zai-webviewxia-de-wen-ti/"/>
    <updated>2014-06-06T22:31:54+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/06/facebook-login-javascript-sdk-zai-webviewxia-de-wen-ti</id>
    <content type="html"><![CDATA[<p>在android或是ios底下使用Facebook 的JavaScript SDK通常是透過webview之類的實作，但是在需要登入Facebook的時候
，雖然會導向登入頁但是卻無法正常導回登入前的頁面，畫面會呈現一片空白，後來發現有可能是因為Facebook是用popout
出一個登入頁使得登入完成後無法正常redirect導原本的頁面才會發生這種情形，網路上有些解法是更改webview部分的程式碼
讓redirect可以正常運作，不過還有另外一個方法是使用javascript直接導向facebook手機板的登入頁在redirect回來便可以
避免登入後會出現空白頁的問題。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gearman 和 Beanstalk]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/05/gearman-he-beanstalk/"/>
    <updated>2014-06-05T23:41:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/05/gearman-he-beanstalk</id>
    <content type="html"><![CDATA[<p>記錄一下之後要研究和測試這兩種消息隊列。</p>

<!-- more -->


<p>目前在工作上是用<a href="https://github.com/kr/beanstalkd">beanstalkd</a>作為消息隊列，由於使用人數少所以也不會有什麼問題，不過在PHP conf上面看到有人提了一個<a href="http://gearman.org/">gearman</a>的消息隊列，
這兩個消息隊列都是用C語言撰寫的，在client library方面都有支援PHP和Node.js，不過似乎<a href="http://gearman.org/">gearman</a>的使用人數比較多的樣子，之後先研究這兩者
的管理工具<a href="https://github.com/ptrofimov/beanstalk_console">beanstalk_console</a>和<a href="https://github.com/gaspaio/gearmanui">gearmanui</a>和擃展性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 內核研究資源]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/02/php-he-yan-jiu-zi-yuan/"/>
    <updated>2014-06-02T23:50:44+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/02/php-he-yan-jiu-zi-yuan</id>
    <content type="html"><![CDATA[<p>深入理解PHP内核 <a href="http://www.php-internals.com/book/">http://www.php-internals.com/book/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[六月書單]]></title>
    <link href="http://fubuki.github.io/blog/2014/06/01/liu-yue-shu-dan/"/>
    <updated>2014-06-01T21:34:16+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/06/01/liu-yue-shu-dan</id>
    <content type="html"><![CDATA[<p>記錄六月要看完的書單。</p>

<!-- more -->


<ol>
<li>MySQL技術內幕︰InnoDB存儲引擎（第2版）</li>
<li>MySQL技術內幕︰ SQL編程</li>
<li>數學之美</li>
<li>資料之美</li>
<li>Mastering Node.js</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NAVER Line Protocol]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/31/naver-line-protocol/"/>
    <updated>2014-05-31T22:38:23+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/31/naver-line-protocol</id>
    <content type="html"><![CDATA[<p>研究關於Line 的通訊架構。</p>

<!-- more -->


<p>目前可以知道Line 有使用 SPDY ，不過<a href="http://blogs.ixiacom.com/ixia-blog/emulating-the-line-application/">emulating-the-line-application</a>有提到也有使用thrift用來控制訊息的部分，
另外透過<a href="https://github.com/mvirkkunen/purple-line">purple-line</a>這個專案也能稍微了解Line的應用程式與伺服器之間互相通訊的過程，裡面也有一份<a href="http://altrepo.eu/git/line-protocol.git/">line-protocol</a>的
規格表可以做為日後開發類似功能的參考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MQTT Bridge]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/30/mqtt-bridge/"/>
    <updated>2014-05-30T20:57:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/30/mqtt-bridge</id>
    <content type="html"><![CDATA[<p>關於mqtt bridge的功能。</p>

<!-- more -->


<p>日前在研究各種 <code>MQTT Broker</code> 的方案，市面上有許多方案可以使用，原本是使用<a href="https://github.com/mcollina/mosca">mosca</a>作為server但是在處理離線訊息和擴展性上
有些問題，此外讓手機端連接 <a href="https://github.com/mcollina/mosca">mosca</a> 作測試會出現 connection reset的問題，因此換用 <a href="http://mosquitto.org/">Mosquitto</a>作為替代方案，使用上沒出現
什麼問題，在擴展性上有<a href="http://mqtt.org/wiki/doku.php/bridge_protocol">bridge_protocol</a>這個方案，可以讓一台broker作為bridge讓其他broker透過bridge互相溝通，也支援離線訊息
的功能，詳細設定可以參考<a href="http://mosquitto.org/man/mosquitto-conf-5.html">mosquitto-conf</a>的bridge部分。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第43回 HTML5とか勉強会]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/28/di-43hui-html5tokamian-qiang-hui/"/>
    <updated>2014-05-28T21:32:41+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/28/di-43hui-html5tokamian-qiang-hui</id>
    <content type="html"><![CDATA[<p>記錄一下在網路上看到的情報。</p>

<!-- more -->


<p>在網路上尋找關於LINE既読機能相關情報找到的，有可能是因為LINE使用SPDY的關係才找到<a href="http://atnd.org/events/46252">第43回 HTML5とか勉強会</a>這篇文章。
<a href="http://atnd.org/events/46252">第43回 HTML5とか勉強会</a>這次聚會介紹了一些關於HTTP相關的情報，其中也有包括SPDY，不過裡面大部分都有聽過人提過，除了QUIC這個
新的協議，在這篇<a href="http://www.infoq.com/news/2014/02/quic">Google Wants to Speed Up the Internet with QUIC</a>有比較詳細的介紹。</p>

<p>另外在裡面也有提到<a href="http://peerjs.com/">peerjs</a>這個專案，包裹WebRTC讓開發者更容易使用，日後可以玩玩看，順便在這裡記錄一下LINE最近關於SPDY的文章。</p>

<p><a href="http://tech.naver.jp/blog/?p=2381">Adopting SPDY in Line – Part 1: An Overview</a>  <br/>
<a href="http://tech.naver.jp/blog/?p=2729">Adopting SPDY in LINE – Part 2: The Details</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached Connect vs Pconnect]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/23/memcache-connect-vs-pconnect/"/>
    <updated>2014-05-23T21:31:20+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/23/memcache-connect-vs-pconnect</id>
    <content type="html"><![CDATA[<p>memcache目前算是常用的快取server，很多人在使用php開發網站通常會搭配memcached，本文記錄一下
php 在使用memcached遇到的問題。</p>

<!-- more -->


<p>memcached 有分 connect 和 pconnect兩種方法，但是connect會斷掉連線，而pconnect會將連接持久化，從curr_connections可以看出
兩者的不同，同一個網頁重整conncet的curr_connections數值不會一直增加，但是pconnet會上升到一個上限。</p>

<p>但是在網路上有看到人說 fastcgi方式用長連接是無效的，這邊還需要了解關於pconnect是如何實作的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rolling cURL]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/22/rolling-curl/"/>
    <updated>2014-05-22T22:51:01+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/22/rolling-curl</id>
    <content type="html"><![CDATA[<p>cURL 是用來模擬各種http請求的工具，PHP也使用這個工具來取得網頁內容，或是呼叫一些API，
但是使用上會存在一些效能上的問題，如果只是單純呼叫cURL可能會阻塞住，就必須更加巧妙的去使用cURL。</p>

<!-- more -->


<p><a href="http://www.searchtb.com/2012/06/rolling-curl-best-practices.html">Rolling cURL: PHP并发最佳实践</a>這篇文章有提到兩種寫法，都是使用<a href="http://se2.php.net/manual/en/function.curl-multi-exec.php">curl_multi_exec</a>去實踐，但是實踐的
方法不太一樣可以仔細研究，在github上面也有些專案例如:<a href="https://github.com/jmathai/php-multi-curl">php-multi-curl</a>，可以看看裡面的原理，以提高
cURL並發下的效能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINE Developer Conference]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/21/line-developer-conference/"/>
    <updated>2014-05-21T21:54:42+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/21/line-developer-conference</id>
    <content type="html"><![CDATA[<p>LINE Developer Conference</p>

<!-- more -->


<p>LINE的開發者聚會，介紹跟LINE有關的東西， 不過很可惜的詳細的內容不會公佈到網路上，而且參加者似乎只有150名，
只能從網路上參加者的文章窺知一二。</p>

<p><a href="http://line-hr.jp/archives/37147547.html">LINE Developer Conference 開催のお知らせ</a><br/>
<a href="http://qiita.com/launcher_test/items/d2d0ddc4e11e1609bb31">LINE Developer Conference (インフラ)</a><br/>
<a href="http://qiita.com/arumani/items/a09d70c5bde1bef3375b">LINE Developer Conference（Day 2 &ndash; プラットフォーム）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pycon 2014 Second Day]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/18/pycon-2014-second-day/"/>
    <updated>2014-05-18T19:30:24+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/18/pycon-2014-second-day</id>
    <content type="html"><![CDATA[<p>記錄一下Pycon 2014第二天(5/18)參加的議程</p>

<!-- more -->


<h3>Keynote: Jessica McKellar</h3>

<p>在世界各地從海底到太空都有人使用到python</p>

<p>data.goc.uk</p>

<p>KLP</p>

<p>python on windows</p>

<p>python on mobile</p>

<p>Can I build mobile apps in python</p>

<p>kivy</p>

<p>程式語言排行</p>

<p>PyPL</p>

<p>說到 emscripten asm.js nodejs</p>

<p>Pythonjs skulpt brvthon  work with js</p>

<p>interactivepython.org</p>

<p>think in python</p>

<p>bnmentp/runestone github</p>

<p>PSF</p>

<p>PyLadies</p>

<p>Sprints</p>

<p>Grants rapberry pi</p>

<h3>What Is Async, How Does It Work, and When Should I Use It?</h3>

<p>pubsub pattern</p>

<p>提到c10k問題 實現非同步的做法</p>

<p>前面大部分偷在講關於非同步的概念</p>

<ol>
<li>twisted</li>
<li>tornado</li>
</ol>


<p>後面開始講 asyncio</p>

<p>Yes:</p>

<ul>
<li>slow backend</li>
<li>websockets</li>
<li>many connections</li>
</ul>


<p>NO:</p>

<ul>
<li>cpu-bound</li>
<li>no async driver</li>
<li>no async expertise</li>
</ul>


<h3>Building a Knowledge Graph &ndash; the new search engine technology</h3>

<p>介紹一下知識圖譜
利用dbpedia(struct data from wiki) 的資料，使用python處理資料在丟在solr裡面。</p>

<p>synonym SynonymFilterFactory</p>

<p>介紹solr本身有的搜尋類型</p>

<p>Data source</p>

<p>data.gov.tw</p>

<p>open api</p>

<h3>How to integrate Python into a Scala stack to build realtime predictive models</h3>

<p>異種語言平台
跟ML沒有太大的關係。</p>

<p>Fliptop machine learning</p>

<ul>
<li>mathout</li>
<li>Weka</li>
<li>Scikit-learn</li>
</ul>


<p>Weka GPL</p>

<p>mathout有些演算法沒有完全實踐</p>

<p>所以使用Scikit-learn，所以就介紹怎麼讓Python跟Scala黏合。</p>

<h4>Jython</h4>

<p>有些使用c寫成的python library就無法使用
JyNI
還是無法支援 Numpy</p>

<h4>Jepp</h4>

<p>會一直創建 python 直譯器</p>

<h4>thrift</h4>

<p>No scala generator
scrooge</p>

<p>auto load balance</p>

<h4>REST API</h4>

<p>bottle</p>

<p>Thrift v.s. REST</p>

<h3>Keynote: Stephen McDonald</h3>

<p>主要在介紹作者寫的mezzanine專案</p>

<p>mezzanine manage cms system</p>

<p>mathspace.co
kou.io</p>

<p>cms > site</p>

<p>講者怎麼建立 mezzanine
<a href="http://bit.ly/MezzBegins">http://bit.ly/MezzBegins</a></p>

<ol>
<li>constraints</li>
<li>simplicity</li>
<li>just django</li>
</ol>


<p>bit.ly/MezzLego</p>

<p>bit.ly/MezzPackages</p>

<h3>以廣告品項為基礎的行動廣告推薦系統: 以 Python Hadoop Streaming 實作</h3>

<p>廣告投放平台</p>

<p>CTR
Click Through rate</p>

<p>Conversion Rate
maximize converstions</p>

<p>最後6分鐘才有重點</p>

<h3>Poster Session</h3>

<p>後面兩場議程都沒去聽，跑去聽Poster session。</p>

<p>跟line的開發人員聊了不少關於line 的架構。<br/>
另外看到<a href="http://raftconsensus.github.io/">raft</a>這個演算法，似乎是為了處理分散式系統一致的問題，另外有聽到JGroups這個工具似乎跟zookeeper是用來
處理類似的東西。</p>
]]></content>
  </entry>
  
</feed>

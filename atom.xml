<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-05-07T22:23:43+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Xsendfile 提升下載性能]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/07/shi-yong-xsendfile-ti-sheng-xia-zai-xing-neng/"/>
    <updated>2014-05-07T21:21:43+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/07/shi-yong-xsendfile-ti-sheng-xia-zai-xing-neng</id>
    <content type="html"><![CDATA[<p>X-sendfile 可以讓Server控制下載的流程，讓開發者可以透過傳送特定的header控制存取檔案的權限。</p>

<!-- more -->


<p>下面三種伺服器支援的header，伺服器不一定會預設支援X-sendfile，需要自己開啟相關的模組。</p>

<table border="1">
 <tr>
  <th>     web server  </th>
  <th>     header  </th>
 </tr>
 <tr>
  <td>     apache  </td>
  <td>     X-Sendfile  </td>
 </tr>
 <tr>
  <td>     nginx  </td>
  <td>     X-Accel-Redirect  </td>
 </tr>
 <tr>
  <td>     lighttpd  </td>
  <td>     X-LIGHTTPD-send-file  </td>
 </tr>
</table>


<p>nginx下 php的寫法。</p>

<pre><code>&lt;?php
$filePath = '/download/example.rar';
header('Content-type: application/octet-stream');
header('Content-Disposition: attachment; filename="' . basename($file) . '"');
header('X-Accel-Redirect: '.$filePath);
</code></pre>

<p>nginx的 config設定。</p>

<pre><code>location /protected/ {
    internal;
    alias   /some/path/; # note the trailing slash
}
</code></pre>

<p>nginx header參數</p>

<pre><code>X-Accel-Limit-Rate: 1024
X-Accel-Buffering: yes|no
X-Accel-Charset: utf-8
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shi Yong Xsendfile Ti Sheng Xia Zai Xing Neng]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/07/shi-yong-xsendfile-ti-sheng-xia-zai-xing-neng/"/>
    <updated>2014-05-07T00:00:00+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/07/shi-yong-xsendfile-ti-sheng-xia-zai-xing-neng</id>
    <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"><style>html { font-size: 100%; overflow-y: scroll; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; }

body{
  color:#444;
  font-family:Georgia, Palatino, &#8216;Palatino Linotype&#8217;, Times, &#8216;Times New Roman&#8217;,
              &#8220;Hiragino Sans GB&#8221;, &#8220;STXihei&#8221;, &#8220;微软雅黑&#8221;, serif;
  font-size:12px;
  line-height:1.5em;
  background:#fefefe;
  width: 45em;
  margin: 10px auto;
  padding: 1em;
  outline: 1300px solid #FAFAFA;
}

a{ color: #0645ad; text-decoration:none;}
a:visited{ color: #0b0080; }
a:hover{ color: #06e; }
a:active{ color:#faa700; }
a:focus{ outline: thin dotted; }
a:hover, a:active{ outline: 0; }

span.backtick {
  border:1px solid #EAEAEA;
  border-radius:3px;
  background:#F8F8F8;
  padding:0 3px 0 3px;
}

::-moz-selection{background:rgba(255,255,0,0.3);color:#000}
::selection{background:rgba(255,255,0,0.3);color:#000}

a::-moz-selection{background:rgba(255,255,0,0.3);color:#0645ad}
a::selection{background:rgba(255,255,0,0.3);color:#0645ad}

p{
margin:1em 0;
}

img{
max-width:100%;
}

h1,h2,h3,h4,h5,h6{
font-weight:normal;
color:#111;
line-height:1em;
}
h4,h5,h6{ font-weight: bold; }
h1{ font-size:2.5em; }
h2{ font-size:2em; border-bottom:1px solid silver; padding-bottom: 5px; }
h3{ font-size:1.5em; }
h4{ font-size:1.2em; }
h5{ font-size:1em; }
h6{ font-size:0.9em; }

blockquote{
color:#666666;
margin:0;
padding-left: 3em;
border-left: 0.5em #EEE solid;
}
hr { display: block; height: 2px; border: 0; border-top: 1px solid #aaa;border-bottom: 1px solid #eee; margin: 1em 0; padding: 0; }


pre , code, kbd, samp { 
  color: #000; 
  font-family: monospace; 
  font-size: 0.88em; 
  border-radius:3px;
  background-color: #F8F8F8;
  border: 1px solid #CCC; 
}
pre { white-space: pre; white-space: pre-wrap; word-wrap: break-word; padding: 5px 12px;}
pre code { border: 0px !important; padding: 0;}
code { padding: 0 3px 0 3px; }

b, strong { font-weight: bold; }

dfn { font-style: italic; }

ins { background: #ff9; color: #000; text-decoration: none; }

mark { background: #ff0; color: #000; font-style: italic; font-weight: bold; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }
sup { top: -0.5em; }
sub { bottom: -0.25em; }

ul, ol { margin: 1em 0; padding: 0 0 0 2em; }
li p:last-child { margin:0 }
dd { margin: 0 0 0 2em; }

img { border: 0; -ms-interpolation-mode: bicubic; vertical-align: middle; }

table { border-collapse: collapse; border-spacing: 0; }
td { vertical-align: top; }

@media only screen and (min-width: 480px) {
body{font-size:14px;}
}

@media only screen and (min-width: 768px) {
body{font-size:16px;}
}

@media print {
  * { background: transparent !important; color: black !important; filter:none !important; -ms-filter: none !important; }
  body{font-size:12pt; max-width:100%; outline:none;}
  a, a:visited { text-decoration: underline; }
  hr { height: 1px; border:0; border-bottom:1px solid black; }
  a[href]:after { content: &#8221; (&#8221; attr(href) &#8220;)&#8221;; }
  abbr[title]:after { content: &#8221; (&#8221; attr(title) &#8220;)&#8221;; }
  .ir a:after, a[href^=&#8221;javascript:&#8221;]:after, a[href^=&#8221;#&#8221;]:after { content: &#8220;&#8221;; }
  pre, blockquote { border: 1px solid #999; padding-right: 1em; page-break-inside: avoid; }
  tr, img { page-break-inside: avoid; }
  img { max-width: 100% !important; }
  @page :left { margin: 15mm 20mm 15mm 10mm; }
  @page :right { margin: 15mm 10mm 15mm 20mm; }
  p, h2, h3 { orphans: 3; widows: 3; }
  h2, h3 { page-break-after: avoid; }
}
</style><title>2014-05-07-shi-yong-xsendfile-ti-sheng-xia-zai-xing-neng</title></head><body><hr />
<p>layout: post
title: &#8220;使用 xsendfile 提升下載性能&#8221;
date: 2014-05-07 21:21:43 +0800
comments: true
categories: [&#8220;server&#8221;]</p>
<hr /></body></html>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Old IE Support Html5 Tag]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/04/old-ie-support-html5-tag/"/>
    <updated>2014-05-04T20:28:03+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/04/old-ie-support-html5-tag</id>
    <content type="html"><![CDATA[<p>舊版本IE支援 html5的方法<a href="https://github.com/aFarkas/html5shiv">html5shiv</a></p>

<!-- more -->


<pre><code>&lt;!--[if lt IE 9]&gt;
    &lt;script src="bower_components/html5shiv/html5shiv.js"&gt;&lt;/script&gt;
&lt;![endif]--&gt;
</code></pre>

<p>jQuery 有 jQuery.support.html5Clone 會檢查閱覽器是否支援html5的tag，在
jQuery 1.9以前的版本有jQuery.clean 會負責處理舊版IE在插入新的tag會遇到的issue。</p>

<p>另外還有<code>display:inline</code>的問題，在閱覽器在解釋不支援的tag時樣式會預設為<code>display:inline</code>
所以要Reset CSS。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Core 1.9 Upgrade Guide]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/03/jquery-core-1-dot-9-upgrade-guide/"/>
    <updated>2014-05-03T19:07:00+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/03/jquery-core-1-dot-9-upgrade-guide</id>
    <content type="html"><![CDATA[<p>jQuery升級到1.9需要注意的事項。</p>

<!-- more -->


<p>詳細的內容在官網的<a href="http://jquery.com/upgrade-guide/1.9/">1.9 Upgrade Guide</a>有詳細說明，目前網站最常用的通常是1.7的版本，
如果要遷移到1.9的版本要注意一下，因為1.9版本改變幅度蠻大的，之前在工作中一些寫法和
plugin就沒有辦法使用就降級到1.8版本，不過也能夠使用<a href="https://github.com/jquery/jquery-migrate">jquery-migrate</a>讓開發者使用
以前的特性，但是要注意有些特性就算裝上plugin也無法復原。</p>

<h2>記錄一下工作上影響比較大的部分</h2>

<ol>
<li>拿掉.toggle(function, function, &hellip; ) 的用法，</li>
<li>拿掉 jQuery.browser() 使用 Modernizr偵測閱覽器是否支援這個功能比較好。</li>
<li>拿掉 live換用 on 。</li>
<li>拿掉 die 換用 off 。</li>
<li>Ajax 的全域事件要綁在document上面。</li>
<li>jQuery(htmlString) versus jQuery(selectorString)</li>
<li>.attr() versus .prop()</li>
<li>$(&ldquo;input&rdquo;).attr(&ldquo;type&rdquo;, newValue) in oldIE</li>
<li>&ldquo;hover&rdquo; pseudo-event</li>
<li>移除一些jQuery沒有寫出來了函式拿掉 例如:jQuery.clean()。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[團隊管理工具清單]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/02/tuan-dui-guan-li-gong-ju-qing-dan/"/>
    <updated>2014-05-02T23:24:57+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/02/tuan-dui-guan-li-gong-ju-qing-dan</id>
    <content type="html"><![CDATA[<p>記錄一下其他公司使用的開發工具。</p>

<!-- more -->


<ol>
<li><a href="https://basecamp.com/">Basecamp</a></li>
<li><a href="http://airbrake.io/">Airbrake</a></li>
<li><a href="http://newrelic.com/">New Relic</a></li>
<li><a href="https://codeclimate.com/">Code Climate</a></li>
<li><a href="https://saucelabs.com/">Sauce Labs</a></li>
<li><a href="http://www.zabbix.com/">Zabbix</a></li>
<li><a href="https://circleci.com/">CircleCI</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[五月書單]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/30/wu-yue-shu-dan/"/>
    <updated>2014-04-30T23:36:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/30/wu-yue-shu-dan</id>
    <content type="html"><![CDATA[<p>記錄五月要看完的書單。</p>

<!-- more -->


<ol>
<li>Testable.JavaScript</li>
<li>Google軟體測試之道</li>
<li>JavaScript The Definitive Guide</li>
<li>JavaScript Patterns</li>
<li>Learning JavaScript Design Patterns</li>
<li>社群網站的資料探勘</li>
<li>jQuery技术内幕：深入解析jQuery架构设计与实现原理</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中文分词的最大匹配法]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/26/zhong-wen-fen-ci-de-zui-da-pi-pei-fa/"/>
    <updated>2014-04-26T22:49:17+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/26/zhong-wen-fen-ci-de-zui-da-pi-pei-fa</id>
    <content type="html"><![CDATA[<p>記錄一下中文分詞的入門演算法。<br/>
1. 最大正向匹配
2. 最大逆向匹配
3. 雙向匹配</p>

<!-- more -->


<p>中文分詞一開始是使用詞典作分詞，在分詞的過程中主要有幾個原則:  <br/>
1. 切出來的詞彙越長越好，越長就能代表越複雜的意思，句子的意思也能更明確。<br/>
2. 切出來的分詞結果通常會有一些停用詞(stop words)或是詞典裡沒有的詞導致會有多餘的字出現，那類的字越少越好。</p>

<p>然後最上面提到的三個演算法其實都是對詞典作匹配，只是是從句子彺前往後匹配或者兩種方法都使用，之後有空用程式語言實踐一下演算法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyconf 2014 Second Day]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/26/rubyconf-2014-second-day/"/>
    <updated>2014-04-26T20:29:49+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/26/rubyconf-2014-second-day</id>
    <content type="html"><![CDATA[<p>記錄一下rubyconf 2014第二天(4/26)參加的議程</p>

<!-- more -->


<h3>Cores unleashed &ndash; Exploiting Parallelism in Ruby with STM (and a new VM)</h3>

<p><a href="https://speakerdeck.com/brucehsu/rubyconf-dot-tw-2014-cores-unleashed-exploiting-parallelism-in-ruby-with-stm">slide</a></p>

<h3>How the Principles of Ruby Inspired the Rails Girls Community</h3>

<p>兩位講者如何認識，並且介紹Rails Girls社群怎麼成長的。</p>

<h3>Ruby on Bioinformatics</h3>

<p>使用ruby 處理生物資訊，列了不少gem但是有的是去使用其他語言的library吧，裡面也有提到使用neo4j處理
個人的健康資料，不過跟ruby沒有太大的關係，現在比較常用還是perl和python吧。</p>

<h3>the Guide to know Ruby implementation for non-C language programer</h3>

<p>講者一開始說因為她的先生是寫ruby的programmer接觸ruby，之後就開始研究Ruby裡面的架構，
講者介紹幾個方法去研究裡面的原始碼。</p>

<h3>Growing Up &ndash; Bringing Concurrency to Ruby</h3>

<p>一開始介紹jruby和jvm，然後說明 prcoess-level和thread-level的做法，concurency的法則和
實現介紹一些實現no-block的library。</p>

<h3>Extreme Makeover &ndash; Rubygems Edition</h3>

<p>bundle，用來管理gem的依賴性，講者講了一些過去bundle的issue，ssl issue，搜尋Gem的效率過低，加上CDN，
加入一些api，建立新的index。</p>

<h3>sweaters as a service &ndash; adventures in electronic knitting</h3>

<p>講者建立一個編織機器，只要上傳圖檔就可以編織出一個圖案，似乎是使用Ruby去控制不過沒有看到整個程式碼。</p>

<h3>Improve and refactor ruby code easier</h3>

<p>利用 synvert工具作ruby 的重構。</p>

<h3>lightning talk</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socket.io Migrating to 1.0]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/25/socket-dot-io-migrating-to-1-dot-0/"/>
    <updated>2014-04-25T22:47:54+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/25/socket-dot-io-migrating-to-1-dot-0</id>
    <content type="html"><![CDATA[<p>socket.io 已經有1.0版本了，所以免不了會有些大改動，wiki上面有一篇<a href="https://github.com/LearnBoost/socket.io/wiki/Migrating-to-1.0">Migrating-to-1.0</a>可以參考，這邊就記錄
目前程式升級有影響的部分。</p>

<!-- more -->


<h2>Authentication differences</h2>

<p>以前在作認證的時候是透過<code>authorization</code>這個事件，在建立socket.io連線根據cliet端傳回的參數作處理。</p>

<pre><code>io.set('authorization', function (handshakeData, callback) {

});
</code></pre>

<p>現在有&#8217;io.use()&lsquo;這個方法，在socket建立的時候執行傳入的函式。</p>

<pre><code>io.use(function(socket, next) {
    var handshakeData = socket.request;
    // make sure the handshake data looks good as before
    // if error do this:
        // next(new Error('not authorized');
    // else just call next
    next();
});
</code></pre>

<h2>Starting the server</h2>

<p>以前會使用listen但是在1.0版本就不用了。</p>

<pre><code>var io = require('socket.io').listen(server);
</code></pre>

<p>vs</p>

<pre><code>var io = require('socket.io');
var socket = io({ /* options */ })
</code></pre>

<h2>Exposed Events</h2>

<p>似乎有些舊版的事件在新版(1.0)就消失或是使用其他事件取代。<br/>
裡面有提到一個socket.io-client manager (lib/manager.js)值得研究，以前沒有注意這個東西。</p>

<h2>Configuration differences</h2>

<p>以前設定socket.io的參數是用set之後是直接丟給socket.io。</p>

<pre><code>io.set(
    'store' ,new RedisStore({
        redisPub : pub,
        redisSub : sub,
        redisClient : client
    })
);
</code></pre>

<p>vs</p>

<pre><code>var socket = require('socket.io')({
    // options go here
});
</code></pre>

<h2>socket.io-adapter</h2>

<p>原本在0.9版本之前有<code>store</code>的選項，到1.0版本之後就拿掉了換成<code>adapter</code>，然後官方有放出<a href="https://github.com/LearnBoost/socket.io-adapter">socket.io-adapter</a>讓開發者可以
自行擴展，另外有一個<a href="https://github.com/Automattic/socket.io-redis">socket.io-redis</a>是官方放出來的參考範例，使用方法如下面所述。</p>

<pre><code>var socketio = require('socket.io');
var RedisStore = require('socket.io-redis');
var io = socketio(3000, {});
io.adapter(RedisStore({ host: host, port: port }));
</code></pre>

<p>這邊有一個參考的簡報<a href="http://www.slideshare.net/lagos.jp/socketio-10-25438209">socketio-10-25438209</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyconf 2014 First Day]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/25/rubyconf-2014-first-day/"/>
    <updated>2014-04-25T20:56:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/25/rubyconf-2014-first-day</id>
    <content type="html"><![CDATA[<p>記錄一下rubyconf 2014第一天(4/25)參加的議程</p>

<!-- more -->


<h3>Understanding Typing, Understanding Ruby</h3>

<p>關於靜態型別跟動態型別語言各自會遇到的問題，這場收益蠻多了前面提到一些以前型別的問題
，並且也提到其他語言在處理型別的方法。</p>

<h3>RubyMotion Gets A Cool New Friend: mruby on iOS</h3>

<p>使用ruby開發ios app，以前孤陋寡聞沒看過這個工具以後有機會可以拿來試試看。</p>

<h3>Practice: Refactoring with tests</h3>

<p>在講重構，不過前面講很多重構很重要然後要需要好好測試，後面就只有講一點點ruby裡面
要怎麼做&hellip;.</p>

<h3>Matz: Keynote</h3>

<p>ruby的生父的議程</p>

<h3>Teo-Happy Teams</h3>

<p>怎樣成為快樂團隊，議程中提到不少常見但是沒有實踐的開發方法或是。</p>

<h3>Tell a good story with Ruby</h3>

<p>講者學習ruby的過程和建構一個ruby程式</p>

<h3>10 Things to Make API Users Like You</h3>

<p>怎麼設計API，聽了之後沒有比較新穎的想法，大部分在以前設計API就有看過了，不過比較有共鳴的是
產生api文件，以前都是手動一個個寫說明文件常常會有參數或是輸出值對不上的問題。</p>

<h3>Make Your Rails Backstage Better</h3>

<p>講者說一下他當初開發後台的經驗，從原本使用gem到自製後台，不過有可能我使用rails沒有多久所有沒有什麼心得。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[socket.io Port問題]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/24/socket-dot-io-portwen-ti/"/>
    <updated>2014-04-24T23:09:10+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/24/socket-dot-io-portwen-ti</id>
    <content type="html"><![CDATA[<p>前端連接socket.io server遇到port問題的解決方法。</p>

<!-- more -->


<h3>haproxy</h3>

<p><a href="http://blog.davidmisshula.com/blog/2013/02/04/configure-haproxy-to-scale-multiple-nodes-with-stickiness-and-ssl/">configure-haproxy-to-scale-multiple-nodes-with-stickiness-and-ssl</a> <br/>
<a href="http://blog.carbonfive.com/2013/05/02/using-haproxy-with-socket-io-and-ssl/">using-haproxy-with-socket-io-and-ssl</a>  <br/>
這個方法有在Centos上面實作過是可行的，網路也有不少設定可以參考，不過當初只有測試websocket的方法。</p>

<h3>nginx</h3>

<p><a href="http://blog.mixu.net/2011/08/13/nginx-websockets-ssl-and-socket-io-deployment/">nginx-websockets-ssl-and-socket-io-deployment</a><br/>
nginx在1.3之後支援websocket可以最為反向代理，這個方法沒有實測過。</p>

<h3>透過改寫xhr-polling</h3>

<p><a href="http://stephenbelanger.com/2011/09/21/how-to-make-socket-io-work-behind-nginx-mostly/">how-to-make-socket-io-work-behind-nginx-mostly</a>  <br/>
這個方法是改寫xhr-polling的方法，前端就可以不用加上port就可以直接連接server，但是就不能使用其他的
連接方法了吧?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-Flow]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/24/git-flow/"/>
    <updated>2014-04-24T21:55:19+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/24/git-flow</id>
    <content type="html"><![CDATA[<p>在工作上使用git已經有一段時間了，跟同事一起開發專案時常有個問題，每個人在撰寫新功能時只有本人才知道
這個分支裡面有實現哪些功能，通常快到上線的時候就大家你併我你併他的分支後在推上去，沒有一個工作流程可以
遵循，之後有看到有篇文章描寫一個git工作流程:<a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>。</p>

<!-- more -->


<p><a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>裡面主要敘述如何管理git的分支，可以做為一個團隊如何實踐專案工作
流程的參考，然後最近才發現他有一個管理工具<a href="https://github.com/danielkummer/git-flow-cheatsheet">git-flow</a>可以更容易去實踐這套工作流程，這邊也有篇管理工具的
<a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html">介紹</a>，以後如果有空在推廣給同事使用吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown參考資料]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/23/markdowncan-kao-zi-liao/"/>
    <updated>2014-04-23T22:48:47+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/23/markdowncan-kao-zi-liao</id>
    <content type="html"><![CDATA[<p>markdown 是一個輕量級標記語言，讓使用者容易撰寫一份格式化的文件，不少網站都能支援markdown的語法例如像是Github，
語法規則可以參考<a href="http://markdown.tw/">markdown.tw</a>，原本我是使用sublime text搭配插件撰寫markdown但是沒辦法立即看到結果，就另外使用
<a href="http://markdownpad.com/">markdownPad 2</a>撰寫文章，不過最近發現一個開源專案<a href="https://github.com/joemccann/dillinger">dillinger</a>讓可以直接在閱覽器上編輯markdown文件，也能夠支援一
些雲端硬碟存取文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Information Retrieval]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/23/information-retrieval/"/>
    <updated>2014-04-23T21:42:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/23/information-retrieval</id>
    <content type="html"><![CDATA[<p><a href="IR">Information_retrieval</a>是指使用者在搜尋資訊的過程，而搜尋的資料有文字、圖像、影片、聲音，建構一個IR System包括以下幾種領域:</p>

<!-- more -->


<ol>
<li>自然語言處理</li>
<li>計算語言學</li>
<li>訊號處理</li>
<li>認知心理學</li>
<li>模式識別</li>
<li>Metadata</li>
</ol>


<h3>參考資料</h3>

<ol>
<li><a href="http://nlp.stanford.edu/IR-book/">Introduction to Information Retrieval </a></li>
<li><a href="http://www.mir2ed.org/">Modern Information Retrieval</a></li>
<li><a href="http://nlg.csie.ntu.edu.tw/courses/IR/IR2009.html">IR course</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yeoman Tool]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/22/yeoman-tool/"/>
    <updated>2014-04-22T23:37:09+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/22/yeoman-tool</id>
    <content type="html"><![CDATA[<p><a href="http://yeoman.io/">Yeoman</a> 是一個開發工具，讓使用者能夠建立自己的專案環境，之前在使用Phalcon的時候都需要重新建立開發環境，
之前有看到利用Yeoman建立Angularjs的專案現在就在網路上看到<a href="https://www.npmjs.org/package/generator-phalcon">generator-phalcon</a>建立專案。</p>

<!-- more -->


<h3>Yemoan 內容</h3>

<ol>
<li>yo</li>
<li>Grunt</li>
<li>Bower</li>
</ol>


<h3>安裝Yeoman</h3>

<pre><code>    npm install -g yo
</code></pre>

<h3>建立angular的專案</h3>

<pre><code>    npm install -g generator-angular  
    yo angular                         
    bower install angular-ui           
    grunt test                         
    grunt server                       
    grunt                              
</code></pre>

<h3>安裝Phalcon 模板</h3>

<pre><code>    npm install generator-phalcon
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用git做程式碼debug]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/20/shi-yong-gitzuo-cheng-shi-ma-debug/"/>
    <updated>2014-04-20T17:02:31+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/20/shi-yong-gitzuo-cheng-shi-ma-debug</id>
    <content type="html"><![CDATA[<p>專案在多人協作的環境下有時會出現不明原因的bug，通常是因為撰寫的人沒有發現並且沒有經過良好的測試並且又併入主分支，
這導致bug隱藏在程式碼裡面，這邊就記錄一下平常使用git來找出問題點的方法。</p>

<!-- more -->


<p>通常如果知道出錯在哪個檔案可以透過git blame的指令找出此檔案最後修改的人是誰並且還可以得知最後的commit，並且還能夠
下條件限定在某些行數，下面的指令可以顯示 index.php 100行到150行之間的資訊另外我看可以下 <code>-C</code> 的選項可以顯示這段
程式碼的原始出處不過我一般沒有在使用。</p>

<pre><code>    git blame -L 100,150 index.php
</code></pre>

<p>另外一種情形是不知道問題是出錯在哪一個部分，這時可以使用<code>git bisect</code>，這個指令可以讓使用者決定從哪邊開始是運作良好
的commit，然後現在是有問題的commit，接下來會顯示從正常到有問題的commit之間還有多少筆commit並且開一個<code>no branch</code>的
分支使用者讓測試，如果目前的commit是測試出來是正常的狀態便可以下<code>git bisect good</code>告訴 bisect目前的commit是正確的，
如果是錯誤的就可以下<code>git bisect bad</code>說目前是錯誤的狀態，直到確定是在哪一筆commit出錯的，結束後下<code>git bisect reset</code>
就可以回到原本的開發環境。</p>

<pre><code>    git bisect start 開始執行bisect
    git bisect bad   目前的commit是有問題的
    git bisect good [commit] 目前已知的正常狀態是哪一個commit
    git bisect reset 結束 bisect
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 偏好設定]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/20/git-pian-hao-she-ding/"/>
    <updated>2014-04-20T10:22:01+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/20/git-pian-hao-she-ding</id>
    <content type="html"><![CDATA[<p>記錄從網路上看到關於git有用的設定。</p>

<!-- more -->


<h4>1. git 加上顏色</h4>

<pre><code>    git config --global color.ui true
</code></pre>

<h4>2. git 自動補完指令和分支名</h4>

<p>下載<a href="https://github.com/git/git/blob/master/contrib/completion/git-completion.bash">git-completion.bash </a>，然後在.bashrc 加入下面這段程式碼然後讓新的Bash生效就可以了。</p>

<pre><code>    if [ -f ~/.git-completion.bash ]; then
        . ~/.git-completion.bash
    fi
</code></pre>

<h4>3. 顯示目前在哪個分支</h4>

<p>下載<a href="https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh">git-prompt.sh</a>，然後在.bashrc加上下面指令，</p>

<pre><code>    source ~/.git-prompt.sh
    export PS1='$(__git_ps1 "(%s)") \W $'
</code></pre>

<p>之後就可以在git專案底下看到Bash顯示在哪個專案和分支。</p>

<pre><code>    (master) Lucene $
</code></pre>

<h4>4. git alias</h4>

<pre><code>    git config --global alias.check checkout
    git config --global alias.cmt commit
</code></pre>

<h4>5. 設定git使用的編輯器和diff工具</h4>

<p>下面的設定可以在~/.gitconfig修改。</p>

<pre><code>    git config --global core.editor
    git config --global diff.tool 
    git config --global merge.tool 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LSI 和 SVD]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/19/lsi-he-svd/"/>
    <updated>2014-04-19T19:44:28+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/19/lsi-he-svd</id>
    <content type="html"><![CDATA[<p>記錄在處理nlp問題時看到的專有名詞。</p>

<!-- more -->


<p><a href="http://en.wikipedia.org/wiki/Latent_semantic_indexing">Latent semantic indexing</a> (LSI) 照字面翻成潛在語義索引，一般搜尋引擎透過關鍵字索引文件，但是LSI是利用詞彙在不同語境下有不同語義去搜尋，
因為使用者在搜尋文件時有可能因為一詞多義讓搜尋結果夾雜多餘的文件，一義多詞則會讓一些文件沒有搜尋到的問題。</p>

<p><a href="http://en.wikipedia.org/wiki/Latent_semantic_analysis">Latent semantic analysis</a> (LSA) 潛在語義學，一般語義學主要研究詞彙的同義、相似、反義詞，而LSA主要是研究詞彙在文件中的關係，
LSI假設詞彙在類似的文句中會有相近的意思，LSI利用tf-idf建立一個大型矩陣，行為詞列為文件值為tf-idf算出的權值。</p>

<p><a href="http://en.wikipedia.org/wiki/Singular_value_decomposition">Singular value decomposition</a> (SVD) 奇異值分解，一種矩陣分解方法，LSA使用SVD讓原本很大的矩陣降維。</p>

<p><a href="http://en.wikipedia.org/wiki/Tf%E2%80%93idf">tf-idf</a> 找出一個詞彙在一個文件中的重要程度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solr With Mongo-connector]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/19/solr-with-mongo-connector/"/>
    <updated>2014-04-19T15:51:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/19/solr-with-mongo-connector</id>
    <content type="html"><![CDATA[<p>solr是一款開源的搜尋引擎，可以對各種資料索引，之前使用solr的Data-Import-Handler功能對Mysql作搜尋然後設定排程
定期將mysql資料丟到solr裡面，另外也有透過Mysql trigger和udf讓一些需要即時同步的資料。</p>

<!-- more -->


<p>solr與Mysql通訊是透過jdbc抓取資料庫裡的資料，而mongodb似乎也有類似的東西例如<a href="https://github.com/erh/mongo-jdbc">mongo-jdbc</a>和<a href="http://www.unityjdbc.com/mongojdbc/mongo_jdbc.php">JDBC Driver for MongoDB</a>，
<a href="https://github.com/erh/mongo-jdbc">mongo-jdbc</a>網路有人使用過雖可以讓solr進行索引但是如果要跑增量索引就會出錯，<a href="http://www.unityjdbc.com/mongojdbc/mongo_jdbc.php">JDBC Driver for MongoDB</a>則沒看到有人使用在
solr上的心得，之後有時間在測試。</p>

<p>mongodb本身則有<a href="https://github.com/10gen-labs/mongo-connector">mongo-connector</a>這個解法，主要是利用Mongodb的oplog(類似Mysql的binlog)會記錄repset之間的操作，如此一來
讓solr透過oplog就可以去更新索引並且由於oplog是即時的讓solr能更即時更新資料。</p>

<p>如果要使用<a href="https://github.com/10gen-labs/mongo-connector">mongo-connector</a>首先要打開replset 產生oplog然後安裝mongo-connector，不過遇到一個奇妙的問題透過pip安裝後沒有直接
連結到bin下之後透過git安裝就沒有問題了，要使用replset很簡單，就把/etc/mongodb.conf下面這段設定打開，</p>

<pre><code># in replica set configuration, specify the name of the replica set
replSet = example
</code></pre>

<p>之後在mongodb的shell裡下rs.initiate()指令即可，本台mongodb就變成PRIMARY了這時也可以加入其他台mongodb作replication，不過本次
主要是要使用oplog讓solr導入資料製作索引就不需要加入其他台server了。</p>

<p>接下來將照著github上Usage With Solr的說明使用即可，另外似乎可以搭配tailable cursor做出solr即時更新索引，之後在測試看看先加上
其他中文分詞分析中文資料。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[四月書單]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/17/si-yue-shu-dan/"/>
    <updated>2014-04-17T22:54:37+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/17/si-yue-shu-dan</id>
    <content type="html"><![CDATA[<p>記錄四月要看完的書單。</p>

<!-- more -->


<ol>
<li>The Clean Coder無暇的程式碼</li>
<li>The Clean Coder無暇的程式碼 番外篇</li>
<li>解密搜尋引擎 技術實戰</li>
<li>易讀程式之美學－提升程式碼可讀性的簡單法則 (The Art of Readable Code)</li>
<li>BAD DATA 技術手冊</li>
<li>Interactive.Data.Visualization.for.the.Web</li>
</ol>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2015-04-06T23:00:44+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nsq: Message]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/06/nsq/"/>
    <updated>2015-04-06T22:33:54+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/06/nsq</id>
    <content type="html"><![CDATA[<!-- more -->


<p>紀錄之前看過的一篇 slide <a href="http://www.slideshare.net/guregu/nsqcentric-architecture-gocon-autumn-2014">NSQ-Centric Architecture (GoCon Autumn 2014)</a> ，後端是用 <a href="https://github.com/bitly/nsq">nsq</a> 這個由 golang 撰寫
的 <code>message server</code> ，前端使用 react 這個 framework 建立一個聊天 APP</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP : Pthreads Library]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/05/pthreads/"/>
    <updated>2015-04-05T21:28:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/05/pthreads</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li><a href="https://computing.llnl.gov/tutorials/pthreads/">pthreads</a></li>
<li><a href="https://github.com/krakjoe/pthreads">php pthreads</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TLS 的效能跟問題]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/04/tls-problem/"/>
    <updated>2015-04-04T23:17:38+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/04/tls-problem</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://istlsfastyet.com/">TLS has exactly one performance problem: it is not used widely enough</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook 怎麼擴展 Memcached]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/03/scaling-memcache-at-facebook/"/>
    <updated>2015-04-03T23:01:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/03/scaling-memcache-at-facebook</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://www.usenix.org/conference/nsdi13/technical-sessions/presentation/nishtala">Scaling Memcache at Facebook</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phalcon 設定讀寫分離功能]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/02/phalcon-master-slave/"/>
    <updated>2015-04-02T23:29:18+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/02/phalcon-master-slave</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近需要建立 phalcon 連結 mysql 的專案，然後手上有一個 mysql cluster 的設備，所以
想要在 phalcon 設定讀寫分離的功能，讀跟寫是連接不同的資料庫位置，最後在 phalcon 的文檔
<a href="https://phalcon-php-framework-documentation.readthedocs.org/en/latest/reference/models.html?highlight=selectReadConnection#setting-multiple-databases">setting-multiple-databases</a> 有說明怎麼設定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OOCSS 相關資料]]></title>
    <link href="http://fubuki.github.io/blog/2015/04/01/our-best-practices-are-killing-us/"/>
    <updated>2015-04-01T23:35:28+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/04/01/our-best-practices-are-killing-us</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li><a href="https://github.com/stubbornella/oocss/wiki">oocss</a></li>
<li><a href="http://www.slideshare.net/stubbornella/our-best-practices-are-killing-us">Our Best Practices Are Killing Us</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[四月書單]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/31/2015-04-book-list/"/>
    <updated>2015-03-31T22:05:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/31/2015-04-book-list</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li>Redis 設計與實現</li>
<li>Think Complexity</li>
<li>beautiful code</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Radix Tree]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/30/radix-tree/"/>
    <updated>2015-03-30T22:03:10+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/30/radix-tree</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在看 nginx 和紅黑樹時看到一種名叫 <code>radix tree</code> 的多元搜尋樹，後來了解到在 linux 使用 <code>radix tree</code> 管理 cache，
linux 裡面相關的程式碼在 <a href="https://github.com/torvalds/linux/blob/master/lib/radix-tree.c">radix-tree.c</a> 裡面。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached-tool]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/29/memcached-tool/"/>
    <updated>2015-03-29T23:19:35+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/29/memcached-tool</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://github.com/memcached/memcached/blob/master/scripts/memcached-tool">memcached-tool</a> 使用 perl 寫成的腳本，用來分析 memcachde 的運行狀況。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached 的 Lru_crawler]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/28/memcached-lru/"/>
    <updated>2015-03-28T22:02:57+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/28/memcached-lru</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在看 <code>memcached</code> 的原始碼看到一個  <code>lru_crawler</code> 的東西，這個東西是為了清除過期的資料存在的，但是一般是不會啟動這個功能，
會有這東西是因為 <code>memcached</code> 的資料在過期的時候不會立即清除，因此記憶體空間不會立即釋放，但是可以透過 <code>lru_crawler</code> 去遍歷 item
然後清除過期的 item。</p>

<p>另外 <code>memcached</code> 的官網有個有去的訊息 <a href="https://github.com/memcached/memcached/pull/97">Work In Progress LRU rework</a>，是替換關於 LRU 的部分目前在測試中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MADV_DONTNEED 和 MADV_FREE]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/27/madv-dontneed-madv-free/"/>
    <updated>2015-03-27T03:05:32+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/27/madv-dontneed-madv-free</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在看 firefox 記憶體管理的程式碼時看到下面兩個名詞。</p>

<ol>
<li>MADV_DONTNEED 會馬上回收指定的記憶體區塊</li>
<li>MADV_FREE kernel 會延遲回收那些頁面</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convolutional Neural Network]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/26/convolutional-neural-network/"/>
    <updated>2015-03-26T23:09:25+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/26/convolutional-neural-network</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://en.wikipedia.org/wiki/Convolutional_neural_network">Convolutional neural network</a> 為 Deep Learngin 演算法，最近在做圖像處理的時候用到。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[何謂 AOSP, AOKP, CM ROM]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/25/aosp-aokp-cm-rom/"/>
    <updated>2015-03-25T23:03:32+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/25/aosp-aokp-cm-rom</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li><a href="https://source.android.com/">AOSP</a></li>
<li><a href="https://github.com/AOKP">AOKP</a></li>
<li><a href="http://www.cyanogenmod.org/">CM ROM</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Push 出現 Rpc Error]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/24/git-push-error-rpc/"/>
    <updated>2015-03-24T21:33:53+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/24/git-push-error-rpc</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在推專案上 Github 的時候出現 rpc error 的問題，後來找網路上的解法是說
 Buffer 開太小了所以需要增加，增加的方法是用下面的指令。</p>

<pre><code>git config http.postBuffer xxxxxxxxx
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手機上的 WebView 性能]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/23/60-fps-mobile-web/"/>
    <updated>2015-03-23T23:32:59+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/23/60-fps-mobile-web</id>
    <content type="html"><![CDATA[<!-- more -->


<p>[60fps on the mobile web] 關於手機上使用 WebView 建立 APP 需要注意的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kanban 工具:libreboard]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/22/libreboard/"/>
    <updated>2015-03-22T22:38:57+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/22/libreboard</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在網路上有 Trello 可以使用，但是我想在內部建立一個類似的網站，於是找到
<a href="http://git.libreboard.com/libreboard/libreboard/tree/master">libreboard</a> 這個專案，安裝上可以直接透過 docker 架設。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hg-git]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/21/hg-git/"/>
    <updated>2015-03-21T22:20:27+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/21/hg-git</id>
    <content type="html"><![CDATA[<!-- more -->


<p>目前手上有些別人專案是用 hg 作版本控管的，但是我想推到 Github 上面做備份，看到有一個 <a href="https://github.com/schacon/hg-git">hg-git</a> 的 plugin 可以將
使用 hg 的專案推到 Github 上面。</p>

<pre><code>easy_install hg-git
vim ~/.hgrc

[extensions]
hggit = [path-to]/hg-git/hggit
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S-expression]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/20/s-expression/"/>
    <updated>2015-03-20T23:07:41+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/20/s-expression</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在學習 LISP 的時候看到的 <a href="http://en.wikipedia.org/wiki/S-expression">S-expression</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSP Concurrency Model]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/19/csp/"/>
    <updated>2015-03-19T01:35:15+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/19/csp</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在學習 golang 順便了解一下跟 erlang 的不同，然後看到了 golang 是採用 CSP 系統，
之前已經看過了 Actor 系統，這邊就去了解關於 CSP 系統。</p>

<p><code>Communicating sequential processes</code> (CSP) <a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes">wiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ketama Hash Algorithm]]></title>
    <link href="http://fubuki.github.io/blog/2015/03/18/ketama/"/>
    <updated>2015-03-18T22:55:48+08:00</updated>
    <id>http://fubuki.github.io/blog/2015/03/18/ketama</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在研究在 memcached client 端使用 hash 將 key-value 分散到其他機器達到分布式的效果，在 php 的 memcached 就有類似的做法，
所以研究了一下原始碼和官方文件，發現是用一種叫做 <a href="https://github.com/RJ/ketama">ketama</a> 的 consistent hashing 。</p>
]]></content>
  </entry>
  
</feed>

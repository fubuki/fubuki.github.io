<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-04-29T22:44:45+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[中文分词的最大匹配法]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/26/zhong-wen-fen-ci-de-zui-da-pi-pei-fa/"/>
    <updated>2014-04-26T22:49:17+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/26/zhong-wen-fen-ci-de-zui-da-pi-pei-fa</id>
    <content type="html"><![CDATA[<p>記錄一下中文分詞的入門演算法。<br/>
1. 最大正向匹配
2. 最大逆向匹配
3. 雙向匹配</p>

<!-- more -->


<p>中文分詞一開始是使用詞典作分詞，在分詞的過程中主要有幾個原則:  <br/>
1. 切出來的詞彙越長越好，越長就能代表越複雜的意思，句子的意思也能更明確。<br/>
2. 切出來的分詞結果通常會有一些停用詞(stop words)或是詞典裡沒有的詞導致會有多餘的字出現，那類的字越少越好。</p>

<p>然後最上面提到的三個演算法其實都是對詞典作匹配，只是是從句子彺前往後匹配或者兩種方法都使用，之後有空用程式語言實踐一下演算法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyconf 2014 Second Day]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/26/rubyconf-2014-second-day/"/>
    <updated>2014-04-26T20:29:49+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/26/rubyconf-2014-second-day</id>
    <content type="html"><![CDATA[<p>記錄一下rubyconf 2014第二天(4/26)參加的議程</p>

<!-- more -->


<h3>Cores unleashed &ndash; Exploiting Parallelism in Ruby with STM (and a new VM)</h3>

<p><a href="https://speakerdeck.com/brucehsu/rubyconf-dot-tw-2014-cores-unleashed-exploiting-parallelism-in-ruby-with-stm">slide</a></p>

<h3>How the Principles of Ruby Inspired the Rails Girls Community</h3>

<p>兩位講者如何認識，並且介紹Rails Girls社群怎麼成長的。</p>

<h3>Ruby on Bioinformatics</h3>

<p>使用ruby 處理生物資訊，列了不少gem但是有的是去使用其他語言的library吧，裡面也有提到使用neo4j處理
個人的健康資料，不過跟ruby沒有太大的關係，現在比較常用還是perl和python吧。</p>

<h3>the Guide to know Ruby implementation for non-C language programer</h3>

<p>講者一開始說因為她的先生是寫ruby的programmer接觸ruby，之後就開始研究Ruby裡面的架構，
講者介紹幾個方法去研究裡面的原始碼。</p>

<h3>Growing Up &ndash; Bringing Concurrency to Ruby</h3>

<p>一開始介紹jruby和jvm，然後說明 prcoess-level和thread-level的做法，concurency的法則和
實現介紹一些實現no-block的library。</p>

<h3>Extreme Makeover &ndash; Rubygems Edition</h3>

<p>bundle，用來管理gem的依賴性，講者講了一些過去bundle的issue，ssl issue，搜尋Gem的效率過低，加上CDN，
加入一些api，建立新的index。</p>

<h3>sweaters as a service &ndash; adventures in electronic knitting</h3>

<p>講者建立一個編織機器，只要上傳圖檔就可以編織出一個圖案，似乎是使用Ruby去控制不過沒有看到整個程式碼。</p>

<h3>Improve and refactor ruby code easier</h3>

<p>利用 synvert工具作ruby 的重構。</p>

<h3>lightning talk</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socket.io Migrating to 1.0]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/25/socket-dot-io-migrating-to-1-dot-0/"/>
    <updated>2014-04-25T22:47:54+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/25/socket-dot-io-migrating-to-1-dot-0</id>
    <content type="html"><![CDATA[<p>socket.io 已經有1.0版本了，所以免不了會有些大改動，wiki上面有一篇<a href="https://github.com/LearnBoost/socket.io/wiki/Migrating-to-1.0">Migrating-to-1.0</a>可以參考，這邊就記錄
目前程式升級有影響的部分。</p>

<!-- more -->


<h2>Authentication differences</h2>

<p>以前在作認證的時候是透過<code>authorization</code>這個事件，在建立socket.io連線根據cliet端傳回的參數作處理。</p>

<pre><code>io.set('authorization', function (handshakeData, callback) {

});
</code></pre>

<p>現在有&#8217;io.use()&lsquo;這個方法，在socket建立的時候執行傳入的函式。</p>

<pre><code>io.use(function(socket, next) {
    var handshakeData = socket.request;
    // make sure the handshake data looks good as before
    // if error do this:
        // next(new Error('not authorized');
    // else just call next
    next();
});
</code></pre>

<h2>Starting the server</h2>

<p>以前會使用listen但是在1.0版本就不用了。</p>

<pre><code>var io = require('socket.io').listen(server);
</code></pre>

<p>vs</p>

<pre><code>var io = require('socket.io');
var socket = io({ /* options */ })
</code></pre>

<h2>Exposed Events</h2>

<p>似乎有些舊版的事件在新版(1.0)就消失或是使用其他事件取代。<br/>
裡面有提到一個socket.io-client manager (lib/manager.js)值得研究，以前沒有注意這個東西。</p>

<h2>Configuration differences</h2>

<p>以前設定socket.io的參數是用set之後是直接丟給socket.io。</p>

<pre><code>io.set(
    'store' ,new RedisStore({
        redisPub : pub,
        redisSub : sub,
        redisClient : client
    })
);
</code></pre>

<p>vs</p>

<pre><code>var socket = require('socket.io')({
    // options go here
});
</code></pre>

<h2>socket.io-adapter</h2>

<p>原本在0.9版本之前有<code>store</code>的選項，到1.0版本之後就拿掉了換成<code>adapter</code>，然後官方有放出<a href="https://github.com/LearnBoost/socket.io-adapter">socket.io-adapter</a>讓開發者可以
自行擴展，另外有一個<a href="https://github.com/Automattic/socket.io-redis">socket.io-redis</a>是官方放出來的參考範例，使用方法如下面所述。</p>

<pre><code>var socketio = require('socket.io');
var RedisStore = require('socket.io-redis');
var io = socketio(3000, {});
io.adapter(RedisStore({ host: host, port: port }));
</code></pre>

<p>這邊有一個參考的簡報<a href="http://www.slideshare.net/lagos.jp/socketio-10-25438209">socketio-10-25438209</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyconf 2014 First Day]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/25/rubyconf-2014-first-day/"/>
    <updated>2014-04-25T20:56:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/25/rubyconf-2014-first-day</id>
    <content type="html"><![CDATA[<p>記錄一下rubyconf 2014第一天(4/25)參加的議程</p>

<!-- more -->


<h3>Understanding Typing, Understanding Ruby</h3>

<p>關於靜態型別跟動態型別語言各自會遇到的問題，這場收益蠻多了前面提到一些以前型別的問題
，並且也提到其他語言在處理型別的方法。</p>

<h3>RubyMotion Gets A Cool New Friend: mruby on iOS</h3>

<p>使用ruby開發ios app，以前孤陋寡聞沒看過這個工具以後有機會可以拿來試試看。</p>

<h3>Practice: Refactoring with tests</h3>

<p>在講重構，不過前面講很多重構很重要然後要需要好好測試，後面就只有講一點點ruby裡面
要怎麼做&hellip;.</p>

<h3>Matz: Keynote</h3>

<p>ruby的生父的議程</p>

<h3>Teo-Happy Teams</h3>

<p>怎樣成為快樂團隊，議程中提到不少常見但是沒有實踐的開發方法或是。</p>

<h3>Tell a good story with Ruby</h3>

<p>講者學習ruby的過程和建構一個ruby程式</p>

<h3>10 Things to Make API Users Like You</h3>

<p>怎麼設計API，聽了之後沒有比較新穎的想法，大部分在以前設計API就有看過了，不過比較有共鳴的是
產生api文件，以前都是手動一個個寫說明文件常常會有參數或是輸出值對不上的問題。</p>

<h3>Make Your Rails Backstage Better</h3>

<p>講者說一下他當初開發後台的經驗，從原本使用gem到自製後台，不過有可能我使用rails沒有多久所有沒有什麼心得。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[socket.io Port問題]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/24/socket-dot-io-portwen-ti/"/>
    <updated>2014-04-24T23:09:10+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/24/socket-dot-io-portwen-ti</id>
    <content type="html"><![CDATA[<p>前端連接socket.io server遇到port問題的解決方法。</p>

<!-- more -->


<h3>haproxy</h3>

<p><a href="http://blog.davidmisshula.com/blog/2013/02/04/configure-haproxy-to-scale-multiple-nodes-with-stickiness-and-ssl/">configure-haproxy-to-scale-multiple-nodes-with-stickiness-and-ssl</a> <br/>
<a href="http://blog.carbonfive.com/2013/05/02/using-haproxy-with-socket-io-and-ssl/">using-haproxy-with-socket-io-and-ssl</a>  <br/>
這個方法有在Centos上面實作過是可行的，網路也有不少設定可以參考，不過當初只有測試websocket的方法。</p>

<h3>nginx</h3>

<p><a href="http://blog.mixu.net/2011/08/13/nginx-websockets-ssl-and-socket-io-deployment/">nginx-websockets-ssl-and-socket-io-deployment</a><br/>
nginx在1.3之後支援websocket可以最為反向代理，這個方法沒有實測過。</p>

<h3>透過改寫xhr-polling</h3>

<p><a href="http://stephenbelanger.com/2011/09/21/how-to-make-socket-io-work-behind-nginx-mostly/">how-to-make-socket-io-work-behind-nginx-mostly</a>  <br/>
這個方法是改寫xhr-polling的方法，前端就可以不用加上port就可以直接連接server，但是就不能使用其他的
連接方法了吧?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-Flow]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/24/git-flow/"/>
    <updated>2014-04-24T21:55:19+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/24/git-flow</id>
    <content type="html"><![CDATA[<p>在工作上使用git已經有一段時間了，跟同事一起開發專案時常有個問題，每個人在撰寫新功能時只有本人才知道
這個分支裡面有實現哪些功能，通常快到上線的時候就大家你併我你併他的分支後在推上去，沒有一個工作流程可以
遵循，之後有看到有篇文章描寫一個git工作流程:<a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>。</p>

<!-- more -->


<p><a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>裡面主要敘述如何管理git的分支，可以做為一個團隊如何實踐專案工作
流程的參考，然後最近才發現他有一個管理工具<a href="https://github.com/danielkummer/git-flow-cheatsheet">git-flow</a>可以更容易去實踐這套工作流程，這邊也有篇管理工具的
<a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html">介紹</a>，以後如果有空在推廣給同事使用吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown參考資料]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/23/markdowncan-kao-zi-liao/"/>
    <updated>2014-04-23T22:48:47+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/23/markdowncan-kao-zi-liao</id>
    <content type="html"><![CDATA[<p>markdown 是一個輕量級標記語言，讓使用者容易撰寫一份格式化的文件，不少網站都能支援markdown的語法例如像是Github，
語法規則可以參考<a href="http://markdown.tw/">markdown.tw</a>，原本我是使用sublime text搭配插件撰寫markdown但是沒辦法立即看到結果，就另外使用
<a href="http://markdownpad.com/">markdownPad 2</a>撰寫文章，不過最近發現一個開源專案<a href="https://github.com/joemccann/dillinger">dillinger</a>讓可以直接在閱覽器上編輯markdown文件，也能夠支援一
些雲端硬碟存取文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Information Retrieval]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/23/information-retrieval/"/>
    <updated>2014-04-23T21:42:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/23/information-retrieval</id>
    <content type="html"><![CDATA[<p><a href="IR">Information_retrieval</a>是指使用者在搜尋資訊的過程，而搜尋的資料有文字、圖像、影片、聲音，建構一個IR System包括以下幾種領域:</p>

<!-- more -->


<ol>
<li>自然語言處理</li>
<li>計算語言學</li>
<li>訊號處理</li>
<li>認知心理學</li>
<li>模式識別</li>
<li>Metadata</li>
</ol>


<h3>參考資料</h3>

<ol>
<li><a href="http://nlp.stanford.edu/IR-book/">Introduction to Information Retrieval </a></li>
<li><a href="http://www.mir2ed.org/">Modern Information Retrieval</a></li>
<li><a href="http://nlg.csie.ntu.edu.tw/courses/IR/IR2009.html">IR course</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yeoman Tool]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/22/yeoman-tool/"/>
    <updated>2014-04-22T23:37:09+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/22/yeoman-tool</id>
    <content type="html"><![CDATA[<p><a href="http://yeoman.io/">Yeoman</a> 是一個開發工具，讓使用者能夠建立自己的專案環境，之前在使用Phalcon的時候都需要重新建立開發環境，
之前有看到利用Yeoman建立Angularjs的專案現在就在網路上看到<a href="https://www.npmjs.org/package/generator-phalcon">generator-phalcon</a>建立專案。</p>

<!-- more -->


<h3>Yemoan 內容</h3>

<ol>
<li>yo</li>
<li>Grunt</li>
<li>Bower</li>
</ol>


<h3>安裝Yeoman</h3>

<pre><code>    npm install -g yo
</code></pre>

<h3>建立angular的專案</h3>

<pre><code>    npm install -g generator-angular  
    yo angular                         
    bower install angular-ui           
    grunt test                         
    grunt server                       
    grunt                              
</code></pre>

<h3>安裝Phalcon 模板</h3>

<pre><code>    npm install generator-phalcon
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用git做程式碼debug]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/20/shi-yong-gitzuo-cheng-shi-ma-debug/"/>
    <updated>2014-04-20T17:02:31+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/20/shi-yong-gitzuo-cheng-shi-ma-debug</id>
    <content type="html"><![CDATA[<p>專案在多人協作的環境下有時會出現不明原因的bug，通常是因為撰寫的人沒有發現並且沒有經過良好的測試並且又併入主分支，
這導致bug隱藏在程式碼裡面，這邊就記錄一下平常使用git來找出問題點的方法。</p>

<!-- more -->


<p>通常如果知道出錯在哪個檔案可以透過git blame的指令找出此檔案最後修改的人是誰並且還可以得知最後的commit，並且還能夠
下條件限定在某些行數，下面的指令可以顯示 index.php 100行到150行之間的資訊另外我看可以下 <code>-C</code> 的選項可以顯示這段
程式碼的原始出處不過我一般沒有在使用。</p>

<pre><code>    git blame -L 100,150 index.php
</code></pre>

<p>另外一種情形是不知道問題是出錯在哪一個部分，這時可以使用<code>git bisect</code>，這個指令可以讓使用者決定從哪邊開始是運作良好
的commit，然後現在是有問題的commit，接下來會顯示從正常到有問題的commit之間還有多少筆commit並且開一個<code>no branch</code>的
分支使用者讓測試，如果目前的commit是測試出來是正常的狀態便可以下<code>git bisect good</code>告訴 bisect目前的commit是正確的，
如果是錯誤的就可以下<code>git bisect bad</code>說目前是錯誤的狀態，直到確定是在哪一筆commit出錯的，結束後下<code>git bisect reset</code>
就可以回到原本的開發環境。</p>

<pre><code>    git bisect start 開始執行bisect
    git bisect bad   目前的commit是有問題的
    git bisect good [commit] 目前已知的正常狀態是哪一個commit
    git bisect reset 結束 bisect
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 偏好設定]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/20/git-pian-hao-she-ding/"/>
    <updated>2014-04-20T10:22:01+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/20/git-pian-hao-she-ding</id>
    <content type="html"><![CDATA[<p>記錄從網路上看到關於git有用的設定。</p>

<!-- more -->


<h4>1. git 加上顏色</h4>

<pre><code>    git config --global color.ui true
</code></pre>

<h4>2. git 自動補完指令和分支名</h4>

<p>下載<a href="https://github.com/git/git/blob/master/contrib/completion/git-completion.bash">git-completion.bash </a>，然後在.bashrc 加入下面這段程式碼然後讓新的Bash生效就可以了。</p>

<pre><code>    if [ -f ~/.git-completion.bash ]; then
        . ~/.git-completion.bash
    fi
</code></pre>

<h4>3. 顯示目前在哪個分支</h4>

<p>下載<a href="https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh">git-prompt.sh</a>，然後在.bashrc加上下面指令，</p>

<pre><code>    source ~/.git-prompt.sh
    export PS1='$(__git_ps1 "(%s)") \W $'
</code></pre>

<p>之後就可以在git專案底下看到Bash顯示在哪個專案和分支。</p>

<pre><code>    (master) Lucene $
</code></pre>

<h4>4. git alias</h4>

<pre><code>    git config --global alias.check checkout
    git config --global alias.cmt commit
</code></pre>

<h4>5. 設定git使用的編輯器和diff工具</h4>

<p>下面的設定可以在~/.gitconfig修改。</p>

<pre><code>    git config --global core.editor
    git config --global diff.tool 
    git config --global merge.tool 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LSI 和 SVD]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/19/lsi-he-svd/"/>
    <updated>2014-04-19T19:44:28+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/19/lsi-he-svd</id>
    <content type="html"><![CDATA[<p>記錄在處理nlp問題時看到的專有名詞。</p>

<!-- more -->


<p><a href="http://en.wikipedia.org/wiki/Latent_semantic_indexing">Latent semantic indexing</a> (LSI) 照字面翻成潛在語義索引，一般搜尋引擎透過關鍵字索引文件，但是LSI是利用詞彙在不同語境下有不同語義去搜尋，
因為使用者在搜尋文件時有可能因為一詞多義讓搜尋結果夾雜多餘的文件，一義多詞則會讓一些文件沒有搜尋到的問題。</p>

<p><a href="http://en.wikipedia.org/wiki/Latent_semantic_analysis">Latent semantic analysis</a> (LSA) 潛在語義學，一般語義學主要研究詞彙的同義、相似、反義詞，而LSA主要是研究詞彙在文件中的關係，
LSI假設詞彙在類似的文句中會有相近的意思，LSI利用tf-idf建立一個大型矩陣，行為詞列為文件值為tf-idf算出的權值。</p>

<p><a href="http://en.wikipedia.org/wiki/Singular_value_decomposition">Singular value decomposition</a> (SVD) 奇異值分解，一種矩陣分解方法，LSA使用SVD讓原本很大的矩陣降維。</p>

<p><a href="http://en.wikipedia.org/wiki/Tf%E2%80%93idf">tf-idf</a> 找出一個詞彙在一個文件中的重要程度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solr With Mongo-connector]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/19/solr-with-mongo-connector/"/>
    <updated>2014-04-19T15:51:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/19/solr-with-mongo-connector</id>
    <content type="html"><![CDATA[<p>solr是一款開源的搜尋引擎，可以對各種資料索引，之前使用solr的Data-Import-Handler功能對Mysql作搜尋然後設定排程
定期將mysql資料丟到solr裡面，另外也有透過Mysql trigger和udf讓一些需要即時同步的資料。</p>

<!-- more -->


<p>solr與Mysql通訊是透過jdbc抓取資料庫裡的資料，而mongodb似乎也有類似的東西例如<a href="https://github.com/erh/mongo-jdbc">mongo-jdbc</a>和<a href="http://www.unityjdbc.com/mongojdbc/mongo_jdbc.php">JDBC Driver for MongoDB</a>，
<a href="https://github.com/erh/mongo-jdbc">mongo-jdbc</a>網路有人使用過雖可以讓solr進行索引但是如果要跑增量索引就會出錯，<a href="http://www.unityjdbc.com/mongojdbc/mongo_jdbc.php">JDBC Driver for MongoDB</a>則沒看到有人使用在
solr上的心得，之後有時間在測試。</p>

<p>mongodb本身則有<a href="https://github.com/10gen-labs/mongo-connector">mongo-connector</a>這個解法，主要是利用Mongodb的oplog(類似Mysql的binlog)會記錄repset之間的操作，如此一來
讓solr透過oplog就可以去更新索引並且由於oplog是即時的讓solr能更即時更新資料。</p>

<p>如果要使用<a href="https://github.com/10gen-labs/mongo-connector">mongo-connector</a>首先要打開replset 產生oplog然後安裝mongo-connector，不過遇到一個奇妙的問題透過pip安裝後沒有直接
連結到bin下之後透過git安裝就沒有問題了，要使用replset很簡單，就把/etc/mongodb.conf下面這段設定打開，</p>

<pre><code># in replica set configuration, specify the name of the replica set
replSet = example
</code></pre>

<p>之後在mongodb的shell裡下rs.initiate()指令即可，本台mongodb就變成PRIMARY了這時也可以加入其他台mongodb作replication，不過本次
主要是要使用oplog讓solr導入資料製作索引就不需要加入其他台server了。</p>

<p>接下來將照著github上Usage With Solr的說明使用即可，另外似乎可以搭配tailable cursor做出solr即時更新索引，之後在測試看看先加上
其他中文分詞分析中文資料。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[四月書單]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/17/si-yue-shu-dan/"/>
    <updated>2014-04-17T22:54:37+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/17/si-yue-shu-dan</id>
    <content type="html"><![CDATA[<p>記錄四月要看完的書單。</p>

<!-- more -->


<ol>
<li>The Clean Coder無暇的程式碼</li>
<li>The Clean Coder無暇的程式碼 番外篇</li>
<li>解密搜尋引擎 技術實戰</li>
<li>易讀程式之美學－提升程式碼可讀性的簡單法則 (The Art of Readable Code)</li>
<li>BAD DATA 技術手冊</li>
<li>Interactive.Data.Visualization.for.the.Web</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js 0.12 版本]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/16/node-dot-js-0-dot-12-ban-ben/"/>
    <updated>2014-04-16T23:18:11+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/16/node-dot-js-0-dot-12-ban-ben</id>
    <content type="html"><![CDATA[<p>nodejs 0.12版本出來了，多了一些新的API，改進Cluster的功能此外ES6 的特性在0.11.9也可以開啟使用。</p>

<!-- more -->


<h3>Cork support for writable streams</h3>

<p>這邊是提升tcp傳輸的效率，當數據流裡面的小數據結合成大數據在送出減少tcp和系統的調用。</p>

<h3>tls module</h3>

<p>原本nodejs的tls模塊的效率提高了，之前有使用過http模組的tls功能不過沒有測試過他的效率。</p>

<h3>Crypto performance improvements</h3>

<p>改進加解密演算法的速度，不過我比較常用的主要在session方面的加密</p>

<h3>Reduced garbage collector strain</h3>

<p>0.12版本改寫了關於context的部分<a href="https://github.com/joyent/node/commit/756b622">multi-context refactoring</a>，藉此減少v8在multi-context的情形下，
不會讓V8一直處理關於handle的問題。</p>

<h3>Better cluster performance</h3>

<p>這個改進我有可能比較常用到，目前在作nodejs applicacion的架構優化並且希望機器的資源能充分使用，然後這篇<a href="http://strongloop.com/strongblog/whats-new-in-node-js-v0-12-cluster-round-robin-load-balancing/">post</a>有提到
如何改進cluster的效率。</p>

<h3>Faster timers, faster setImmediate(), faster process.nextTick()</h3>

<p>這部分是提升像是setTimeout之類API的效率，這裡就不太清楚了。</p>

<p>原文在此<a href="http://strongloop.com/strongblog/performance-node-js-v-0-12-whats-new/">node-js-v-0-12-whats-new</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中文分詞器]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/15/zhong-wen-fen-ci-qi/"/>
    <updated>2014-04-15T20:55:40+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/15/zhong-wen-fen-ci-qi</id>
    <content type="html"><![CDATA[<p>記錄一下中文分詞目前有哪些分詞並且主要使用哪些方法實現中文分詞。</p>

<!-- more -->


<p>目前有哪些中文分詞器。<br/>
1. <a href="http://code.google.com/p/ik-analyzer/">IKAnalyzer</a><br/>
2. <a href="https://code.google.com/p/mmseg4j/">mmseg4j</a><br/>
3. <a href="https://code.google.com/p/paoding/">paoding</a><br/>
4. <a href="https://github.com/fubuki/ansj_seg">ansj_seg</a></p>

<p>中文分詞比較常見的是使用詞典進行分詞，使用這種方法最重要是詞典的內容，通常利用輸入法或是網路上放出來的詞典，不過有些新詞或是人名地名
就沒有辦法處理，另外一點就在分詞速率，透過詞典分詞詞典越大分詞的時間就會越久。另外是使用機器學習透過語料庫訓練出模型例如HMM的方式也是
需要透過既有的語料庫訓練。此外也能夠使用語言學上的規則方法不過我目前看到的分詞器大多都是詞典加統計模型。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jquery Bind, Live, Delegate, On]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/14/jquery-live-bind-on/"/>
    <updated>2014-04-14T21:28:39+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/14/jquery-live-bind-on</id>
    <content type="html"><![CDATA[<p>jquery 用來綁定事件的方法有好幾種根據Jquery版本不同能支援的方法也有所不同，這篇文章就短暫
記錄一下那些函式的用法，如果要更詳細的解說推薦<a href="http://www.youtube.com/watch?v=znroW8mH07o">jQuery演進短論（TonyQ）</a>這個影片，講解的還蠻清楚的。</p>

<!-- more -->


<h3>bind</h3>

<p>以前我使用最多的綁定方式，除了可以綁定jquery原有的函式也可以自訂事件名稱，在去觸發自訂事件，不過bind只能綁定一次如果使用者
之後append一個新的節點就必須在重新綁定一次。</p>

<pre><code>$(body).bind("click",function(){
    console.log('click event');
});
</code></pre>

<h3>live</h3>

<p>有時候會使用ajax動態在入新的內容，開發者希望能夠自動將事件綁定到新的內容裡面就會使用live的方式去綁定，不過由於live的實現方式
如果在程式碼裡使用太多live反而會讓降低javascript的效率。</p>

<pre><code>$("#example").live("click",function(){
    console.log('click event');
});
$(body).append('&lt;div id = "example"&gt; click here&lt;/div&gt;');
</code></pre>

<h3>delegate</h3>

<p>由於live 是透過監聽document的節點達成事件動態綁定，所以並不建議使用live而是使用delegate取代，使用方法如下，綁定的事件只會在#example下的
li元素才會生效。</p>

<pre><code>$("#example").delegate("li", "click", function () {  
    console.log('click event');
});  
</code></pre>

<h3>on</h3>

<p>on是目前官方推薦使用的綁定方式，不論是bind和live都可以透過on去實現，如果有去看jquery的原始碼在某個版本之後bind和live以及delegate底層都是
用on去實現了並且在1.10的時候live就被拿掉了，如果之後有空還需要整理一下on的實現方法。<br/>
以下同等於bind的用法</p>

<pre><code>$("#example").on("click",function(){
    console.log('click event');
});
</code></pre>

<p>以下同等於live的用法</p>

<pre><code>$(document).on("click","#example",function(){
    console.log('click event');
});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSDC 2014 Second Day]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/12/osdc-2014-second-day/"/>
    <updated>2014-04-12T19:20:57+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/12/osdc-2014-second-day</id>
    <content type="html"><![CDATA[<p>記錄一下OSDC 2014第二天(4/12)參加的議程</p>

<!-- more -->


<h3>Minimal MVC in JavaScript</h3>

<p>講者是Mosky，這場人爆滿，去年Pycon有聽過Mosky的議程，這場就簡單說一下什麼是MVC架構，
並且寫出一個簡單的MVC framework。</p>

<h5>memo app</h5>

<p><a href="https://github.com/moskytw/memo-app/blob/master/memo/static/memo.js">https://github.com/moskytw/memo-app/blob/master/memo/static/memo.js</a></p>

<h5>ZipCodeTW</h5>

<p>[repo] <a href="https://github.com/moskytw/zipcodetw  ">https://github.com/moskytw/zipcodetw  </a>
[demo page] <a href="http://zipcode.mosky.tw/">http://zipcode.mosky.tw/</a></p>

<h3>當黃色小鴨都可以進入基隆，Node.js 當然也可以娶 QML</h3>

<p>以前有用Qt寫過GUI的程式，QML是Wt放出來的語言，可以混用javascript不過支援的功能有限，為了擴充功能需要懂得C++才能擴展，原本講者在有弄一個nodejs+qt的函式庫<del>Brig</del> 不過後來就放棄了，之後講者找到一個<a href="https://github.com/svalaskevicius/qtjs-generator">qtjs</a> == Node.js + Qt + API Generator，</p>

<p>講者弄個live demo是會顯示IRC頻道的內容的BOT不過似乎因為中文編碼的關係出現問題。</p>

<h3>Data Visualization in D3js &ndash; Tips and Tricks</h3>

<p>這場也是爆滿，講者一開始說本場議程會一一說明有哪些tips並且在後面用火焰顯示難度，最多是4個火焰，
第一個tip是purpose就四個火焰，丟出不少有趣的圖表，顯示出根據觀測的角度不同呈現出的東西就不一樣，後面的tips主要是跟別的專案結合並且要多看官網的範例，最後是demo一個使用  Angularjs + D3js fisheye + x3d的Banana 3D 。</p>

<h3>Escape from the Callback Hell</h3>

<p>這場我以為是要講javascirpt，不過作者比較熟悉的python和 object-c不過也提到一些javascript，講了一些語言在處理callback非同步
的方式。</p>

<p>Objective-C block<br/>
python 3.3的Coroutines<br/>
C# async await<br/>
nodejs 0.12 提供yield的功能<br/>
<a href="https://www.npmjs.org/package/co">co</a></p>

<h3>Bashing OSDC</h3>

<p>講者主要使用Bash和介紹Bash，上午有場同個講者是使用命令列管理Github的議程，然後有觀眾問了<a href="http://fishshell.com/">fish</a>可以研究看看。<br/>
講者的github:<a href="https://github.com/ingydotnet">ingydotnet</a></p>

<h3>從 Multics 到雲端作業系統：淺談系統程式發展和新機會</h3>

<p>jserv的議程，這場介紹從以前到現在作業系統的發展，從登月使用的CTSS到後在發展的multics unix bsd，並介紹他們各自實現的功能和概念，之後講了BeOS和NeXT和各自後來的發展。
&lsquo;現在智慧型手機的市場其實是 Linux 跟 BSD 在比誰的 user experience 比較好&#8217;這句話蠻有趣的。
接下來開始說講者在生醫產業的發展和開發的F9 Microkernel。
自己的國家自己救->自己國家的教育自己救->自己的<del>老弟</del>醫療系統自己救。</p>

<h3>零時政府的第一年</h3>

<p>這場分成兩個部分。
第一部分是g0v是如何發展的，網路動員的窘境，有哪些專案。
第二部分是在&#8221;中研院&#8221;辦了第零次向日葵數位體驗營的過程和心得。</p>

<h3>Lightning Talks</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSDC 2014 First Day]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/11/osdc-2014-first-day/"/>
    <updated>2014-04-11T21:23:36+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/11/osdc-2014-first-day</id>
    <content type="html"><![CDATA[<p>記錄一下OSDC 2014第一天(4/11)參加的議程</p>

<!-- more -->


<h3>How Public Lab collaborates to make environmental science something anyone can do</h3>

<p>這議程讓我印象深刻，利用社群的力量關懷社會，使用風箏和數位相機做出空拍圖取得資料不一定要太昂貴的機器也可以達到相同的效果，
只等待公家機關是不行的，藉由民間的力量關注環境的議題。<br/>
<a href="http://publiclab.org/">publiclab</a></p>

<h3>Using Open Standards and Open Source to Manage a Datacenter</h3>

<p>這個議程介紹一些在管理資料中心時使用哪些技巧和使用哪些開源軟體，講者是在cloudMosa任職的，管理著&#8217;2k+ node&#8217;和 &lsquo;4個data center&#8217;。
1. MRTG
2. snmp
3. specific MIBs
4. RRD tool
5. Munin</p>

<h3>Sharding and Scale-out using MySQL Fabric</h3>

<p>MySQL Fabric是oracle放出來用來擴展mysql的controller，讓程式透過Fabric存取mysql cluster，不過這場演講讓我印象深刻的是他說的英文還不錯，
雖然有些地方還是有日本腔，但比我在日本旅行聽到的英文好的多。</p>

<h3>MySQL Utility</h3>

<p>跟上一場都是Oracle的講者，介紹在mysql workbench裡一個工具&#8217;MySQL Utility&#8217;，裡面有些功能在管理Mysql Cluster比較
Master和Slave資料差別蠻有用的。</p>

<h3>Getting started with Python for Data Science</h3>

<p>介紹Data Science是什麼，列出一些Python 熱門的library和講者關注的library。</p>

<h3>DIY一個Data Mining based的網路流量分析工具</h3>

<p>講者是在康寧護專任職的網管，這場是介紹他寫的流量分析工具，不過似乎是基本的概念實現程式，裡面會有不少BUG，
不過講者有放到網路上可以下載後改進架構。</p>

<ol>
<li>flow 格式的資料</li>
<li>pmacct</li>
<li>mysql</li>
<li>php and perl</li>
<li>mahout</li>
<li>bootstrap and chartjs</li>
</ol>


<h3>Understanding Android Benchmarks</h3>

<p>介紹Android Benchmarks有哪些方式，主要是測試CPU和Memory。</p>

<h3>ProjectTox: Free as in freedom Skype replacement</h3>

<p>之前就有看過ProjectTox，是為了取代Skype的開源通訊軟體，然後之所以有那麼多相關的分支是因為Tox本身是一個library，
其他專案都是基於Tox建立的。</p>

<h3>有 <del>愛</del> RAII 的 C++</h3>

<p>這場比較硬一些，前面在講一些GC Language會遇到的問題並且給一些會導致Memory Leak的範例，
之後在開始介紹C++的<a href="http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization">RAII</a>，這場主要在講程式關於記憶體方面的問題。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-reflog的用法]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/07/git-reflogde-yong-fa/"/>
    <updated>2014-04-07T21:11:57+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/07/git-reflogde-yong-fa</id>
    <content type="html"><![CDATA[<p>之前看到一篇去年的消息Jenkins開發者意外的抹消掉在github上一個月的commit，這跟Github的設定和
使用者本身使用強制推送有關，如果想要知道詳細情形請參照<a href="https://groups.google.com/forum/#!msg/jenkinsci-dev/-myjRIPcVwU/t4nkXONp8qgJ">&lsquo;這裡&rsquo;</a>。</p>

<!-- more -->


<p>不過裡面比較引我注意的是他如何回復被蓋掉的部分，利用git-reflog可以取得被刪除的commit，之後再開出
一個新的分支取回原本的版本，這個跟git-log 的差異在git-log只會顯示過去提交過的記錄，但是reflog會顯示
所有的變更紀錄，下面幾個我比較常用的指令都會紀錄在reflog裡面，藉此如果版本有問題了話更容易回復。</p>

<ul>
<li>branch</li>
<li>commit</li>
<li>checkout</li>
<li>pull</li>
<li>push</li>
<li>merge</li>
<li>clone</li>
<li>branch</li>
<li>stash</li>
</ul>


<h1>git-reflog OPTIONS</h1>

<ul>
<li><p>&mdash;stale-fix</p></li>
<li><p>&mdash;expire=<time></p></li>
<li><p>&mdash;expire-unreachable=<time></p></li>
<li><p>&mdash;all</p></li>
<li><p>&mdash;updateref</p></li>
<li><p>&mdash;rewrite</p></li>
<li><p>&mdash;verbose</p></li>
</ul>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-11-02T16:55:28+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Distributed Hash Table 理論]]></title>
    <link href="http://fubuki.github.io/blog/2014/11/01/distributed-hash-table/"/>
    <updated>2014-11-01T22:47:17+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/11/01/distributed-hash-table</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在許多 P2P 系統都有在使用 distributed hash table (DHT) 分享網路中的資訊。</p>

<h3>特性</h3>

<ol>
<li>Autonomy and Decentralization</li>
<li>Fault tolerance</li>
<li>Scalability</li>
</ol>


<h3>架構</h3>

<ol>
<li>Chord</li>
<li>Content-Addressable Network (CAN)</li>
<li>Global Information Sharing Protocol (GISP)</li>
<li>Kademlia</li>
<li>Pastry</li>
<li>Tapestry</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十一月書單]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/31/11-booklist/"/>
    <updated>2014-10-31T22:30:38+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/31/11-booklist</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li>P2P 技術完全攻略</li>
<li>Data.Science.at.the.Command.Line</li>
<li>企业集成模式.设计、构建及部署消息传递解决方案</li>
<li>高品質程式 軟體測試原則、實作與模式</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached Repcached]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/30/memcached-repcached/"/>
    <updated>2014-10-30T21:43:51+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/30/memcached-repcached</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在看 memecached 架構的時候發現了一個名叫 <a href="http://repcached.lab.klab.org/">repcached</a> 的東西，似乎日本那邊基於 memecached 開發出來的擴充版本，
每台 memcached 都是 master 並且能夠互相同步，這邊有關於 repcached 的<a href="https://www.nic.ad.jp/ja/materials/iw/2008/proceedings/F2/IW2008-F2-08.pdf">說明</a>，跟之前使用 twemproxy 和 lib-memcached 擴展的方式不一樣，
可以研究一下其中的機制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang 相關論文]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/29/erlang-lun-wen/"/>
    <updated>2014-10-29T23:15:08+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/29/erlang-lun-wen</id>
    <content type="html"><![CDATA[<p>為了研究 erlang vm 尋找一些相關的論文。</p>

<!-- more -->


<p>目前應該會先讀1,2,7 這三篇論文，這三篇提到的東西我還蠻感興趣的，對於了解 erlang vm 應該會有不少幫助。</p>

<ol>
<li>Making reliable distributed systems in the presence of sodware errors</li>
<li>Characterizing the Scalability of Erlang VM on Many-core Processors</li>
<li>Exploring Alternative Memory Architectures for Erlang:Implementation and Performance Evaluation</li>
<li>Efﬁcient memory management for concurrent programs that use message passing I,II</li>
<li>Concurrent Programming in ERLANG</li>
<li>On Preserving Term Sharing in the Erlang Virtual Machine</li>
<li>Programming Distributed Erlang Applications:Pitfalls and Recipes</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[何謂 Back-to-back User Agent ?]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/28/back-to-back-user-agent/"/>
    <updated>2014-10-28T23:49:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/28/back-to-back-user-agent</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在 RFC3261 裡面有定義何謂 Back-to-back user agent （B2BUA）? 是讓 client 端可以透過 B2BUA 使用 sip 協定建立連線，
然後必須要一直保持連線， 以角色來說就像  FreeSWITCH 一樣，就算是使用 sip 建立連線之後利用 rtp 傳送訊息似乎也需要
 FreeSWITCH 幫忙，我原本以為 FreeSWITCH 只是幫忙建立連線但從規格書上看還是需要 FreeSWTICH 參與對話。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Unique Id]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/27/android-unique-id/"/>
    <updated>2014-10-27T22:59:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/27/android-unique-id</id>
    <content type="html"><![CDATA[<p>如何取得 android 裝置的唯一編號。</p>

<!-- more -->


<p>目前有一些用來識別是否為同一個裝置的方法，不過都有各自的問題。</p>

<ol>
<li><p>Mac Address
在沒有 wifi 或是沒有開啟 wifi 的裝置就無法取得 Mac Address。</p></li>
<li><p>DeviceId(IMEI/MEID/ESN)
非手機裝置會沒有 DeviceId，另外似乎有些產品會返回 null。</p></li>
<li><p>Android ID
有些廠商的裝置會有相同的 Android ID，但是是哪些廠商我就沒有看過有人寫出來。</p></li>
<li><p>Serial Number
在 2.3之後的版本可以透過 android.os.Build.SERIAL 取得 Serial Number，似乎需要 READ_PHONE_STATE的權限，</p></li>
<li><p>UUID
開發者可以在 APP 安裝時產生 UUID，但是就必須考慮到如何保存 UUID 的數值。</p></li>
</ol>


<p>參考:<br/>
<a href="http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html">Identifying App Installations</a><br/>
<a href="http://www.pocketmagic.net/2011/02/android-unique-device-id/">Android Unique Device ID</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[控制 PHP 執行時間]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/26/php-timeout/"/>
    <updated>2014-10-26T13:38:11+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/26/php-timeout</id>
    <content type="html"><![CDATA[<p>如何控制 PHP 的最長執行時間。</p>

<!-- more -->


<p>在執行 PHP 腳本的時候有可能因為程式邏輯上的問題或是為了取得外部的資料導致執行時間過久，而讓使用者等待回應的時間過長帶來不好的體驗，
因此在 PHP 本身一些常用的函式庫或是伺服器設定會讓開發者設定 timeout 的時間。</p>

<h4>nginx</h4>

<ol>
<li>fastcgi_connect_timeout</li>
<li>fastcgi_send_timeout</li>
<li>fastcgi_read_timeout</li>
</ol>


<h4>php-fpm</h4>

<ol>
<li>php-fpm.conf 的 request_terminate_timeout</li>
</ol>


<p>max_execution_time 和 set_time_limit 也能限制腳本執行的時間但是似乎在某些場景是有問題的。</p>

<h4>curl</h4>

<ol>
<li>CURLOPT_TIMEOUT</li>
<li>CURLOPT_TIMEOUT_MS</li>
<li>CURLOPT_CONNECTTIMEOUT</li>
<li>CURLOPT_CONNECTTIMEOUT_MS</li>
<li>CURLOPT_DNS_CACHE_TIMEOUT</li>
</ol>


<h4>mysql</h4>

<ol>
<li>innodb_lock_wait_timeout</li>
<li>libmysql 的 MYSQL_OPT_READ_TIMEOUT 和 MYSQL_OPT_WRITE_TIMEOUT</li>
</ol>


<h4>memcached</h4>

<ol>
<li>bool Memcache::connect ( string $host [, int $port [, int $timeout ]] )</li>
<li>Memcached 要另外實現</li>
</ol>


<h4>redis</h4>

<ol>
<li>$redis->connect(&lsquo;127.0.0.1&rsquo;, 6379, 2.5); // 2.5 sec timeout.</li>
<li>$redis->pconnect(&lsquo;127.0.0.1&rsquo;, 6379, 2.5, &lsquo;x&rsquo;); // x is sent as persistent_id and would be another connection the the three before.</li>
</ol>


<h4>其他</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebok Messenger 的 新架構]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/25/mqtt-and-thrift/"/>
    <updated>2014-10-25T22:44:32+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/25/mqtt-and-thrift</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Facebook 更改他們的 Messageer 的背後架構，在 <a href="https://code.facebook.com/posts/820258981365363/building-mobile-first-infrastructure-for-messenger/">Building Mobile-First Infrastructure for Messenger</a> 一文中有提到做了哪些更改並且提到更改後提升的多少效能。</p>

<p>裡面其中一個引我注意的是使用 mqtt + thrift 和 iris，工作上原本有使用 mqtt 當作 server 與 client 之間溝通的協定，但是在傳輸量上面希望能夠在縮減一些，目前看到有人提到 mqtt + protobuf 和 mqtt + thrift，主要都是使用 mqtt 載體然後利用其他方式壓縮訊息內容，Facebook 似乎是用 thrift 壓縮訊息內容，也許可以嘗試看看。</p>

<p>另外一個是 Facebook 採用 &lsquo;push-based snapshot + delta model&#8217;，這個 model 是使用 iris 實現，似乎是一種 message queue，裡面有兩個指針指向 APP 最後收到的訊息和 server 最新收到的訊息，之前有計畫寫個類似的東西用來存放使用者訊息，也許可以參考一下 Facebook 的架構。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Web Token]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/24/json-web-token/"/>
    <updated>2014-10-24T21:48:13+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/24/json-web-token</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在研究 socket.io 時看到了一個東西； <a href="http://jwt.io/]">jwt</a> ， 後來在 mosca 也看到了相同的東西，尋找之後發現全名為 <code>JSON Web Token</code>，
是用在加密 API 的回傳值，<a href="http://www.sitepoint.com/using-json-web-tokens-node-js/">Using JSON Web Tokens with Node.js</a> 這篇文章裡面有寫說 jwt 是怎麼加密，然後在 <a href="http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-19">ietf</a> 有更詳細的規格，
另外在 <a href="https://docs.auth0.com/scenarios-mqtt">Authenticating &amp; Authorizing Devices using MQTT with Auth0</a> 有寫如何跟 mosca server 一起使用，目前看起來是可以期待未來用在工作上面
，github 上面已經有些範例和函式庫可以使用，也許可以用在目前有使用 mqtt 的應用程式上面提高安全性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook React]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/23/facebook-react/"/>
    <updated>2014-10-23T23:04:08+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/23/facebook-react</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在參加 jsdc 2014 時看到一個很有趣的東西: react 和 flux， facebook 放出的開源專案，可以讓開發者很簡單的去建構前端服務，
下面是他在<a href="http://facebook.github.io/react/index.html">官網</a>上面提到的特性，根據從在 jsdc 的議程聽到的部分似乎是很好上手的框架，從目前用過一些前端的框架雖然不能說
哪個框架比較強大，但是這個 react 應該蠻適合團隊開發的，在開發前端的時候可以看到不少人沒有真的去了解前端閱覽器渲染的過程，
導致寫出十分耗用資源的 javascript，但是透過 Virtual DOM 可以避免這種情形，這是我目前看到最吸引我的特點。</p>

<ol>
<li>JUST THE UI</li>
<li>Virtual DOM</li>
<li>Data flow</li>
</ol>


<p>學習資源:<a href="https://egghead.io/articles/gentle-introduction-to-the-react-flux-architecture">Gentle Introduction to the React Flux Architecture</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Git Patch 的功能]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/22/git-patch/"/>
    <updated>2014-10-22T22:28:29+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/22/git-patch</id>
    <content type="html"><![CDATA[<!-- more -->


<p>有時需要將一些在本機上開發專案產生的修改部分丟給別人就可以使用 git 的 patch 功能。</p>

<h3>git format-patch</h3>

<p>git 本身用來製作 patch 的指令。</p>

<pre><code>git format-patch
git am xxx.patch
</code></pre>

<h3>git diff patch</h3>

<p>使用 git diff 產生的 patch。</p>

<pre><code>git diff prev_commit commit &gt; patch.diff 
git apply patch.diff 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freeswitch 動態更改 Sip 使用者資訊]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/21/freeswitch-xml-curl/"/>
    <updated>2014-10-21T22:29:29+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/21/freeswitch-xml-curl</id>
    <content type="html"><![CDATA[<!-- more -->


<p>freeswitch 預設是透過將 sip 使用者資訊寫入一份 xml 檔案，不過可以透過一些方法動態增加使用者資訊，
目前可以透過 <code>xml_curl</code> 這個模塊將 freeswitch 一些行為使用 curl 的方式跟外部 server 連接認證使用者資料。</p>

<h4>安裝 xml_curl</h4>

<p>下載 <a href="http://files.freeswitch.org/">http://files.freeswitch.org/</a> 的 freeswtich 原始碼，編輯 module.conf 將 xml_curl 的註解去除。</p>

<pre><code>./configure  
make mod_xml_curl-install
</code></pre>

<h4>載入 xml_curl</h4>

<p>編輯 <code>/etc/freeswitch/autoload_configs</code> 重啟 freeswitch。<br/>
也是可以使用 fs_cli Mod commands 載入模組。 <br/>
編輯 xml_curl.conf.xml 讓 freeswitch 要怎麼跟後端的 web service 溝通。</p>

<h4>設定 Freeswitch-Contrib</h4>

<p>下載 <a href="https://freeswitch.org/stash/projects/FS/repos/freeswitch-contrib/browse">Freeswitch-Contrib</a>，在 <code>intralanman/PHP/fs_curl</code> 底下的程式碼放到可以執行 PHP 的伺服器，
設定要使用哪種資料庫，伺服器上面要安裝 PDO 讓 PHP 可以跟資料庫連結。</p>

<h4>動態增加使用者資料</h4>

<p>最後更改資料庫的資料測試效果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chocolatey : Windows 的套件管理工具]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/20/chocolatey/"/>
    <updated>2014-10-20T21:53:49+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/20/chocolatey</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://chocolatey.org/">chocolatey</a> 是一款 Windows 用的套件管理工具，類似 Ubuntu 的 apt 和 Centos 的 yum，看了一下官網支援不少
開源套件讓使用者能夠一個指令將軟體安裝好，此外也有 GUI 介面可以使用，目前看起來一些在 Linux 上面的開發套件都已經
可以透過 <a href="https://chocolatey.org/">chocolatey</a> 安裝。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github 的 IDE : Atom]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/19/github-atom/"/>
    <updated>2014-10-19T19:52:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/19/github-atom</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://atom.io/">Atom</a> 是 Github 基於 node.js + webkit 開發強調模組化的一款編輯器，看過源碼可以知道是使用 CoffeeScript 和 LESS 撰寫的，
因此如果是 web 的開發者也能修改界面，裡面也集成了一些還蠻實用的功能，網路上有人說會有些不順的感覺不過我下載執行感覺起來還蠻順的，
有些工作上要使用的 Package 也有人開發，之後如果使用順利的話會從 ST 換成 Atom。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPConf Taiwan 2014]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/18/phpconf-taiwan-2014/"/>
    <updated>2014-10-18T21:44:03+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/18/phpconf-taiwan-2014</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>新浪微博 LAMP 優化之路</h3>

<p>PHP NG 主要作者<br/>
每天20憶pv 50億 hits<br/>
400台前端機器</p>

<h4>2012年3月</h4>

<p>使用 apache + php</p>

<p>17w 行代碼導致很難維護</p>

<ol>
<li>性能優化</li>
<li>架構優化</li>
<li>基礎優化</li>
<li>遠程優化</li>
</ol>


<p>Yaf c base framework 類似 phalcon
只實現基本功能
不需要 ORM</p>

<h4>Weibo 擴展</h4>

<ol>
<li>Weibo conf</li>
<li>Weibo Utils</li>
</ol>


<p>棄用 Smarty</p>

<h4>結構優化 -解耦</h4>

<ol>
<li>Pagelate</li>
<li>Bigpipe</li>
</ol>


<p>soa 的形式</p>

<h4>結構優化 &ndash; Yar rpc framewrok</h4>

<p>第一個 php和 rpc 並行的框架</p>

<p>CBigpipe 加速</p>

<p>前端 PHP 後端 C</p>

<p>升級 PHP 5.4</p>

<p>LAMP => LNMP</p>

<p>踩了一些坑</p>

<p>使用 Zend Optimizer Plus (O+) 替換 apcache</p>

<p>快於7% 到 10%</p>

<h4>性能優化 Yac</h4>

<p>主要是無鎖共享
使用 CRC 校驗資料使否出錯的問題</p>

<h4>移動微博</h4>

<p>移動佔到 70%以上</p>

<p>服務器 cpu idel 5%</p>

<p>PHP 異步調用</p>

<p>jsond</p>

<p>L0 和 L1 兩種類型的快取，分成本機和全域兩種</p>

<p>為何使用無鎖? key 包含 CRC ，使用CRC跟值校驗 降低錯誤率</p>

<h3>專案管理</h3>

<p>本職 PM<br/>
學生症候群<br/>
寫書經驗</p>

<h4>領導力</h4>

<p>冒險心
跳脫盒子
嘗試</p>

<h4>管理力</h4>

<p>一致性
遵循原則
避免意外</p>

<ol>
<li>PM = 團隊的 API</li>
<li>協助團隊看到全貌以便規劃調度</li>
<li>統一方向與做事方法</li>
</ol>


<h4>總結</h4>

<p>專案管理幫忙聚焦<br/>
最小戰鬥單位的概念</p>

<h3>whoscall &amp; mongodb</h3>

<p>講者是 whoscall cto<br/>
使用 mongodb 的經驗</p>

<h4>What does Gogolook do?</h4>

<p>Line whoscall<br/>
Caller-ID Service<br/>
介紹一下 mongodb 的基本性能
1. mongos
2. config server
3. mongod</p>

<h4>issue</h4>

<p>0th gae &ndash;> aws<br/>
Pass to laaS<br/>
No operation issue in GAE<br/>
MongoDB Production Notes<br/>
Nginx + AWS Auto-Scalling</p>

<p>The 1st issue<br/>
Page Faults 很高<br/>
Index are in Memorry  <br/>
需要大量的 Memory<br/>
刪除沒必要的 index<br/>
升級 instance (scale-up)</p>

<p>The 2nd issue<br/>
資料量變大導致 DiskIO 問題<br/>
需要更改 AWS 的設定</p>

<p>The 3rd issue<br/>
Lock rate 提高<br/>
MongoDB concurrency<br/>
一個 DB 只放 一個 collection<br/>
其他方案
非即時需要丟到 Queue 處理<br/>
等 MongoDB 更新 document-lock的功能</p>

<p>The 4th issue<br/>
shard 間資料希望能平均<br/>
由 config server 控制 <br/>
三台 config server 之間的時間差異導致 balance 掛點因而loading 不平均。<br/>
v2.6 可以 set time<br/>
shard 時間不同步會導致交易時間不一致<br/>
Object id 有使用到 timestamp 產生資料
因此如果將時間調到過去的時間會導致 Object id 碰撞的問題</p>

<p>Conclusion</p>

<ol>
<li>Index size fit in Memory</li>
<li>Disk IO</li>
<li>Database as Collection (&lt; 2.8)</li>
<li>Time sync distributed system</li>
</ol>


<p>你還會選擇 MongoDB嗎?
Redis
elestic Search</p>

<p>災後還原的方案</p>

<h3>PHP Extension 開發實務 &ndash; 補齊 PHP 遺失的 $<em>PUT 與 $</em>DELETE (FirchTsai)</h3>

<p>介紹一下 RESTful
$<em>PUT<br/>
$</em>DELETE<br/>
違反了 RFC 2616 不應該實作到 PHP裡<br/>
php://input<br/>
處理 mulipart</p>

<p>RFC 2388 mulipart 是什麼?</p>

<p>別忘了 $_FILES</p>

<p>EPV</p>

<p>介紹Extension 的優點和架構<br/>
主要是 SAPI 讓 server 與 php 溝通</p>

<ol>
<li>官方 Zend Extension API</li>
<li>神秘版 Zend Extension API (for PHP4) 用來來知道有這個 API</li>
<li>終極版 Zend Extension API == 直接看原始碼</li>
</ol>


<p>API 文件說明極少</p>

<p>PHP_GINIT_FUNCTION
PHP_GSHUTDOWN_FUNCTION</p>

<p>PHP_MINIT_FUNCTION
PHP_MSHUTDOWN_FUNCTION</p>

<p>PHP_RINIT_FUNCTION
PHP_RSHUTDOWN_FUNCTION</p>

<p>PHP-FPM 直接將 model 掛載到身上因此不會多次呼叫 init 和 shutdown。</p>

<p>config.m4 編譯環境<br/>
config.w32</p>

<p>php_epv.h 標頭檔<br/>
epc.c 主要檔案</p>

<p>編譯工具
1. phpize
2. configure
3. make</p>

<h3>Phalcon 進行式 (SDpower)</h3>

<p>Phalcon Developer Tools<br/>
講一些Phalcon 基礎大部分都用過了
快速使用加密解密<br/>
不可逆加密<br/>
都是在 service.php 設定</p>

<h3>Building Powerful command-line application with PHP (c9s)</h3>

<p>主要是介紹 <a href="https://github.com/c9s/CLIFramework">CLIFramework</a>
Features<br/>
參考 GIT 的命令架構</p>

<p>可以研究一下 zsh</p>

<h3>實戰 HHVM Extension (Ricky)</h3>

<p>介紹 HHVM</p>

<p>Hack lang = 強型態的 PHP
官方的文件
goo.gl/PPB64m</p>

<p>HHVM Extension requirement</p>

<p>config.cmake</p>

<p>fibionacci.php</p>

<p>hphpize
cmake
make &amp;&amp; make install</p>

<p>PHP檔案只能有一個並且要用 ext 開頭</p>

<p>HNI(HHVM Native Interface)
讓 Hack 和 C++ 混用
類型互相對應</p>

<p>RTFSC == Read The Fxck Source Code
HHVM 密技<br/>
JIT::VMRegAnchor</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opus Codec]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/17/silk-codec/"/>
    <updated>2014-10-17T23:37:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/17/silk-codec</id>
    <content type="html"><![CDATA[<!-- more -->


<p>SILK 為 Skype 所使用的音訊編碼，有人跟我提過這個編碼蠻適合用在 VOIP 上面的編碼，
後來去尋找相關資料發現一個 <a href="http://opus-codec.org/comparison/">opus-codec</a> 結合了 SILK 和 CELT 兩種編碼的優點然後 FreeSWITCH 也有支援，
在 <a href="http://opus-codec.org/comparison/">opus-codec</a> 的官網上有關於編碼壓縮率和品質的比較圖，之後可以實際測試看看效果如何 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/16/elixir-language/"/>
    <updated>2014-10-16T21:55:39+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/16/elixir-language</id>
    <content type="html"><![CDATA[<p>elixir 基於 erlang vm 的一門函數式語言。</p>

<!-- more -->


<p>最近在網路上在看 o&#8217;reilly 有出哪些新書時發現了一個沒見過的單字 elixir，後來去搜尋發現是基於 erlang 的 VM (BEAM) 所
發展的語言，目前看起來是蠻新的語言不知道有沒有人使用在商業環境上，不過他在 <a href="http://elixir-lang.org/">website</a> 上寫的特性讓我蠻感興趣的，可以跟
 erlang 結合也加入了一些其他語言的特性，之後可以實做看看並且研究一下為何會提出這門語言，elixir 的 <a href="https://github.com/elixir-lang/elixir/">github</a> 可以跟一下進度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful API 的版本控制]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/15/api-version-control/"/>
    <updated>2014-10-15T23:21:36+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/15/api-version-control</id>
    <content type="html"><![CDATA[<p>紀錄一些如何對 RESTful API 進行版本控制的方法。</p>

<!-- more -->


<h4>URI</h4>

<pre><code>https://api.example.com/v1/places
</code></pre>

<h4>Hostname</h4>

<pre><code>https://api-v1.example.com/places
</code></pre>

<h4>Body and Query Params</h4>

<pre><code>1 POST /places HTTP/1.1
2 Host: api.example.com
3 Content-Type: application/json
4
5 {
6 "version" : "1.0"
7 }
</code></pre>

<h4>Custom Request Header</h4>

<p><a href="http://www.mnot.net/blog/2012/07/11/header_versioning">Bad HTTP API Smells: Version Headers</a></p>

<h4>Content Negotiation</h4>

<p><a href="https://developer.github.com/v3/media/#api-v3-media-type-and-the-future">Github Media Types</a></p>

<h4>Content Negotiation for Resources</h4>

<h4>Feature Flagging</h4>

<h4>參考資料</h4>

<ol>
<li>Build APIs You Won’t Hate</li>
<li><a href="http://www.troyhunt.com/2014/02/your-api-versioning-is-wrong-which-is.html">Your API versioning is wrong, which is why I decided to do it 3 different wrong ways </a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php 的加密方案]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/14/php-and-crypt/"/>
    <updated>2014-10-14T22:09:47+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/14/php-and-crypt</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近需要生成一些加密字串，需要研究一下要採用哪種加密演算法， md5 跟 sha1 應該是不會列入考慮， 有可能會在 bcrypt 和 scrypt 兩者之間比較
一下看是要選擇哪一個。</p>

<ol>
<li>crypt</li>
<li>bcrypt</li>
<li>scrypt</li>
</ol>


<h4>關於加密的文章</h4>

<p><a href="http://stackoverflow.com/questions/401656/secure-hash-and-salt-for-php-passwords/8050063">How to securely hash passwords?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Xhprof 測量 Php 函式效能]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/13/xhprof-php/"/>
    <updated>2014-10-13T23:45:28+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/13/xhprof-php</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前有在尋找一些關於 PHP 除錯用的工具意外看到 <a href="https://github.com/phacility/xhprof">xhprof</a>，似乎可以測量 PHP function 層級的效能，之前在測試專案效能
通常是透過 ab 去測試併發數，並沒有基於單一函式進行測試，透過這個工具應該更容易找出問題在哪，這邊有個<a href="https://blog.engineyard.com/collections/profiling-with-xhprof-and-xhgui/">教學</a>可以參考。</p>
]]></content>
  </entry>
  
</feed>

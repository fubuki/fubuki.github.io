<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-09-21T22:34:28+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[node.js and Php-fpm]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/21/node-dot-js-and-php-fpm/"/>
    <updated>2014-09-21T22:01:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/21/node-dot-js-and-php-fpm</id>
    <content type="html"><![CDATA[<p>php-fpm 實現 fast-cgi 的規格來處理 php script，而 node.js 就可以透過 fast-cgi 執行跟 php-fpm 通信執行 php script。</p>

<!-- more -->


<p>網路上有一些已經時間 node.js 跟 fast-cgi 通信的 library，不過都有點舊，之前有實際跑了一下會有些問題，不過大致上
從別人寫的 library 和 <a href="http://www.fastcgi.com/drupal/node/6?q=node/22">FastCGI Specification</a> 可以了解 fast-cgi 的通信接口，之後可以自己玩玩看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socker.io 1.0 版本有哪些變動]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/21/whats-new-in-socket-dot-io-1-dot-0/"/>
    <updated>2014-09-21T21:43:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/21/whats-new-in-socket-dot-io-1-dot-0</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://juriy.com/p/socket-io.html">What&rsquo;s new in Socket.IO 1.0</a>裡面介紹新版本的架構和哪些更動的地方，可以藉由這篇文章看出
Sockert.io 分成哪些部分。</p>

<ol>
<li>engine.io</li>
<li>engine.io-client</li>
<li>engine.io-parser</li>
<li>socket.io</li>
<li>socket.io-adapter</li>
<li>socket.io-client</li>
<li>socket.io-parser</li>
<li>socket.io-protocol</li>
<li>socket.io-redis</li>
<li>socket.io-emitter</li>
</ol>


<p>另外是關於 scale out 的問題，在 <a href="https://medium.com/@3rdeden/cluster-fucks-when-scaling-socket-io-2c8ad1153332">Cluster fucks when scaling Socket.IO</a> 有提到一些作者覺得當 socket.io scale out 需要
考慮的事情，而在 1.0 版本裡面把 redis 的部分拆開了，可以換用其他方式實現 cluster 架構。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何建構一個大型的 Javascript 結構]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/20/large-scale-javascript-application-architecture/"/>
    <updated>2014-09-20T23:41:31+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/20/large-scale-javascript-application-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://www.slideshare.net/jibyjohnc/jqquerysummit-largescale-javascript-application-architecture">largescale-javascript-application-architecture</a> 提到一些如何建構一個大型的 Javascript 結構的概念可最為參考，裡面主要提到 MVC 的概念
和一些 Javascript 的設計模式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Singleton Pattern]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/20/javascript-singleton-pattern/"/>
    <updated>2014-09-20T23:21:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/20/javascript-singleton-pattern</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Javascript 的單例模式確保對象在全域環境下只會有一個實例。</p>

<h3>使用全域變數實現</h3>

<h3>使用閉包</h3>

<h3>重寫 Constructor 構造函數</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LEGY (LINE Event Gateway)]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/19/legy-line-event-gateway/"/>
    <updated>2014-09-19T23:44:34+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/19/legy-line-event-gateway</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前有機會看到 LINE　的整個架構圖的時候看到一個 LEGY 的區塊，看起來是負責跟 Client 端連結的部分，並且所有的平台都是透過 LEGY 跟後端程式連結，
之後在 Line 的開發者大會跟一些 twitter上的訊息得知 LEGY (LINE Event Gateway) 使用 erlang 撰寫的組件，負責分發前端傳來的請求，據說之後會在 LINE Engineers&#8217; Blog 有
更詳盡的介紹。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Session Handler]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/18/php-session-handler/"/>
    <updated>2014-09-18T23:16:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/18/php-session-handler</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在使用 node.js 搭建 WEB 聊天伺服器的時候，需要跟 PHP 端共用 session ，當時是使用 memcached 儲存 session 資訊，
但是預設是使用 PHP 的序列化格式，所以換成 msgpack 和 igbinary 兩種格式測試，使用 <code>session_set_save_handler</code> 實現，
如此一來透過 memcached 分享兩個平台的認證資訊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install and Use docker.io]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/17/install-and-use-docker-dot-io/"/>
    <updated>2014-09-17T23:35:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/17/install-and-use-docker-dot-io</id>
    <content type="html"><![CDATA[<p>在 Centos 下安裝和使用 docker.io。</p>

<!-- more -->


<h3>安裝</h3>

<pre><code>Centos
yum install docker-io
service docker start

Ubuntu
curl -sSL https://get.docker.io/ubuntu/ | sudo sh
</code></pre>

<h3>使用</h3>

<pre><code>docker pull centos
docker run centos:latest cat /etc/centos-release
</code></pre>

<h3>建立 LAMP 環境</h3>

<p>docker-io 藉由映像檔建立環境，所有想說可不可以藉由 docker 快速建立 LAMP 的環境，在網路上找了一下有人寫了類似的東西，
<a href="http://knowledge.sakura.ad.jp/tech/1811/">これから始める「DockerでかんたんLAMP環境 for CentOS」</a> 和 <a href="https://github.com/kunihirotanaka/docker-centos-lamp">docker-centos-lamp</a> 作為參考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis Cluster]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/16/redis-cluster/"/>
    <updated>2014-09-16T23:58:35+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/16/redis-cluster</id>
    <content type="html"><![CDATA[<p>官方 redis  cluster 的規範 和 php-redis library 目前的情況</p>

<!-- more -->


<p><a href="http://redis.io/topics/cluster-spec">cluster-spec</a> redis 的 cluster 架構，然後 <a href="https://github.com/nicolasff/phpredis/issues/476">phpredis</a> 也有在撰寫支援 cluster 結構的版本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile Jdk Source Code]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/16/compile-jdk-source-code/"/>
    <updated>2014-09-16T23:41:36+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/16/compile-jdk-source-code</id>
    <content type="html"><![CDATA[<p>如何編譯 opend jdk 的 source code</p>

<!-- more -->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在專案使用 Scrum]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/15/zai-zhuan-an-shi-yong-scrum/"/>
    <updated>2014-09-15T23:46:20+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/15/zai-zhuan-an-shi-yong-scrum</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近要帶人開發一個專案，想要實踐一下 Scrum 替代原有的瀑布式開發，買了 <code>告別瀑布，擁抱 Scrum</code> 來參考，
另外也買了 <code>Specification by Example</code>， 目前工作上才會有東西不符合規格或是時間上的拖延導致開發進度
出現了不少問題，所以現在是該學習一下關於專案管理的部分。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Pretty]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/14/git-pretty/"/>
    <updated>2014-09-14T20:08:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/14/git-pretty</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://justinhileman.info/article/changing-history/">Changing history, or How to Git pretty</a> 和 <a href="http://justinhileman.info/article/git-pretty/">git pretty</a> 介紹如何使用 git 管理專案，裡面有不少可以參考的地方。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xdebug : PHP Debug 工具]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/13/xdebug-php-debug-gong-ju/"/>
    <updated>2014-09-13T23:44:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/13/xdebug-php-debug-gong-ju</id>
    <content type="html"><![CDATA[<!-- more -->


<p>xdebug 為一款 PHP 用的除錯工具，透過 pecl 安裝後在 php.ini 打開就可以使用了，然後可以搭配 Sublime text 2 的
xdebug client 除錯，此外要在 chorme 安裝 xdebug 的插件後就可以直接通知 server 需要開啟 xdebug 的環境。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HadoopCon 2014]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/13/hadoopcon-2014/"/>
    <updated>2014-09-13T19:15:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/13/hadoopcon-2014</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>那些你知道的，但還沒看過的 Big Data 風景 – 致 Hadooper</h3>

<p>Fred 雲中象</p>

<ol>
<li>社群</li>
<li>速度</li>
<li>資料科學</li>
<li>Hadoop</li>
</ol>


<h4>國內 hadoop 圈子裡的人</h4>

<p>Jazz Wang</p>

<pre><code>hadooper
</code></pre>

<p>Wisely Chen</p>

<pre><code>推廣 Spark
</code></pre>

<h4>大資料處理上面處理的速度級別</h4>

<ol>
<li>Batch</li>
<li>Near Real-time</li>
<li>Real-time</li>
</ol>


<h4>資料科學需要哪些方面的能力</h4>

<p>How a typical software vendor approaches Data Science<br/>
PRISM 稜鏡計畫</p>

<h4>Hadoop 分成那些版本</h4>

<p>Hadoop 1<br/>
Hadoop 2</p>

<h3>Lambda Architecture Platform on SQL</h3>

<p>講者為Line 的員工<br/>
介紹一下講者和 Line office 目前在哪些地方</p>

<h4>Data analytics workload</h4>

<h4>batch processing</h4>

<h4>Stream Processing</h4>

<ol>
<li>Apache Storm</li>
<li>Norikra</li>
</ol>


<h4>Why Stream Processing</h4>

<ol>
<li>Less laterncy</li>
<li>Less computing power</li>
<li>No query schedule management</li>
</ol>


<h4>Disadvantage of Stream Processing</h4>

<h4>Lambada Architecture Overview</h4>

<h4>Twitter Summingbird</h4>

<h4>Lambada Structure use sql</h4>

<h4>UseCases in LINE</h4>

<p>Prompt report for Ads service</p>

<p>Summary of application server error log</p>

<p>TMTOWTDI</p>

<h4>A graph service for global web entities traversal and reputation evaluation based on HBase</h4>

<p>趨勢在那些問題上使用 hadoop</p>

<p>Malware的數量不斷成長</p>

<p>介紹趨勢防護分成那幾層</p>

<p>ThreatWeb Threat Enities as a Graph</p>

<p>將 Malware的行為轉換成 Graph 然後使用 PageRank 處理圖形問題</p>

<p>如何 store Graph data</p>

<p>Property Graph Model</p>

<p>使用 HBASE 存放 圖形資料</p>

<p>分成 vertex edge 兩種 table</p>

<h4>如何存取資料</h4>

<p>包裹 原本 HBASE的API</p>

<p>blueprints API</p>

<h4>效能</h4>

<p>HGraph</p>

<p>PageRank Result</p>

<p>DGA Discovered</p>

<h4>Cleints</h4>

<p>Real time Client</p>

<p>Batch Client</p>

<p>Graph Exploring Tools</p>

<h4>SQL on Hadoop: a Perspective of a Cloud-based, Managed Service Provider</h4>

<p>SQL Players on Hadoop</p>

<p>Hive
Spark sql</p>

<p>Presto
Impala
Drill</p>

<p>Norikra
StreamSql</p>

<p>Apache Tez</p>

<h4>Why still use MapReduce</h4>

<h4>Presto `s history</h4>

<h4>Who use Presto</h4>

<h4>Why select Presto</h4>

<p>容易處理</p>

<p>使用 SQL 語法</p>

<p>Batch summary</p>

<p>MapReduce &mdash; based</p>

<p>Hive with Tez</p>

<p>Spark and Spark SQL is a good alternative</p>

<h3>Norikra: Stream processing by SQL</h3>

<p>LINE 的 Analytics phalform team</p>

<p>Norikra 使用 SQL 語法處理資料</p>

<p>Esper EPL</p>

<p>Wiht/Without Schema</p>

<p>介紹一下 Norikra</p>

<p>如何安裝 Norikra</p>

<h4>use case 1</h4>

<p>External API call report s for partners</p>

<p><a href="http://developers.linecorp.com/blog/?p=3386">http://developers.linecorp.com/blog/?p=3386</a></p>

<p>api error response summaries</p>

<h4>use case 2</h4>

<p>Prompt reports for Ad service console</p>

<h4>use case 3</h4>

<p>Realtime access dashboard on Google Platform</p>

<p>Access log visualzation</p>

<p>More queries more simplicity and less latency</p>

<h3>Real-Time Streaming Data Computing for long-term undersea surveillance on top of Storm</h3>

<p>核三廠 排水口 監視資料</p>

<p>介紹 Storm 的架構</p>

<p>魚群辨識</p>

<p>確認鏡頭情形</p>

<p>scalability programing</p>

<p>DRPC</p>

<p>海洋影像資料處理過程</p>

<h3>Speed up Interactive Analytic Queries over Existing Big Data on Hadoop with Presto</h3>

<p>使用 Presto 分析在 hadoop 上面的資料。</p>

<p>SQL on/over Hadoop</p>

<p>Presto 的架構</p>

<p>可以支援多種 Database</p>

<p>Base on DAG model</p>

<p>Query 怎麼在 Presto上運行</p>

<p>Node 參數設定</p>

<p>Presto`s Roadmap</p>

<p>Data visualization with Presto &ndash; Demo</p>

<p>Grafana</p>

<h3>Mahout 資料分析基礎入門</h3>

<p>資料分析基礎入門</p>

<p>分析工具</p>

<ol>
<li>scikit-learn</li>
<li>R</li>
<li>Weka, Matlab</li>
<li>Mathout</li>
</ol>


<p>Introduction to apache mahout in youtube BTI360</p>

<p>User Mode 直接使用內建指令</p>

<p>Developer Mode 撰寫新的ML 演算法</p>

<p>Hortonworks</p>

<p>動動手玩推薦系統</p>

<h4>參考資料</h4>

<p>Frequent pattern analysis</p>

<p>Mahout fpgrowth</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hippyvm and Hhvm]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/12/hippyvm-and-hhvm/"/>
    <updated>2014-09-12T22:54:48+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/12/hippyvm-and-hhvm</id>
    <content type="html"><![CDATA[<!-- more -->


<p>以前在研究 Facebook架構的時候看到 <code>hhvm</code> 這個東西，把 PHP 編譯成二進位碼然後運行在虛擬機器上，
而最近又看到另外一款類似的產品 <code>hippyvm</code>，據說比 <code>hhvm</code> 還要快。</p>

<p><code>hhvm</code> 是用 C 和 C++ 撰寫的，而 <code>hippyvm</code> 是用 pypy 撰寫的，不過兩者都是將 PHP 運行在自己的虛擬機器上，
也因此有些基於 zend engine 的插件應該無法直接使用，需要修改源碼才行，這也是當初沒有在工作上採用的原因，
而是使用 phalcon 跟 Zephir 開發專案。</p>

<p>目前在網路可以看到一些關於 hhvm 和 phalcon 之間比較的文章，兩者各有其優點，不過身旁看到的都是使用 phalcon 開發
來提高 PHP 的性能，反而沒看到使用 hhvm 的人，但是不管怎樣這兩者能夠共同發展對 PHP 也是件好事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The PHP Quality Assurance Toolchain]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/11/the-php-quality-assurance-toolchain/"/>
    <updated>2014-09-11T22:00:38+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/11/the-php-quality-assurance-toolchain</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在用 持續集成的時候找到這個 <a href="http://phpqatools.org/">The PHP Quality Assurance Toolchain</a> ，裡面介紹不少針對 PHP 開發有用的工具，
能夠用來提高程式碼的品質。</p>

<ol>
<li>PHPUnit</li>
<li>PHPLOC</li>
<li>PHP_CodeSniffer</li>
<li>hhvm-wrapper</li>
<li>vfsStream</li>
<li>PHP_Depend</li>
<li>PHP Copy/Paste Detector</li>
<li>phpDox</li>
<li>Behat</li>
<li>PHP Mess Detector</li>
<li>PHP Dead Code Detector</li>
<li>Jenkins PHP</li>
</ol>


<p>目前有用到的有</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP With Composer]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/10/php-with-composer/"/>
    <updated>2014-09-10T22:52:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/10/php-with-composer</id>
    <content type="html"><![CDATA[<!-- more -->


<p>以前在安裝 PHP 的插件通常是透過 PEAR 安裝的，然後每個插件就要手動一個個安裝，不過現在有 <a href="https://getcomposer.org/">composer</a> 這個相依性管理工具，
用起來跟 NPM 感覺差不多，只要定義好需要用哪些套件和版本就會幫忙安裝好。</p>

<h3>安裝方法</h3>

<pre><code>curl -sS https://getcomposer.org/installer | php  
mv composer.phar /usr/local/bin/composer 
</code></pre>

<h3>基本用法</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分散式系統的簡介]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/09/fen-san-shi-xi-tong-de-jian-jie/"/>
    <updated>2014-09-09T23:01:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/09/fen-san-shi-xi-tong-de-jian-jie</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://the-paper-trail.org/blog/distributed-systems-theory-for-the-distributed-systems-engineer/">Distributed systems theory for the distributed systems engineer</a> 這篇文章介紹了一些分散式系統的概念，
可以作為入門看一下裡面提到的東西，作者是回應一個在 twitter 上發問的問題而寫的文章，而在這篇<a href="https://twitter.com/gwenshap/status/497203248332165121">tweet</a>的後面
也有其他可以參考的推文可以去研究研究。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Cherry-pick]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/08/git-cherry-pick/"/>
    <updated>2014-09-08T22:46:39+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/08/git-cherry-pick</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在看 <code>Android 核心剖析</code> 時得知一個有趣的命令 <code>git cherry-pick</code> ，似乎是可以取得單獨的 commit 然後
合併到目前的分支，如果專案在多分支開發的時候，有些需要在多個分支加入同一份修改的時候可以使用 <code>git cherry-pick</code>，
避免分支合併到不需要的 commit。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[增強 Sublime Text 2 側欄功能]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/07/zeng-qiang-sublime-text-2-ce-lan-gong-neng/"/>
    <updated>2014-09-07T22:43:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/07/zeng-qiang-sublime-text-2-ce-lan-gong-neng</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近有人問我 Sublime Text 可以不可以搜尋一次搜尋所有檔案，在網路上搜尋之後找到 <a href="https://github.com/titoBouzout/SideBarEnhancements">SideBarEnhancements</a> 這個套件，
但是這個套件在 Package Control 找不到後來才發現現在只有支援 <code>Sublime Text 3</code> ， 如果要安裝可以參考這篇文章 <a href="http://stackoverflow.com/questions/21630440/no-more-sidebarenhacements-in-sublime-text-2">no-more-sidebarenhacements-in-sublime-text-2</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub 設計CSS]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/06/github-she-ji-css/"/>
    <updated>2014-09-06T22:36:23+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/06/github-she-ji-css</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://markdotto.com/2014/07/23/githubs-css/">GitHub’s CSS</a> 提到 GihHub 本身如何設計他們的 CSS 。文章裡面分成以下幾種部分。</p>

<ul>
<li>Quick facts</li>
<li>Preprocessor</li>
<li>Architecture</li>
<li>Linting</li>
<li>Two bundles</li>
<li>Included via Sprockets</li>
<li>Performance</li>
<li>Documentation</li>
<li>Primer</li>
<li>Refactoring</li>
</ul>

]]></content>
  </entry>
  
</feed>

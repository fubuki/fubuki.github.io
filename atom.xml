<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-10-12T21:04:58+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSDC 2014 Day 2]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/12/jsdc-2014-day-2/"/>
    <updated>2014-10-12T20:46:32+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/12/jsdc-2014-day-2</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>Panel Talk: Hello JSDC!</h3>

<p>哪時需要開發一個新的 feacture libaray?</p>

<p>程式開發而言是興趣還是工作?</p>

<p>還有什麼其他興趣?</p>

<p>如何規劃自己的時間</p>

<p>如何變成專業的程式設計師?</p>

<h3>Koa &ndash; Asynchronous Decorators as Middleware</h3>

<p>列了一些 node.js clallback solutions</p>

<p>ES6 Promises</p>

<p>ES7 Async/Await with Promises</p>

<p>Uses co for control flow</p>

<h4>Koa vs. Express</h4>

<ol>
<li>Error handling</li>
<li>Async/Await-style control folow</li>
<li>Decorator pattern</li>
</ol>


<h4>Koa vs. Hapi</h4>

<ol>
<li>koa is lean, Hapi is robust</li>
<li>Converntion (Hapi) vs. Configuration (Koa)</li>
</ol>


<h4>Koa 的使用場景</h4>

<p>初學者使用 express ,團隊使用 hapi hapi 有良好的文件支援</p>

<h3>Teaching Git and GitHub with Node.js</h3>

<p>介紹 workshopper 這個開源專案，可以自己建立自己的教學工具。</p>

<p>Git-it</p>

<p>Use Git to Check Git</p>

<p>Verifying lessons</p>

<p>Git-it Lession</p>

<p>介紹 Git-it Ecosystem</p>

<p>使用 Request 呼叫 Github api</p>

<p>reporobot server</p>

<p><a href="https://education.github.com/pack">git-it</a></p>

<h3>Leveraging ZMQ with Node.js</h3>

<p>介紹 zeromq 並且支援那些通信方式。<br/>
如何使用 zeromq 建立一個系統。</p>

<h3>大型互聯網公司前端團隊的那些事兒</h3>

<p>夜間模式:在環境光線太暗的時候將顏色變暗。</p>

<p>使用JS控制圖片，讓圖片動起來。</p>

<p>0.9 秒的故事:從 web 頁面轉成使用 navtive app。</p>

<p>孔雀翎的故事:讓 PSD 自動轉成頁面。</p>

<h3>Node.js, p2p and MAD SCIENCE</h3>

<p>javascript and bittorrent</p>

<p>bittorrent 的運作方式</p>

<p><a href="https://github.com/mafintosh/torrent-stream">torrent-stream</a></p>

<p><a href="https://github.com/mafintosh/peerwiki">peerflix</a>
<a href="https://github.com/feross/instant.io">torrent-mount</a></p>

<h3>GithHub 大冒險</h3>

<p>GitHub 有 70%員工 遠端工作</p>

<p>accessibility</p>

<p>FRONT-END + DESIGN</p>

<p>使用 hubot 執行自動化測試</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSDC 2014 Day 1]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/11/jsdc-2014-day-1/"/>
    <updated>2014-10-11T20:11:00+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/11/jsdc-2014-day-1</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>Future of Enterprise Web Applications</h3>

<p>介紹一些建構js app工具</p>

<p>js 框架</p>

<p>What about micro-frameworks?</p>

<p>主要介紹 ext js</p>

<p>跟那些客戶合作開發應用</p>

<h3>Use Node Modules In The Browser With Browserify</h3>

<p>js for cat</p>

<p>art fo node</p>

<p>browserfiy handbook</p>

<p>nodeschool.io</p>

<p>介紹 bowserify 的 plugin</p>

<p>如何 npm 發布模組</p>

<p>介紹一些使用 bowserify 的有趣模組</p>

<p>使用 bowserify 壓縮合併檔案</p>

<h3>CNPM: 打造企業級私有NPM</h3>

<p>兩岸距離:最遙遠的距離</p>

<p>Node.js in 誠品書店</p>

<p><a href="http://blog.nodejs.org/2013/11/26/npm-post-mortem/">scalenpm</a>
為什麼要做CNPM</p>

<p>CNPM 使用 MySQL 取代 Couchdb</p>

<p>支付寶登入首頁使用 node.js</p>

<h3>react/flux in Action</h3>

<p>React/Flux Facebook 開源的套件</p>

<p>React 負責 view Flux 負責 model</p>

<h4>誰在使用</h4>

<ol>
<li>Facebook</li>
<li>Instagram</li>
<li>Github</li>
<li>Firefox</li>
<li>Yahoo Mail</li>
</ol>


<p>React 亮點
* 元件式架構
* VDOM虛擬頁面模型
* JSX 標記語法</p>

<h4>Flux 亮點</h4>

<ul>
<li>一律重繪</li>
<li>單向資料流</li>
</ul>


<p>My Feeling About AngularJS Over Time</p>

<h4>Case Study</h4>

<h3>Functional JavaScript, why or why not?</h3>

<p><a href="bit.ly/jsdc2014-funjs">投影片</a>
使用 Haskell 講解一些 Functional Programing 的概念。</p>

<h3>RxJS for frontend developers.</h3>

<p>Observalbe : Collection + Time</p>

<p>Rxjs 提供一些處理 async 的方法。</p>

<h3>Micro Databases</h3>

<p>介紹一些小型資料庫。</p>

<p><a href="https://github.com/substack/jsdc.tw-2014">Micro Databases</a>
使用 Leveldb</p>

<p>將資料存入 blob 格式裡</p>

<p>hash-exchange</p>

<p>forkdb</p>

<p>有空可以玩玩 Leveldb 其他不太有興趣呀</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber : BDD Tool]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/10/cucumber-bdd-tool/"/>
    <updated>2014-10-10T21:58:55+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/10/cucumber-bdd-tool</id>
    <content type="html"><![CDATA[<!-- more -->


<p>今天在看跟設計 API 有關的書，裡面提到了 <a href="http://cukes.info/">Cucumber</a>，讓開發者使用 <a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin</a> 撰寫測試案例。</p>

<h4>安裝</h4>

<pre><code>composer global require 'behat/behat=2.4.*'
</code></pre>

<h4>撰寫</h4>

<ol>
<li>Features</li>
<li>Scenarios</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis 的 Bitmap 和 HyperLogLogs]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/09/redis-bitmap-hyperloglogs/"/>
    <updated>2014-10-09T23:36:30+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/09/redis-bitmap-hyperloglogs</id>
    <content type="html"><![CDATA[<!-- more -->


<p>redis 之前新增了兩個資料類型 : Bitmap 和 HyperLogLogs，現在特別紀錄一下這兩種類型的差別和用途。</p>

<h3>Bitmap</h3>

<p>Bitmap 似乎是讓 string 類型可以有 bit 層級的操作命令，目前看起來可以用在紀錄會員活耀數。</p>

<h3>HyperLogLogs</h3>

<p>HyperLogLogs 用來做基数估计的演算法，藉此可以用來做大數據分析。</p>

<p><a href="http://research.neustar.biz/2012/10/25/sketch-of-the-day-hyperloglog-cornerstone-of-a-big-data-infrastructure/">Sketch of the Day: HyperLogLog — Cornerstone of a Big Data Infrastructure</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeSWITCH and Asterisk]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/08/freeswitch-and-asterisk/"/>
    <updated>2014-10-08T23:27:46+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/08/freeswitch-and-asterisk</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在書店找書的時候發現了一本 <code>FreeSWITCH权威指南</code>，因而發現了 <code>FreeSWITCH</code> 這套軟體，跟 Asterisk 一樣可以用來建構
電話系統，然後在<code>FreeSWITCH背后的故事</code>這篇文章裡面有提到為何開發 FreeSWITCH。</p>

<p>Asterisk 和 FreeSWITCH 在網路可以看到不少人在比較，似乎 FreeSWITCH 的效能比較高但是 Asterisk 比較老用的人似乎比較多，
在中國那邊也有一個簡體中文的網站在專門介紹 FreeSWITCH，原本手上的工作是要用 Asterisk 不過有可能轉向使用 FreeSWITCH 試試。</p>

<h3>FreeSWITCH 安裝方法</h3>

<h4>從源碼安裝</h4>

<h4>使用 apt 安裝</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asterisk Pami Pagi]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/07/asterisk-pami-pagi/"/>
    <updated>2014-10-07T23:33:19+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/07/asterisk-pami-pagi</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在研究讓 PHP 控制 Asterisk ，然後看到 <a href="http://www.slideshare.net/mgornstein/phpconf-2013">Phpconf 2013 &ndash; Agile Telephony Applications with PAMI and PAGI</a> 這篇投影片有提到一些可以參考的資料和 Library。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asterisk Realtime Architecture]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/07/asterisk-realtime-architecture/"/>
    <updated>2014-10-07T23:32:11+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/07/asterisk-realtime-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<p>asterisk 可以透過 ODBC 跟 MySQL 連線然後在 MySQL 動態修改 sip user 的資訊，藉此不需要在 conf 裡面設定 sip user 的資訊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sip Library]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/06/sip-library/"/>
    <updated>2014-10-06T23:24:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/06/sip-library</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近想在手機上實現音訊通話的功能，之前有想過使用 ejabberd + xmpp 實現，不過後來還是使用 SIP 實現，剩下來的問題便是要
怎麼在手機上實現 SIP 的協定，目前在考慮的有下面三個選擇，不過其中 <a href="http://www.linphone.org/technical-corner/liblinphone/overview">liblinphone</a> 非常大，我傾向於使用 <a href="http://www.pjsip.org/">pjsip</a> 和 <a href="http://doubango.org/">doubango</a>，
另外在看 SIP 的時候意外發現也跟 webrtc 有關， web 方面如果有支援 webrtc 便能讓閱覽器透過 sip server 跟手機聊天。</p>

<ol>
<li><a href="http://www.pjsip.org/">pjsip</a></li>
<li><a href="http://www.linphone.org/technical-corner/liblinphone/overview">liblinphone</a></li>
<li><a href="http://doubango.org/">doubango</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop Lambda Architecture]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/05/hadoop-lambda-architecture/"/>
    <updated>2014-10-05T22:16:59+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/05/hadoop-lambda-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在研討會上看到一個 <a href="http://lambda-architecture.net/">Lambda Architecture</a> 讓 hadoop 分析一些 Streaming data ，說明在需要一些需要即時分析資料並且回傳到前端的程式的情形下，
資料處理速度需要非常快，因而採用了這樣一個架構， 目前我看到的組件是 hadoop 搭配 <a href="https://storm.incubator.apache.org/">storm</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 中分析記憶體的工具]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/04/linux-zhong-fen-xi-ji-yi-ti-de-gong-ju/"/>
    <updated>2014-10-04T23:18:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/04/linux-zhong-fen-xi-ji-yi-ti-de-gong-ju</id>
    <content type="html"><![CDATA[<p>列出一些網路上介紹的分析記憶體內容的工具</p>

<!-- more -->


<ol>
<li>LiME</li>
<li>Draugr</li>
<li>Volatilitux</li>
<li>Memfetch</li>
<li>Memgrep</li>
<li>Memdump</li>
<li>foriana</li>
</ol>


<p>參考資料: [Top 8 Tools To Search Memory Under Linux / Unix [ Forensics Analysis]</p>

<p>[Top 8 Tools To Search Memory Under Linux / Unix [ Forensics Analysis]:<a href="http://www.cyberciti.biz/programming/linux-memory-forensics-analysis-tools/">http://www.cyberciti.biz/programming/linux-memory-forensics-analysis-tools/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixin and Trait in PHP]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/03/mixin-and-trait-in-php/"/>
    <updated>2014-10-03T23:27:59+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/03/mixin-and-trait-in-php</id>
    <content type="html"><![CDATA[<!-- more -->


<h4>Mixin 設計模式</h4>

<p><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#mixinpatternjavascript">mixinpatternjavascript</a>，將部分或是全部的類的屬性複製到另外一個類。</p>

<h4>What is the Trait</h4>

<p><a href="http://php.net/manual/en/language.oop5.traits.php">Trait</a> 是在 PHP 5.4 新增的特性，實現了類似 Mixin 模式的方法，讓開發者更容易讓程式碼 Reuse。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第五回闇PHP勉強会]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/02/di-wu-hui-an-phpmian-qiang-hui/"/>
    <updated>2014-10-02T23:35:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/02/di-wu-hui-an-phpmian-qiang-hui</id>
    <content type="html"><![CDATA[<!-- more -->


<p>以前在找跟 PHP 內部記憶體管理相關的資料找到的東西，日本那邊一個跟 PHP 有關的讀書會，這是<a href="http://sasezaki.hatenablog.com/entry/2014/03/16/042422">連結</a>。
目前看完了 <code>入門Zend Memory Manager</code> 和 <code>こんなPHP開発者は嫌だ</code>，算是對 PHP 記憶體管理部分有些進入點，然後另外一篇投影片
提到一些跟 PHP 開發者有關的玩笑還蠻有趣的，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安裝 Asterisk GUI]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/01/installing-asterisk-gui/"/>
    <updated>2014-10-01T23:30:42+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/01/installing-asterisk-gui</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近裝完 Ansterisk 後需要一個方便的 web 介面管理，在網路上找了一下就先使用了看起來很簡單的 <code>Asterisk GUI</code>。</p>

<h4>安裝</h4>

<p>可以使用 yum 或是直接下載源碼安裝，我是直接使用 yum安裝。</p>

<pre><code>yum install asterisk-gui
</code></pre>

<h4>設定</h4>

<p>需要設定 <code>http.conf</code> 和 <code>manager.conf</code> 這兩個檔案，這兩個檔案都在 <code>/etc/asterisk/</code> 底下，設定檔裡面都有簡單的說明，只要參照裡面的說明開啟選項即可，但是如果使用 yum 安裝似乎會有問題需要設定軟連結才能正確的開啟 Asterisk GUI。</p>

<pre><code>ls /var/lib/asterisk/static-http/config &amp;&amp; rm -rf /usr/share/asterisk/static-http &amp;&amp; ln -s /var/lib/asterisk/static-http /usr/share/asterisk/static-http
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十月書單]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/30/shi-yue-shu-dan/"/>
    <updated>2014-09-30T22:13:56+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/30/shi-yue-shu-dan</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li>Build APIs You Won&rsquo;t Hate</li>
<li>告別瀑布，擁抱 Scrum：解析微軟與 Adobe 如何在 30 天內開發出新軟體</li>
<li>學徒模式：優秀軟體開發者的養成之路</li>
<li>設計模式的解析與活用</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asterisk 的 sip.conf]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/29/asterisk-de-sip-dot-conf/"/>
    <updated>2014-09-29T23:28:49+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/29/asterisk-de-sip-dot-conf</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Astreisk 的 sip 設定位於 <code>/etc/asterisk/sip.conf</code>，設定完後使用 softphone 進行測試，另外 LINE 的 VoIP 是使用 sip 和 rtp 構成的。
參考<a href="http://www.st-asterisk.com/">Asterisk基本設定ガイド</a>裡面的文章</p>

<h3>設定檔</h3>

<p>[general]<br/>
context=default<br/>
port=5060<br/>
bindaddr=0.0.0.0<br/>
srvlookup=yes<br/>
disallow=all<br/>
allow=ulaw<br/>
allow=alaw<br/>
allow=gsm<br/>
language=zh-tw</p>

<p>[201]<br/>
type=friend<br/>
類型有 peer user friend<br/>
defaultuser=201<br/>
secret=pass<br/>
密碼<br/>
canreinvite=no<br/>
host=dynamic</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Domains 處理 node.js 的 Expectation]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/28/shi-yong-domains-chu-li-node-dot-js-de-expectation/"/>
    <updated>2014-09-28T22:47:23+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/28/shi-yong-domains-chu-li-node-dot-js-de-expectation</id>
    <content type="html"><![CDATA[<!-- more -->


<p>寫 node.js 久了之後程式會慢慢變大因此有時會出現 <code>uncaughtException</code> 的問題，由於 node.js 異步的特性所以會無法抓取到錯誤並處理它，
所以在 node.js 0.8 之後出現了 domains 的模組讓開發者使用。</p>

<pre><code>var domain = require('domain');
var d = domain.create();
var serverDomain = domain.create();
serverDomain.run(function() {


});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安裝和使用 Neo4j]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/27/an-zhuang-he-shi-yong-neo4j/"/>
    <updated>2014-09-27T23:45:25+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/27/an-zhuang-he-shi-yong-neo4j</id>
    <content type="html"><![CDATA[<p>如何安裝和使用 Neo4j</p>

<!-- more -->


<h4>安裝</h4>

<pre><code>wget -O - http://debian.neo4j.org/neotechnology.gpg.key| apt-key add - # Import our signing key
echo 'deb http://debian.neo4j.org/repo stable/' &gt; /etc/apt/sources.list.d/neo4j.list # Create an Apt sources.list file
aptitude update -y # Find out about the files in our repository
aptitude install neo4j -y # Install Neo4j, community edition
</code></pre>

<h4>使用</h4>

<p>開啟 <a href="http://server-ip:7474%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E5%80%8B">http://server-ip:7474%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E5%80%8B</a> web admin 然後就可以開始玩 Neo4j</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[了解 OAuth 2.0 協定]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/26/liao-jie-oauth-2-dot-0-xie-ding/"/>
    <updated>2014-09-26T23:39:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/26/liao-jie-oauth-2-dot-0-xie-ding</id>
    <content type="html"><![CDATA[<p>最近需要建立 OAuth 2.0 的服務便去尋找一些相關的資訊。</p>

<!-- more -->


<p><a href="http://tools.ietf.org/html/rfc6749">The OAuth 2.0 Authorization Framework</a> 描述關於整個 OAuth 2.0 的 SPEC，有人已經轉換成 <a href="https://gist.github.com/chitsaou/6590756">markdown 的版本</a>看完後
便大致了解了目前在網路那些 OAuth 2.0 的 Library 並且去使用它們。</p>

<p>目前工作上是使用 <a href="https://github.com/thephpleague/oauth2-server">oauth2-server</a> 這個專案，使用的是 <code>Password</code> 的 grant type，透過輸入帳密取得 token 。</p>

<h4>Grant type</h4>

<ol>
<li>Authorization Code</li>
<li>Implicit</li>
<li>Resource Owner Password Credentials</li>
<li>Client Credentials</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINE 的 安全性問題]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/25/line-de-an-quan-xing-wen-ti/"/>
    <updated>2014-09-25T22:32:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/25/line-de-an-quan-xing-wen-ti</id>
    <content type="html"><![CDATA[<p>關於 LINE 的安全性問題。</p>

<!-- more -->


<p>日前看到在日本媒體有在報導韓國的國家情報局透過 LINE 收集訊息的事情，最後是由 LINE 的社長出面澄清此事，不過這讓我想去
了解一下 LINE 在通信上是如何加密的保障他的安全性。</p>

<p>LINE 是使用 SPDY + thrift 傳輸資料，而 SPDY 是基於 TLS 實現的本身就有加密，不過在舊的版本似乎沒有全部都走 TLS，在 LINE 的
開發 BLOG 上有寫說由於 TLS 在移動網路上會增加連接時間和導致傳輸異常便允許沒加密的網路連線，不過後面有寫在 3.9.3 版本之後全部都走
加密連線，似乎是透過 RSA 2048 bit 加密。</p>

<pre><code>Updated on 2014/06/21: LINE 3.9.3 or newer versions encrypt all message data even on mobile network like 2G, 3G and LTE
</code></pre>

<p>另外在 BLOG 的文章裡也有提到其他關於安全性的事情，不過在 Server 的資料加密就沒有提到太多的部分。</p>

<h3>參考文章</h3>

<ol>
<li><a href="http://blog.kazuhooku.com/2014/06/line.html">LINE「独自暗号化」のメリットと安全性について</a></li>
<li><a href="http://developers.linecorp.com/blog/?p=2709">LINE Security – Simple, Safe, Secure</a></li>
<li><a href="http://developers.linecorp.com/blog/?p=3262">LINEの暗号化について</a></li>
<li><a href="http://inaz2.hatenablog.com/entry/2014/07/03/000900">Android版LINE Appの通信を覗いてみる</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 的 Lambda 和 Closure]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/24/php-and-closure/"/>
    <updated>2014-09-24T23:49:27+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/24/php-and-closure</id>
    <content type="html"><![CDATA[<p>PHP 的閉包語法和用途。</p>

<!-- more -->


<p>PHP 在改版之後新增了一些其他語言的特性，閉包為其中一種，以前在撰寫 js 腳本的時候會用到閉包的結構，而 Lamdbda 比較像是
從函數式語言來的。</p>

<h3>語法</h3>

<h3>用途</h3>
]]></content>
  </entry>
  
</feed>

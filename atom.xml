<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-10-03T23:40:47+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mixin and Trait in PHP]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/03/mixin-and-trait-in-php/"/>
    <updated>2014-10-03T23:27:59+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/03/mixin-and-trait-in-php</id>
    <content type="html"><![CDATA[<!-- more -->


<h4>Mixin 設計模式</h4>

<p><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#mixinpatternjavascript">mixinpatternjavascript</a>，將部分或是全部的類的屬性複製到另外一個類。</p>

<h4>What is the Trait</h4>

<p><a href="http://php.net/manual/en/language.oop5.traits.php">Trait</a> 是在 PHP 5.4 新增的特性，實現了類似 Mixin 模式的方法，讓開發者更容易讓程式碼 Reuse。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第五回闇PHP勉強会]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/02/di-wu-hui-an-phpmian-qiang-hui/"/>
    <updated>2014-10-02T23:35:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/02/di-wu-hui-an-phpmian-qiang-hui</id>
    <content type="html"><![CDATA[<!-- more -->


<p>以前在找跟 PHP 內部記憶體管理相關的資料找到的東西，日本那邊一個跟 PHP 有關的讀書會，這是<a href="http://sasezaki.hatenablog.com/entry/2014/03/16/042422">連結</a>。
目前看完了 <code>入門Zend Memory Manager</code> 和 <code>こんなPHP開発者は嫌だ</code>，算是對 PHP 記憶體管理部分有些進入點，然後另外一篇投影片
提到一些跟 PHP 開發者有關的玩笑還蠻有趣的，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安裝 Asterisk GUI]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/01/installing-asterisk-gui/"/>
    <updated>2014-10-01T23:30:42+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/01/installing-asterisk-gui</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近裝完 Ansterisk 後需要一個方便的 web 介面管理，在網路上找了一下就先使用了看起來很簡單的 <code>Asterisk GUI</code>。</p>

<h4>安裝</h4>

<p>可以使用 yum 或是直接下載源碼安裝，我是直接使用 yum安裝。</p>

<pre><code>yum install asterisk-gui
</code></pre>

<h4>設定</h4>

<p>需要設定 <code>http.conf</code> 和 <code>manager.conf</code> 這兩個檔案，這兩個檔案都在 <code>/etc/asterisk/</code> 底下，設定檔裡面都有簡單的說明，只要參照裡面的說明開啟選項即可，但是如果使用 yum 安裝似乎會有問題需要設定軟連結才能正確的開啟 Asterisk GUI。</p>

<pre><code>ls /var/lib/asterisk/static-http/config &amp;&amp; rm -rf /usr/share/asterisk/static-http &amp;&amp; ln -s /var/lib/asterisk/static-http /usr/share/asterisk/static-http
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十月書單]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/30/shi-yue-shu-dan/"/>
    <updated>2014-09-30T22:13:56+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/30/shi-yue-shu-dan</id>
    <content type="html"><![CDATA[<!-- more -->


<ol>
<li>Build APIs You Won&rsquo;t Hate</li>
<li>告別瀑布，擁抱 Scrum：解析微軟與 Adobe 如何在 30 天內開發出新軟體</li>
<li>學徒模式：優秀軟體開發者的養成之路</li>
<li>設計模式的解析與活用</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asterisk 的 sip.conf]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/29/asterisk-de-sip-dot-conf/"/>
    <updated>2014-09-29T23:28:49+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/29/asterisk-de-sip-dot-conf</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Astreisk 的 sip 設定位於 <code>/etc/asterisk/sip.conf</code>，設定完後使用 softphone 進行測試，另外 LINE 的 VoIP 是使用 sip 和 rtp 構成的。
參考<a href="http://www.st-asterisk.com/">Asterisk基本設定ガイド</a>裡面的文章</p>

<h3>設定檔</h3>

<p>[general]<br/>
context=default<br/>
port=5060<br/>
bindaddr=0.0.0.0<br/>
srvlookup=yes<br/>
disallow=all<br/>
allow=ulaw<br/>
allow=alaw<br/>
allow=gsm<br/>
language=zh-tw</p>

<p>[201]<br/>
type=friend<br/>
類型有 peer user friend<br/>
defaultuser=201<br/>
secret=pass<br/>
密碼<br/>
canreinvite=no<br/>
host=dynamic</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Domains 處理 node.js 的 Expectation]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/28/shi-yong-domains-chu-li-node-dot-js-de-expectation/"/>
    <updated>2014-09-28T22:47:23+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/28/shi-yong-domains-chu-li-node-dot-js-de-expectation</id>
    <content type="html"><![CDATA[<!-- more -->


<p>寫 node.js 久了之後程式會慢慢變大因此有時會出現 <code>uncaughtException</code> 的問題，由於 node.js 異步的特性所以會無法抓取到錯誤並處理它，
所以在 node.js 0.8 之後出現了 domains 的模組讓開發者使用。</p>

<pre><code>var domain = require('domain');
var d = domain.create();
var serverDomain = domain.create();
serverDomain.run(function() {


});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安裝和使用 Neo4j]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/27/an-zhuang-he-shi-yong-neo4j/"/>
    <updated>2014-09-27T23:45:25+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/27/an-zhuang-he-shi-yong-neo4j</id>
    <content type="html"><![CDATA[<p>如何安裝和使用 Neo4j</p>

<!-- more -->


<h4>安裝</h4>

<pre><code>wget -O - http://debian.neo4j.org/neotechnology.gpg.key| apt-key add - # Import our signing key
echo 'deb http://debian.neo4j.org/repo stable/' &gt; /etc/apt/sources.list.d/neo4j.list # Create an Apt sources.list file
aptitude update -y # Find out about the files in our repository
aptitude install neo4j -y # Install Neo4j, community edition
</code></pre>

<h4>使用</h4>

<p>開啟 <a href="http://server-ip:7474%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E5%80%8B">http://server-ip:7474%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E5%80%8B</a> web admin 然後就可以開始玩 Neo4j</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[了解 OAuth 2.0 協定]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/26/liao-jie-oauth-2-dot-0-xie-ding/"/>
    <updated>2014-09-26T23:39:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/26/liao-jie-oauth-2-dot-0-xie-ding</id>
    <content type="html"><![CDATA[<p>最近需要建立 OAuth 2.0 的服務便去尋找一些相關的資訊。</p>

<!-- more -->


<p><a href="http://tools.ietf.org/html/rfc6749">The OAuth 2.0 Authorization Framework</a> 描述關於整個 OAuth 2.0 的 SPEC，有人已經轉換成 <a href="https://gist.github.com/chitsaou/6590756">markdown 的版本</a>看完後
便大致了解了目前在網路那些 OAuth 2.0 的 Library 並且去使用它們。</p>

<p>目前工作上是使用 <a href="https://github.com/thephpleague/oauth2-server">oauth2-server</a> 這個專案，使用的是 <code>Password</code> 的 grant type，透過輸入帳密取得 token 。</p>

<h4>Grant type</h4>

<ol>
<li>Authorization Code</li>
<li>Implicit</li>
<li>Resource Owner Password Credentials</li>
<li>Client Credentials</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINE 的 安全性問題]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/25/line-de-an-quan-xing-wen-ti/"/>
    <updated>2014-09-25T22:32:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/25/line-de-an-quan-xing-wen-ti</id>
    <content type="html"><![CDATA[<p>關於 LINE 的安全性問題。</p>

<!-- more -->


<p>日前看到在日本媒體有在報導韓國的國家情報局透過 LINE 收集訊息的事情，最後是由 LINE 的社長出面澄清此事，不過這讓我想去
了解一下 LINE 在通信上是如何加密的保障他的安全性。</p>

<p>LINE 是使用 SPDY + thrift 傳輸資料，而 SPDY 是基於 TLS 實現的本身就有加密，不過在舊的版本似乎沒有全部都走 TLS，在 LINE 的
開發 BLOG 上有寫說由於 TLS 在移動網路上會增加連接時間和導致傳輸異常便允許沒加密的網路連線，不過後面有寫在 3.9.3 版本之後全部都走
加密連線，似乎是透過 RSA 2048 bit 加密。</p>

<pre><code>Updated on 2014/06/21: LINE 3.9.3 or newer versions encrypt all message data even on mobile network like 2G, 3G and LTE
</code></pre>

<p>另外在 BLOG 的文章裡也有提到其他關於安全性的事情，不過在 Server 的資料加密就沒有提到太多的部分。</p>

<h3>參考文章</h3>

<ol>
<li><a href="http://blog.kazuhooku.com/2014/06/line.html">LINE「独自暗号化」のメリットと安全性について</a></li>
<li><a href="http://developers.linecorp.com/blog/?p=2709">LINE Security – Simple, Safe, Secure</a></li>
<li><a href="http://developers.linecorp.com/blog/?p=3262">LINEの暗号化について</a></li>
<li><a href="http://inaz2.hatenablog.com/entry/2014/07/03/000900">Android版LINE Appの通信を覗いてみる</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 的 Lambda 和 Closure]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/24/php-and-closure/"/>
    <updated>2014-09-24T23:49:27+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/24/php-and-closure</id>
    <content type="html"><![CDATA[<p>PHP 的閉包語法和用途。</p>

<!-- more -->


<p>PHP 在改版之後新增了一些其他語言的特性，閉包為其中一種，以前在撰寫 js 腳本的時候會用到閉包的結構，而 Lamdbda 比較像是
從函數式語言來的。</p>

<h3>語法</h3>

<h3>用途</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socket.IO Meetup]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/23/socket-dot-io-meetup/"/>
    <updated>2014-09-23T23:51:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/23/socket-dot-io-meetup</id>
    <content type="html"><![CDATA[<p>在日本的一場跟 Socket.IO 有關的會議。</p>

<!-- more -->


<p><a href="http://www.ustream.tv/recorded/49506480">影片</a></p>

<p>在尋找跟 socket.io-adapter 相關的資訊的時候找到的，<a href="http://connpass.com/event/6911/">Socket.IO Meetup</a> 有邀請到 socket.io 的作者 <code>Guillermo</code>，
裡面有些 LT 很蠻有趣的， 然後重點在於 <code>Guillermo</code> 的 keynote，需要尋找一下演講內容。</p>

<h3>MQTT.IO</h3>

<p><a href="https://speakerdeck.com/hakobera/mqtt-dot-io">MATT.IO</a></p>

<h3>socket.io on SmartFx</h3>

<p>投影片在這 <a href="http://www.slideshare.net/ssuser69ee9b/socketio-on-smartfx">socketio-on-smartfx</a>，似乎是跟 FX 有關的公司，利用 socket.io 更新前端的資料，投影片裡面有寫他們是用 <a href="https://github.com/takeshy/socket.io-reqev">socket.io-reqev</a> 開發的，
包裹 socket.io 的 framework，裡面比較有趣的部分是 socket.io 會將自身的狀態更新到資料庫然後 web server 會從 DB 裡面隨機選出一個 socket.io的連結給 client。</p>

<h3>Web-based multitrack recording</h3>

<p><a href="https://github.com/kuu/WebMTR">WebMTR</a></p>

<h3>Socket.IO 1.0 Client For Java</h3>

<p><a href="https://speakerdeck.com/nkzawa/socket-dot-io-1-dot-0-client-for-javafalseshao-jie">Socket.IO 1.0 Client for Java</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[淘寶技術這十年]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/22/tao-bao-ji-shu-zhe-shi-nian/"/>
    <updated>2014-09-22T23:53:39+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/22/tao-bao-ji-shu-zhe-shi-nian</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近看完了<code>淘寶技術這十年</code>這本書，道盡淘寶技術的發展，從 LAMP 到 JAVA 這其中有些想法可以參考，
在擴展上和建構整個系統的歷史上可以看到淘寶如何建構 DB CDN Cache 還有硬體的過程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js and Php-fpm]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/21/node-dot-js-and-php-fpm/"/>
    <updated>2014-09-21T22:01:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/21/node-dot-js-and-php-fpm</id>
    <content type="html"><![CDATA[<p>php-fpm 實現 fast-cgi 的規格來處理 php script，而 node.js 就可以透過 fast-cgi 執行跟 php-fpm 通信執行 php script。</p>

<!-- more -->


<p>網路上有一些已經時間 node.js 跟 fast-cgi 通信的 library，不過都有點舊，之前有實際跑了一下會有些問題，不過大致上
從別人寫的 library 和 <a href="http://www.fastcgi.com/drupal/node/6?q=node/22">FastCGI Specification</a> 可以了解 fast-cgi 的通信接口，之後可以自己玩玩看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socker.io 1.0 版本有哪些變動]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/21/whats-new-in-socket-dot-io-1-dot-0/"/>
    <updated>2014-09-21T21:43:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/21/whats-new-in-socket-dot-io-1-dot-0</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://juriy.com/p/socket-io.html">What&rsquo;s new in Socket.IO 1.0</a>裡面介紹新版本的架構和哪些更動的地方，可以藉由這篇文章看出
Sockert.io 分成哪些部分。</p>

<ol>
<li>engine.io</li>
<li>engine.io-client</li>
<li>engine.io-parser</li>
<li>socket.io</li>
<li>socket.io-adapter</li>
<li>socket.io-client</li>
<li>socket.io-parser</li>
<li>socket.io-protocol</li>
<li>socket.io-redis</li>
<li>socket.io-emitter</li>
</ol>


<p>另外是關於 scale out 的問題，在 <a href="https://medium.com/@3rdeden/cluster-fucks-when-scaling-socket-io-2c8ad1153332">Cluster fucks when scaling Socket.IO</a> 有提到一些作者覺得當 socket.io scale out 需要
考慮的事情，而在 1.0 版本裡面把 redis 的部分拆開了，可以換用其他方式實現 cluster 架構，在 <a href="https://github.com/Automattic/socket.io/issues/1457">Scalability of socket.io 1.0 in Node.js cluster</a>
裡面有提到一些可以參考的例子。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何建構一個大型的 Javascript 結構]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/20/large-scale-javascript-application-architecture/"/>
    <updated>2014-09-20T23:41:31+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/20/large-scale-javascript-application-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://www.slideshare.net/jibyjohnc/jqquerysummit-largescale-javascript-application-architecture">largescale-javascript-application-architecture</a> 提到一些如何建構一個大型的 Javascript 結構的概念可最為參考，裡面主要提到 MVC 的概念
和一些 Javascript 的設計模式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Singleton Pattern]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/20/javascript-singleton-pattern/"/>
    <updated>2014-09-20T23:21:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/20/javascript-singleton-pattern</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Javascript 的單例模式確保對象在全域環境下只會有一個實例。</p>

<h3>使用全域變數實現</h3>

<h3>使用閉包</h3>

<h3>重寫 Constructor 構造函數</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LEGY (LINE Event Gateway)]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/19/legy-line-event-gateway/"/>
    <updated>2014-09-19T23:44:34+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/19/legy-line-event-gateway</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前有機會看到 LINE　的整個架構圖的時候看到一個 LEGY 的區塊，看起來是負責跟 Client 端連結的部分，並且所有的平台都是透過 LEGY 跟後端程式連結，
之後在 Line 的開發者大會跟一些 twitter上的訊息得知 LEGY (LINE Event Gateway) 使用 erlang 撰寫的組件，負責分發前端傳來的請求，據說之後會在 LINE Engineers&#8217; Blog 有
更詳盡的介紹。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Session Handler]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/18/php-session-handler/"/>
    <updated>2014-09-18T23:16:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/18/php-session-handler</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在使用 node.js 搭建 WEB 聊天伺服器的時候，需要跟 PHP 端共用 session ，當時是使用 memcached 儲存 session 資訊，
但是預設是使用 PHP 的序列化格式，所以換成 msgpack 和 igbinary 兩種格式測試，使用 <code>session_set_save_handler</code> 實現，
如此一來透過 memcached 分享兩個平台的認證資訊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install and Use docker.io]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/17/install-and-use-docker-dot-io/"/>
    <updated>2014-09-17T23:35:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/17/install-and-use-docker-dot-io</id>
    <content type="html"><![CDATA[<p>在 Centos 下安裝和使用 docker.io。</p>

<!-- more -->


<h3>安裝</h3>

<pre><code>Centos
yum install docker-io
service docker start

Ubuntu
curl -sSL https://get.docker.io/ubuntu/ | sudo sh
</code></pre>

<h3>使用</h3>

<pre><code>docker pull centos
docker run centos:latest cat /etc/centos-release
</code></pre>

<h3>建立 LAMP 環境</h3>

<p>docker-io 藉由映像檔建立環境，所有想說可不可以藉由 docker 快速建立 LAMP 的環境，在網路上找了一下有人寫了類似的東西，
<a href="http://knowledge.sakura.ad.jp/tech/1811/">これから始める「DockerでかんたんLAMP環境 for CentOS」</a> 和 <a href="https://github.com/kunihirotanaka/docker-centos-lamp">docker-centos-lamp</a> 作為參考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis Cluster]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/16/redis-cluster/"/>
    <updated>2014-09-16T23:58:35+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/16/redis-cluster</id>
    <content type="html"><![CDATA[<p>官方 redis  cluster 的規範 和 php-redis library 目前的情況</p>

<!-- more -->


<p><a href="http://redis.io/topics/cluster-spec">cluster-spec</a> redis 的 cluster 架構，然後 <a href="https://github.com/nicolasff/phpredis/issues/476">phpredis</a> 也有在撰寫支援 cluster 結構的版本。</p>
]]></content>
  </entry>
  
</feed>

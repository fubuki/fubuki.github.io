<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-10-23T21:30:07+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Git Patch 的功能]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/22/git-patch/"/>
    <updated>2014-10-22T22:28:29+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/22/git-patch</id>
    <content type="html"><![CDATA[<!-- more -->


<p>有時需要將一些在本機上開發專案產生的修改部分丟給別人就可以使用 git 的 patch 功能。</p>

<h3>git format-patch</h3>

<p>git 本身用來製作 patch 的指令。</p>

<pre><code>git format-patch
git am xxx.patch
</code></pre>

<h3>git diff patch</h3>

<p>使用 git diff 產生的 patch。</p>

<pre><code>git diff prev_commit commit &gt; patch.diff 
git apply patch.diff 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freeswitch 動態更改 Sip 使用者資訊]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/21/freeswitch-xml-curl/"/>
    <updated>2014-10-21T22:29:29+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/21/freeswitch-xml-curl</id>
    <content type="html"><![CDATA[<!-- more -->


<p>freeswitch 預設是透過將 sip 使用者資訊寫入一份 xml 檔案，不過可以透過一些方法動態增加使用者資訊，
目前可以透過 <code>xml_curl</code> 這個模塊將 freeswitch 一些行為使用 curl 的方式跟外部 server 連接認證使用者資料。</p>

<h4>安裝 xml_curl</h4>

<h4>載入 xml_curl</h4>

<h4>設定 Freeswitch-Contrib</h4>

<h4>動態增加使用者資料</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chocolatey : Windows 的套件管理工具]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/20/chocolatey/"/>
    <updated>2014-10-20T21:53:49+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/20/chocolatey</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://chocolatey.org/">chocolatey</a> 是一款 Windows 用的套件管理工具，類似 Ubuntu 的 apt 和 Centos 的 yum，看了一下官網支援不少
開源套件讓使用者能夠一個指令將軟體安裝好，此外也有 GUI 介面可以使用，目前看起來一些在 Linux 上面的開發套件都已經
可以透過 <a href="https://chocolatey.org/">chocolatey</a> 安裝。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github 的 IDE : Atom]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/19/github-atom/"/>
    <updated>2014-10-19T19:52:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/19/github-atom</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="https://atom.io/">Atom</a> 是 Github 基於 node.js + webkit 開發強調模組化的一款編輯器，看過源碼可以知道是使用 CoffeeScript 和 LESS 撰寫的，
因此如果是 web 的開發者也能修改界面，裡面也集成了一些還蠻實用的功能，網路上有人說會有些不順的感覺不過我下載執行感覺起來還蠻順的，
有些工作上要使用的 Package 也有人開發，之後如果使用順利的話會從 ST 換成 Atom。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPConf Taiwan 2014]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/18/phpconf-taiwan-2014/"/>
    <updated>2014-10-18T21:44:03+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/18/phpconf-taiwan-2014</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>新浪微博 LAMP 優化之路</h3>

<p>PHP NG 主要作者<br/>
每天20憶pv 50億 hits<br/>
400台前端機器</p>

<h4>2012年3月</h4>

<p>使用 apache + php</p>

<p>17w 行代碼導致很難維護</p>

<ol>
<li>性能優化</li>
<li>架構優化</li>
<li>基礎優化</li>
<li>遠程優化</li>
</ol>


<p>Yaf c base framework 類似 phalcon
只實現基本功能
不需要 ORM</p>

<h4>Weibo 擴展</h4>

<ol>
<li>Weibo conf</li>
<li>Weibo Utils</li>
</ol>


<p>棄用 Smarty</p>

<h4>結構優化 -解耦</h4>

<ol>
<li>Pagelate</li>
<li>Bigpipe</li>
</ol>


<p>soa 的形式</p>

<h4>結構優化 &ndash; Yar rpc framewrok</h4>

<p>第一個 php和 rpc 並行的框架</p>

<p>CBigpipe 加速</p>

<p>前端 PHP 後端 C</p>

<p>升級 PHP 5.4</p>

<p>LAMP => LNMP</p>

<p>踩了一些坑</p>

<p>使用 Zend Optimizer Plus (O+) 替換 apcache</p>

<p>快於7% 到 10%</p>

<h4>性能優化 Yac</h4>

<p>主要是無鎖共享
使用 CRC 校驗資料使否出錯的問題</p>

<h4>移動微博</h4>

<p>移動佔到 70%以上</p>

<p>服務器 cpu idel 5%</p>

<p>PHP 異步調用</p>

<p>jsond</p>

<p>L0 和 L1 兩種類型的快取，分成本機和全域兩種</p>

<p>為何使用無鎖? key 包含 CRC ，使用CRC跟值校驗 降低錯誤率</p>

<h3>專案管理</h3>

<p>本職 PM<br/>
學生症候群<br/>
寫書經驗</p>

<h4>領導力</h4>

<p>冒險心
跳脫盒子
嘗試</p>

<h4>管理力</h4>

<p>一致性
遵循原則
避免意外</p>

<ol>
<li>PM = 團隊的 API</li>
<li>協助團隊看到全貌以便規劃調度</li>
<li>統一方向與做事方法</li>
</ol>


<h4>總結</h4>

<p>專案管理幫忙聚焦<br/>
最小戰鬥單位的概念</p>

<h3>whoscall &amp; mongodb</h3>

<p>講者是 whoscall cto<br/>
使用 mongodb 的經驗</p>

<h4>What does Gogolook do?</h4>

<p>Line whoscall<br/>
Caller-ID Service<br/>
介紹一下 mongodb 的基本性能
1. mongos
2. config server
3. mongod</p>

<h4>issue</h4>

<p>0th gae &ndash;> aws<br/>
Pass to laaS<br/>
No operation issue in GAE<br/>
MongoDB Production Notes<br/>
Nginx + AWS Auto-Scalling</p>

<p>The 1st issue<br/>
Page Faults 很高<br/>
Index are in Memorry  <br/>
需要大量的 Memory<br/>
刪除沒必要的 index<br/>
升級 instance (scale-up)</p>

<p>The 2nd issue<br/>
資料量變大導致 DiskIO 問題<br/>
需要更改 AWS 的設定</p>

<p>The 3rd issue<br/>
Lock rate 提高<br/>
MongoDB concurrency<br/>
一個 DB 只放 一個 collection<br/>
其他方案
非即時需要丟到 Queue 處理<br/>
等 MongoDB 更新 document-lock的功能</p>

<p>The 4th issue<br/>
shard 間資料希望能平均<br/>
由 config server 控制 <br/>
三台 config server 之間的時間差異導致 balance 掛點因而loading 不平均。<br/>
v2.6 可以 set time<br/>
shard 時間不同步會導致交易時間不一致<br/>
Object id 有使用到 timestamp 產生資料
因此如果將時間調到過去的時間會導致 Object id 碰撞的問題</p>

<p>Conclusion</p>

<ol>
<li>Index size fit in Memory</li>
<li>Disk IO</li>
<li>Database as Collection (&lt; 2.8)</li>
<li>Time sync distributed system</li>
</ol>


<p>你還會選擇 MongoDB嗎?
Redis
elestic Search</p>

<p>災後還原的方案</p>

<h3>PHP Extension 開發實務 &ndash; 補齊 PHP 遺失的 $<em>PUT 與 $</em>DELETE (FirchTsai)</h3>

<p>介紹一下 RESTful
$<em>PUT<br/>
$</em>DELETE<br/>
違反了 RFC 2616 不應該實作到 PHP裡<br/>
php://input<br/>
處理 mulipart</p>

<p>RFC 2388 mulipart 是什麼?</p>

<p>別忘了 $_FILES</p>

<p>EPV</p>

<p>介紹Extension 的優點和架構<br/>
主要是 SAPI 讓 server 與 php 溝通</p>

<ol>
<li>官方 Zend Extension API</li>
<li>神秘版 Zend Extension API (for PHP4) 用來來知道有這個 API</li>
<li>終極版 Zend Extension API == 直接看原始碼</li>
</ol>


<p>API 文件說明極少</p>

<p>PHP_GINIT_FUNCTION
PHP_GSHUTDOWN_FUNCTION</p>

<p>PHP_MINIT_FUNCTION
PHP_MSHUTDOWN_FUNCTION</p>

<p>PHP_RINIT_FUNCTION
PHP_RSHUTDOWN_FUNCTION</p>

<p>PHP-FPM 直接將 model 掛載到身上因此不會多次呼叫 init 和 shutdown。</p>

<p>config.m4 編譯環境<br/>
config.w32</p>

<p>php_epv.h 標頭檔<br/>
epc.c 主要檔案</p>

<p>編譯工具
1. phpize
2. configure
3. make</p>

<h3>Phalcon 進行式 (SDpower)</h3>

<p>Phalcon Developer Tools<br/>
講一些Phalcon 基礎大部分都用過了
快速使用加密解密<br/>
不可逆加密<br/>
都是在 service.php 設定</p>

<h3>Building Powerful command-line application with PHP (c9s)</h3>

<p>主要是介紹 <a href="https://github.com/c9s/CLIFramework">CLIFramework</a>
Features<br/>
參考 GIT 的命令架構</p>

<p>可以研究一下 zsh</p>

<h3>實戰 HHVM Extension (Ricky)</h3>

<p>介紹 HHVM</p>

<p>Hack lang = 強型態的 PHP
官方的文件
goo.gl/PPB64m</p>

<p>HHVM Extension requirement</p>

<p>config.cmake</p>

<p>fibionacci.php</p>

<p>hphpize
cmake
make &amp;&amp; make install</p>

<p>PHP檔案只能有一個並且要用 ext 開頭</p>

<p>HNI(HHVM Native Interface)
讓 Hack 和 C++ 混用
類型互相對應</p>

<p>RTFSC == Read The Fxck Source Code
HHVM 密技<br/>
JIT::VMRegAnchor</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opus Codec]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/17/silk-codec/"/>
    <updated>2014-10-17T23:37:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/17/silk-codec</id>
    <content type="html"><![CDATA[<!-- more -->


<p>SILK 為 Skype 所使用的音訊編碼，有人跟我提過這個編碼蠻適合用在 VOIP 上面的編碼，
後來去尋找相關資料發現一個 <a href="http://opus-codec.org/comparison/">opus-codec</a> 結合了 SILK 和 CELT 兩種編碼的優點然後 FreeSWITCH 也有支援，
在 <a href="http://opus-codec.org/comparison/">opus-codec</a> 的官網上有關於編碼壓縮率和品質的比較圖，之後可以實際測試看看效果如何 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/16/elixir-language/"/>
    <updated>2014-10-16T21:55:39+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/16/elixir-language</id>
    <content type="html"><![CDATA[<p>elixir 基於 erlang vm 的一門函數式語言。</p>

<!-- more -->


<p>最近在網路上在看 o&#8217;reilly 有出哪些新書時發現了一個沒見過的單字 elixir，後來去搜尋發現是基於 erlang 的 VM (BEAM) 所
發展的語言，目前看起來是蠻新的語言不知道有沒有人使用在商業環境上，不過他在 <a href="http://elixir-lang.org/">website</a> 上寫的特性讓我蠻感興趣的，可以跟
 erlang 結合也加入了一些其他語言的特性，之後可以實做看看並且研究一下為何會提出這門語言，elixir 的 <a href="https://github.com/elixir-lang/elixir/">github</a> 可以跟一下進度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful API 的版本控制]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/15/api-version-control/"/>
    <updated>2014-10-15T23:21:36+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/15/api-version-control</id>
    <content type="html"><![CDATA[<p>紀錄一些如何對 RESTful API 進行版本控制的方法。</p>

<!-- more -->


<h4>URI</h4>

<pre><code>https://api.example.com/v1/places
</code></pre>

<h4>Hostname</h4>

<pre><code>https://api-v1.example.com/places
</code></pre>

<h4>Body and Query Params</h4>

<pre><code>1 POST /places HTTP/1.1
2 Host: api.example.com
3 Content-Type: application/json
4
5 {
6 "version" : "1.0"
7 }
</code></pre>

<h4>Custom Request Header</h4>

<p><a href="http://www.mnot.net/blog/2012/07/11/header_versioning">Bad HTTP API Smells: Version Headers</a></p>

<h4>Content Negotiation</h4>

<p><a href="https://developer.github.com/v3/media/#api-v3-media-type-and-the-future">Github Media Types</a></p>

<h4>Content Negotiation for Resources</h4>

<h4>Feature Flagging</h4>

<h4>參考資料</h4>

<ol>
<li>Build APIs You Won’t Hate</li>
<li><a href="http://www.troyhunt.com/2014/02/your-api-versioning-is-wrong-which-is.html">Your API versioning is wrong, which is why I decided to do it 3 different wrong ways </a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php 的加密方案]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/14/php-and-crypt/"/>
    <updated>2014-10-14T22:09:47+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/14/php-and-crypt</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近需要生成一些加密字串，需要研究一下要採用哪種加密演算法， md5 跟 sha1 應該是不會列入考慮， 有可能會在 bcrypt 和 scrypt 兩者之間比較
一下看是要選擇哪一個。</p>

<ol>
<li>crypt</li>
<li>bcrypt</li>
<li>scrypt</li>
</ol>


<h4>關於加密的文章</h4>

<p><a href="http://stackoverflow.com/questions/401656/secure-hash-and-salt-for-php-passwords/8050063">How to securely hash passwords?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Xhprof 測量 Php 函式效能]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/13/xhprof-php/"/>
    <updated>2014-10-13T23:45:28+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/13/xhprof-php</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前有在尋找一些關於 PHP 除錯用的工具意外看到 <a href="https://github.com/phacility/xhprof">xhprof</a>，似乎可以測量 PHP function 層級的效能，之前在測試專案效能
通常是透過 ab 去測試併發數，並沒有基於單一函式進行測試，透過這個工具應該更容易找出問題在哪，這邊有個<a href="https://blog.engineyard.com/collections/profiling-with-xhprof-and-xhgui/">教學</a>可以參考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSDC 2014 Day 2]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/12/jsdc-2014-day-2/"/>
    <updated>2014-10-12T20:46:32+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/12/jsdc-2014-day-2</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>Panel Talk: Hello JSDC!</h3>

<p>哪時需要開發一個新的 feacture libaray?</p>

<p>程式開發而言是興趣還是工作?</p>

<p>還有什麼其他興趣?</p>

<p>如何規劃自己的時間</p>

<p>如何變成專業的程式設計師?</p>

<h3>Koa &ndash; Asynchronous Decorators as Middleware</h3>

<p>列了一些 node.js clallback solutions</p>

<p>ES6 Promises</p>

<p>ES7 Async/Await with Promises</p>

<p>Uses co for control flow</p>

<h4>Koa vs. Express</h4>

<ol>
<li>Error handling</li>
<li>Async/Await-style control folow</li>
<li>Decorator pattern</li>
</ol>


<h4>Koa vs. Hapi</h4>

<ol>
<li>koa is lean, Hapi is robust</li>
<li>Converntion (Hapi) vs. Configuration (Koa)</li>
</ol>


<h4>Koa 的使用場景</h4>

<p>初學者使用 express ,團隊使用 hapi hapi 有良好的文件支援</p>

<h3>Teaching Git and GitHub with Node.js</h3>

<p>介紹 workshopper 這個開源專案，可以自己建立自己的教學工具。</p>

<p>Git-it</p>

<p>Use Git to Check Git</p>

<p>Verifying lessons</p>

<p>Git-it Lession</p>

<p>介紹 Git-it Ecosystem</p>

<p>使用 Request 呼叫 Github api</p>

<p>reporobot server</p>

<p><a href="https://education.github.com/pack">git-it</a></p>

<h3>Leveraging ZMQ with Node.js</h3>

<p>介紹 zeromq 並且支援那些通信方式。<br/>
如何使用 zeromq 建立一個系統。</p>

<h3>大型互聯網公司前端團隊的那些事兒</h3>

<p>夜間模式:在環境光線太暗的時候將顏色變暗。</p>

<p>使用JS控制圖片，讓圖片動起來。</p>

<p>0.9 秒的故事:從 web 頁面轉成使用 navtive app。</p>

<p>孔雀翎的故事:讓 PSD 自動轉成頁面。</p>

<h3>Node.js, p2p and MAD SCIENCE</h3>

<p>javascript and bittorrent</p>

<p>bittorrent 的運作方式</p>

<p><a href="https://github.com/mafintosh/torrent-stream">torrent-stream</a></p>

<p><a href="https://github.com/mafintosh/peerwiki">peerflix</a>
<a href="https://github.com/feross/instant.io">torrent-mount</a></p>

<h3>GithHub 大冒險</h3>

<p>GitHub 有 70%員工 遠端工作</p>

<p>accessibility</p>

<p>FRONT-END + DESIGN</p>

<p>使用 hubot 執行自動化測試</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSDC 2014 Day 1]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/11/jsdc-2014-day-1/"/>
    <updated>2014-10-11T20:11:00+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/11/jsdc-2014-day-1</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>Future of Enterprise Web Applications</h3>

<p>介紹一些建構js app工具</p>

<p>js 框架</p>

<p>What about micro-frameworks?</p>

<p>主要介紹 ext js</p>

<p>跟那些客戶合作開發應用</p>

<h3>Use Node Modules In The Browser With Browserify</h3>

<p>js for cat</p>

<p>art fo node</p>

<p>browserfiy handbook</p>

<p>nodeschool.io</p>

<p>介紹 bowserify 的 plugin</p>

<p>如何 npm 發布模組</p>

<p>介紹一些使用 bowserify 的有趣模組</p>

<p>使用 bowserify 壓縮合併檔案</p>

<h3>CNPM: 打造企業級私有NPM</h3>

<p>兩岸距離:最遙遠的距離</p>

<p>Node.js in 誠品書店</p>

<p><a href="http://blog.nodejs.org/2013/11/26/npm-post-mortem/">scalenpm</a>
為什麼要做CNPM</p>

<p>CNPM 使用 MySQL 取代 Couchdb</p>

<p>支付寶登入首頁使用 node.js</p>

<h3>react/flux in Action</h3>

<p>React/Flux Facebook 開源的套件</p>

<p>React 負責 view Flux 負責 model</p>

<h4>誰在使用</h4>

<ol>
<li>Facebook</li>
<li>Instagram</li>
<li>Github</li>
<li>Firefox</li>
<li>Yahoo Mail</li>
</ol>


<p>React 亮點
* 元件式架構
* VDOM虛擬頁面模型
* JSX 標記語法</p>

<h4>Flux 亮點</h4>

<ul>
<li>一律重繪</li>
<li>單向資料流</li>
</ul>


<p>My Feeling About AngularJS Over Time</p>

<h4>Case Study</h4>

<h3>Functional JavaScript, why or why not?</h3>

<p><a href="bit.ly/jsdc2014-funjs">投影片</a>
使用 Haskell 講解一些 Functional Programing 的概念。</p>

<h3>RxJS for frontend developers.</h3>

<p>Observalbe : Collection + Time</p>

<p>Rxjs 提供一些處理 async 的方法。</p>

<h3>Micro Databases</h3>

<p>介紹一些小型資料庫。</p>

<p><a href="https://github.com/substack/jsdc.tw-2014">Micro Databases</a>
使用 Leveldb</p>

<p>將資料存入 blob 格式裡</p>

<p>hash-exchange</p>

<p>forkdb</p>

<p>有空可以玩玩 Leveldb 其他不太有興趣呀</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber : BDD Tool]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/10/cucumber-bdd-tool/"/>
    <updated>2014-10-10T21:58:55+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/10/cucumber-bdd-tool</id>
    <content type="html"><![CDATA[<!-- more -->


<p>今天在看跟設計 API 有關的書，裡面提到了 <a href="http://cukes.info/">Cucumber</a>，讓開發者使用 <a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin</a> 撰寫測試案例。</p>

<h4>安裝</h4>

<pre><code>composer global require 'behat/behat=2.4.*'
</code></pre>

<h4>撰寫</h4>

<ol>
<li>Features</li>
<li>Scenarios</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis 的 Bitmap 和 HyperLogLogs]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/09/redis-bitmap-hyperloglogs/"/>
    <updated>2014-10-09T23:36:30+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/09/redis-bitmap-hyperloglogs</id>
    <content type="html"><![CDATA[<!-- more -->


<p>redis 之前新增了兩個資料類型 : Bitmap 和 HyperLogLogs，現在特別紀錄一下這兩種類型的差別和用途。</p>

<h3>Bitmap</h3>

<p>Bitmap 似乎是讓 string 類型可以有 bit 層級的操作命令，目前看起來可以用在紀錄會員活耀數。</p>

<h3>HyperLogLogs</h3>

<p>HyperLogLogs 用來做基数估计的演算法，藉此可以用來做大數據分析。</p>

<p><a href="http://research.neustar.biz/2012/10/25/sketch-of-the-day-hyperloglog-cornerstone-of-a-big-data-infrastructure/">Sketch of the Day: HyperLogLog — Cornerstone of a Big Data Infrastructure</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeSWITCH and Asterisk]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/08/freeswitch-and-asterisk/"/>
    <updated>2014-10-08T23:27:46+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/08/freeswitch-and-asterisk</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在書店找書的時候發現了一本 <code>FreeSWITCH权威指南</code>，因而發現了 <code>FreeSWITCH</code> 這套軟體，跟 Asterisk 一樣可以用來建構
電話系統，然後在<code>FreeSWITCH背后的故事</code>這篇文章裡面有提到為何開發 FreeSWITCH。</p>

<p>Asterisk 和 FreeSWITCH 在網路可以看到不少人在比較，似乎 FreeSWITCH 的效能比較高但是 Asterisk 比較老用的人似乎比較多，
在中國那邊也有一個簡體中文的網站在專門介紹 FreeSWITCH，原本手上的工作是要用 Asterisk 不過有可能轉向使用 FreeSWITCH 試試。</p>

<h3>FreeSWITCH 安裝方法</h3>

<h4>從源碼安裝</h4>

<h4>使用 apt 安裝</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asterisk Pami Pagi]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/07/asterisk-pami-pagi/"/>
    <updated>2014-10-07T23:33:19+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/07/asterisk-pami-pagi</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在研究讓 PHP 控制 Asterisk ，然後看到 <a href="http://www.slideshare.net/mgornstein/phpconf-2013">Phpconf 2013 &ndash; Agile Telephony Applications with PAMI and PAGI</a> 這篇投影片有提到一些可以參考的資料和 Library。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asterisk Realtime Architecture]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/07/asterisk-realtime-architecture/"/>
    <updated>2014-10-07T23:32:11+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/07/asterisk-realtime-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<p>asterisk 可以透過 ODBC 跟 MySQL 連線然後在 MySQL 動態修改 sip user 的資訊，藉此不需要在 conf 裡面設定 sip user 的資訊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sip Library]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/06/sip-library/"/>
    <updated>2014-10-06T23:24:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/06/sip-library</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近想在手機上實現音訊通話的功能，之前有想過使用 ejabberd + xmpp 實現，不過後來還是使用 SIP 實現，剩下來的問題便是要
怎麼在手機上實現 SIP 的協定，目前在考慮的有下面三個選擇，不過其中 <a href="http://www.linphone.org/technical-corner/liblinphone/overview">liblinphone</a> 非常大，我傾向於使用 <a href="http://www.pjsip.org/">pjsip</a> 和 <a href="http://doubango.org/">doubango</a>，
另外在看 SIP 的時候意外發現也跟 webrtc 有關， web 方面如果有支援 webrtc 便能讓閱覽器透過 sip server 跟手機聊天。</p>

<ol>
<li><a href="http://www.pjsip.org/">pjsip</a></li>
<li><a href="http://www.linphone.org/technical-corner/liblinphone/overview">liblinphone</a></li>
<li><a href="http://doubango.org/">doubango</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop Lambda Architecture]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/05/hadoop-lambda-architecture/"/>
    <updated>2014-10-05T22:16:59+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/05/hadoop-lambda-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在研討會上看到一個 <a href="http://lambda-architecture.net/">Lambda Architecture</a> 讓 hadoop 分析一些 Streaming data ，說明在需要一些需要即時分析資料並且回傳到前端的程式的情形下，
資料處理速度需要非常快，因而採用了這樣一個架構， 目前我看到的組件是 hadoop 搭配 <a href="https://storm.incubator.apache.org/">storm</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 中分析記憶體的工具]]></title>
    <link href="http://fubuki.github.io/blog/2014/10/04/linux-zhong-fen-xi-ji-yi-ti-de-gong-ju/"/>
    <updated>2014-10-04T23:18:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/10/04/linux-zhong-fen-xi-ji-yi-ti-de-gong-ju</id>
    <content type="html"><![CDATA[<p>列出一些網路上介紹的分析記憶體內容的工具</p>

<!-- more -->


<ol>
<li>LiME</li>
<li>Draugr</li>
<li>Volatilitux</li>
<li>Memfetch</li>
<li>Memgrep</li>
<li>Memdump</li>
<li>foriana</li>
</ol>


<p>參考資料: [Top 8 Tools To Search Memory Under Linux / Unix [ Forensics Analysis]</p>

<p>[Top 8 Tools To Search Memory Under Linux / Unix [ Forensics Analysis]:<a href="http://www.cyberciti.biz/programming/linux-memory-forensics-analysis-tools/">http://www.cyberciti.biz/programming/linux-memory-forensics-analysis-tools/</a></p>
]]></content>
  </entry>
  
</feed>

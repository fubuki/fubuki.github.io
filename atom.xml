<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-05-17T22:33:53+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pycon 2014 First Day]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/17/pycon-2014-first-day/"/>
    <updated>2014-05-17T21:27:52+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/17/pycon-2014-first-day</id>
    <content type="html"><![CDATA[<p>記錄一下Pycon 2014第一天(5/17)參加的議程</p>

<!-- more -->


<h2>python powered analytics for business</h2>

<p>Wes McKinney<br/>
<code>python for data analysis</code> 和 <code>pandas</code>的作者</p>

<p>python&rsquo;s role in 2014 for analytics</p>

<p>how did we get here
where are we going</p>

<p>BI</p>

<p>ETL</p>

<p>介紹一些學習資源
nbviewer.ipython.org</p>

<p>viable alternative</p>

<ul>
<li>R</li>
<li>Julia</li>
<li>Proprietary: SAS, SPSS, StatusModel</li>
<li>JVMLand</li>
</ul>


<p>PyData conferences</p>

<p>why did pandas succeed</p>

<p>an api optimized for
terminal friendliness
conposablility</p>

<p>it took avillage</p>

<p>Cython Numpy</p>

<p>maplotlib scipy</p>

<p>statsmodels ipython</p>

<h3>guiding principle</h3>

<h3>make the easy things easy</h3>

<p>讀取資料
分析資料
回歸模型</p>

<p>Medium Data</p>

<p>scikit-learn</p>

<h3>pandas the good and bad</h3>

<p>1.ecosystem compatibility</p>

<p>2.design for broad appeal</p>

<p>3.the big data problem</p>

<h3>broader data trends</h3>

<p>python r julia growing  at expense of prorietary tools</p>

<p>jvm-based big data ecosystem</p>

<p>concurrent multicore programing</p>

<h3>future</h3>

<h3>distributed in-memory data analysis</h3>

<h3>staying competitive</h3>

<h3>community building</h3>

<p>介紹datapad的功能</p>

<h2>real-time visualiztion with python and d3.js</h2>

<p>grs stock</p>

<p>大部分都是在介紹作者的視覺化圖形，這些都是用d3.js產生的。</p>

<h2>VapourSynth come doet it indicate thare avisynth will shutdown</h2>

<p>vapoursynth</p>

<p>demo a movie 一些影像處理效果</p>

<p>avisynth structure</p>

<p>VFW</p>

<p>簡介如何使用api和參數。</p>

<h2>Graph-Tool: The Efficient Network Analyzing Tool for Python</h2>

<p>如何使用 Graph-Tool</p>

<p>ux</p>

<p>pickle</p>

<h3>cerntrality measures</h3>

<p>建立圖形並且使用圖形演算法分析圖形</p>

<p>簡單離散數學</p>

<p>可以使用於拓鋪學</p>

<p> betweenness centrality</p>

<p>eigenvector centrality</p>

<p>numpy nan</p>

<p>Top N</p>

<p>SFDF</p>

<p>ARF</p>

<h2>python and science</h2>

<p>講解python 在科學計算上的歷史和進展</p>

<p>beyond numpy: a whole ecosystem</p>

<p>trending topic at strata conference 2011 &ndash; 2014</p>

<p>cs 109</p>

<p>numfocus.org</p>

<p>book</p>

<p><a href="https://wakari.io/">https://wakari.io/</a></p>

<p><a href="http://fivethirtyeight.com/">http://fivethirtyeight.com/</a></p>

<h2>DMRL: A versatile Python tool to assess DNA methylation variation and identify DMRs</h2>

<p>DNA sodium bisulfite</p>

<p>bisulfite sequence alignment</p>

<p>t-test
ANOVA
Fisher `s exact test</p>

<p>methylation distance</p>

<p>比較DNA序列 PYSAM</p>

<p>Analysis wordflow</p>

<p>前面一大部分都在介紹關於DNA 的基礎知識提到一些甲基化的東西</p>

<h2>Hacking Models with Python</h2>

<p>寫改數學模型 cluster liner respresion</p>

<p>view point</p>

<h2>Data Analysis in Python</h2>

<p>介紹 library</p>

<p>matplotlb
scikit-learn
statsmodel
numba
blaze</p>

<h2>閃電秀</h2>

<p>web bof TDD</p>

<p>midi listener</p>

<p>tornado</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phantomjs]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/14/phantomjs/"/>
    <updated>2014-05-14T21:19:15+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/14/phantomjs</id>
    <content type="html"><![CDATA[<p><a href="http://phantomjs.org/">phantomjs</a> 是類似nodejs的工具，都是使用javascript驅動，不過nodejs是使用v8引擎而phatomjs是使用webkit，
而webkit裡面除了js引擎的部分也有包含html渲染的部分，也因此phantomjs能夠生成html的頁面，就像是一個閱覽器。</p>

<p>目前在專案上我最常使用phantomjs於頁面截圖和前端js測試，可以利用phantomjs取得某個網址的頁面然後保存下來，
然後可以製作一個書籤服務並且加上網站截圖或是預覽圖的功能，phantomjs可以和Selenium針對前端作單元測試。</p>

<p>一篇關於webkit的參考資料:<a href="http://www.paulirish.com/2013/webkit-for-developers/">webkit-for-developers</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beautiful Evidence]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/12/beautiful-evidence/"/>
    <updated>2014-05-12T22:34:13+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/12/beautiful-evidence</id>
    <content type="html"><![CDATA[<p><a href="http://www.edwardtufte.com/tufte/books_be">Beautiful Evidence</a> 是在 <code>深入淺出資料分析</code>裡面提到的一本書，作者是<a href="http://en.wikipedia.org/wiki/Edward_Tufte">Edward Tufte</a>，是一位統計學家，
在做資料視覺化的時，常會不知道要選擇哪種圖表而<a href="http://en.wikipedia.org/wiki/Edward_Tufte">Edward Tufte</a>有提出一些準則可以參考，而<a href="http://www.edwardtufte.com/tufte/books_be">Beautiful Evidence</a>便是
一本關於data visualization的書，作者還有另外一本著作<code>Data Analysis for Public Policy</code>似乎是跟數據分析相關的書，
之後有時間在研究。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Carrot2 : Clustering Engine]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/12/carrot2-clustering-engine/"/>
    <updated>2014-05-12T22:22:53+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/12/carrot2-clustering-engine</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/carrot2/carrot2">Carrot2</a> 一個開源的分類引擎，之前在學習solr的時候就有看到這個開源專案，在<a href="http://search.carrot2.org/stable/search">search</a>有一個Carrot2的範例，
是針對搜尋引擎得到的結果做分類，Carrot2本身也可以和Solr集成，也能支援中文分詞器，之後研究一下內部使用哪些演算法和
如何跟solr結合。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研究jQuery原始碼]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/09/yan-jiu-jqueryyuan-shi-ma/"/>
    <updated>2014-05-09T23:04:01+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/09/yan-jiu-jqueryyuan-shi-ma</id>
    <content type="html"><![CDATA[<p>記錄一下研究jQuery的過程和方式。</p>

<!-- more -->


<p>要研究jQuery的原始碼可以先看<a href="http://robflaherty.github.io/jquery-annotated-source/">jquery-annotated-source</a>，裡面的版本是<code>1.6</code>有點舊，如果要看中文版可以推薦
看&#8221;jQuery 技术内幕&#8221;這本書，雖然版本是<code>1.7</code>也算足夠了，如果要看最新的可以去<a href="https://github.com/jquery/jquery">jQuery</a>看到尚未編譯的原始碼，
可以看到jQuery分成好幾個區塊，可以看到jQuery怎麼實現那些有趣的功能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Xsendfile 提升下載性能]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/07/shi-yong-xsendfile-ti-sheng-xia-zai-xing-neng/"/>
    <updated>2014-05-07T21:21:43+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/07/shi-yong-xsendfile-ti-sheng-xia-zai-xing-neng</id>
    <content type="html"><![CDATA[<p>X-sendfile 可以讓Server控制下載的流程，讓開發者可以透過傳送特定的header控制存取檔案的權限。</p>

<!-- more -->


<p>下面三種伺服器支援的header，伺服器不一定會預設支援X-sendfile，需要自己開啟相關的模組。</p>

<table border="1">
 <tr>
  <th>     web server  </th>
  <th>     header  </th>
 </tr>
 <tr>
  <td>     apache  </td>
  <td>     X-Sendfile  </td>
 </tr>
 <tr>
  <td>     nginx  </td>
  <td>     X-Accel-Redirect  </td>
 </tr>
 <tr>
  <td>     lighttpd  </td>
  <td>     X-LIGHTTPD-send-file  </td>
 </tr>
</table>


<p>nginx下 php的寫法。</p>

<pre><code>&lt;?php
$filePath = '/download/example.rar';
header('Content-type: application/octet-stream');
header('Content-Disposition: attachment; filename="' . basename($file) . '"');
header('X-Accel-Redirect: '.$filePath);
</code></pre>

<p>nginx的 config設定。</p>

<pre><code>location /protected/ {
    internal;
    alias   /some/path/; # note the trailing slash
}
</code></pre>

<p>nginx header參數</p>

<pre><code>X-Accel-Limit-Rate: 1024
X-Accel-Buffering: yes|no
X-Accel-Charset: utf-8
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Old IE Support Html5 Tag]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/04/old-ie-support-html5-tag/"/>
    <updated>2014-05-04T20:28:03+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/04/old-ie-support-html5-tag</id>
    <content type="html"><![CDATA[<p>舊版本IE支援 html5的方法<a href="https://github.com/aFarkas/html5shiv">html5shiv</a></p>

<!-- more -->


<pre><code>&lt;!--[if lt IE 9]&gt;
    &lt;script src="bower_components/html5shiv/html5shiv.js"&gt;&lt;/script&gt;
&lt;![endif]--&gt;
</code></pre>

<p>jQuery 有 jQuery.support.html5Clone 會檢查閱覽器是否支援html5的tag，在
jQuery 1.9以前的版本有jQuery.clean 會負責處理舊版IE在插入新的tag會遇到的issue。</p>

<p>另外還有<code>display:inline</code>的問題，在閱覽器在解釋不支援的tag時樣式會預設為<code>display:inline</code>
所以要Reset CSS。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Core 1.9 Upgrade Guide]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/03/jquery-core-1-dot-9-upgrade-guide/"/>
    <updated>2014-05-03T19:07:00+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/03/jquery-core-1-dot-9-upgrade-guide</id>
    <content type="html"><![CDATA[<p>jQuery升級到1.9需要注意的事項。</p>

<!-- more -->


<p>詳細的內容在官網的<a href="http://jquery.com/upgrade-guide/1.9/">1.9 Upgrade Guide</a>有詳細說明，目前網站最常用的通常是1.7的版本，
如果要遷移到1.9的版本要注意一下，因為1.9版本改變幅度蠻大的，之前在工作中一些寫法和
plugin就沒有辦法使用就降級到1.8版本，不過也能夠使用<a href="https://github.com/jquery/jquery-migrate">jquery-migrate</a>讓開發者使用
以前的特性，但是要注意有些特性就算裝上plugin也無法復原。</p>

<h2>記錄一下工作上影響比較大的部分</h2>

<ol>
<li>拿掉.toggle(function, function, &hellip; ) 的用法，</li>
<li>拿掉 jQuery.browser() 使用 Modernizr偵測閱覽器是否支援這個功能比較好。</li>
<li>拿掉 live換用 on 。</li>
<li>拿掉 die 換用 off 。</li>
<li>Ajax 的全域事件要綁在document上面。</li>
<li>jQuery(htmlString) versus jQuery(selectorString)</li>
<li>.attr() versus .prop()</li>
<li>$(&ldquo;input&rdquo;).attr(&ldquo;type&rdquo;, newValue) in oldIE</li>
<li>&ldquo;hover&rdquo; pseudo-event</li>
<li>移除一些jQuery沒有寫出來了函式拿掉 例如:jQuery.clean()。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[團隊管理工具清單]]></title>
    <link href="http://fubuki.github.io/blog/2014/05/02/tuan-dui-guan-li-gong-ju-qing-dan/"/>
    <updated>2014-05-02T23:24:57+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/05/02/tuan-dui-guan-li-gong-ju-qing-dan</id>
    <content type="html"><![CDATA[<p>記錄一下其他公司使用的開發工具。</p>

<!-- more -->


<ol>
<li><a href="https://basecamp.com/">Basecamp</a></li>
<li><a href="http://airbrake.io/">Airbrake</a></li>
<li><a href="http://newrelic.com/">New Relic</a></li>
<li><a href="https://codeclimate.com/">Code Climate</a></li>
<li><a href="https://saucelabs.com/">Sauce Labs</a></li>
<li><a href="http://www.zabbix.com/">Zabbix</a></li>
<li><a href="https://circleci.com/">CircleCI</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[五月書單]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/30/wu-yue-shu-dan/"/>
    <updated>2014-04-30T23:36:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/30/wu-yue-shu-dan</id>
    <content type="html"><![CDATA[<p>記錄五月要看完的書單。</p>

<!-- more -->


<ol>
<li>Testable.JavaScript</li>
<li>Google軟體測試之道</li>
<li>JavaScript The Definitive Guide</li>
<li>JavaScript Patterns</li>
<li>Learning JavaScript Design Patterns</li>
<li>社群網站的資料探勘</li>
<li>jQuery技术内幕：深入解析jQuery架构设计与实现原理</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中文分词的最大匹配法]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/26/zhong-wen-fen-ci-de-zui-da-pi-pei-fa/"/>
    <updated>2014-04-26T22:49:17+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/26/zhong-wen-fen-ci-de-zui-da-pi-pei-fa</id>
    <content type="html"><![CDATA[<p>記錄一下中文分詞的入門演算法。<br/>
1. 最大正向匹配
2. 最大逆向匹配
3. 雙向匹配</p>

<!-- more -->


<p>中文分詞一開始是使用詞典作分詞，在分詞的過程中主要有幾個原則:  <br/>
1. 切出來的詞彙越長越好，越長就能代表越複雜的意思，句子的意思也能更明確。<br/>
2. 切出來的分詞結果通常會有一些停用詞(stop words)或是詞典裡沒有的詞導致會有多餘的字出現，那類的字越少越好。</p>

<p>然後最上面提到的三個演算法其實都是對詞典作匹配，只是是從句子彺前往後匹配或者兩種方法都使用，之後有空用程式語言實踐一下演算法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyconf 2014 Second Day]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/26/rubyconf-2014-second-day/"/>
    <updated>2014-04-26T20:29:49+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/26/rubyconf-2014-second-day</id>
    <content type="html"><![CDATA[<p>記錄一下rubyconf 2014第二天(4/26)參加的議程</p>

<!-- more -->


<h3>Cores unleashed &ndash; Exploiting Parallelism in Ruby with STM (and a new VM)</h3>

<p><a href="https://speakerdeck.com/brucehsu/rubyconf-dot-tw-2014-cores-unleashed-exploiting-parallelism-in-ruby-with-stm">slide</a></p>

<h3>How the Principles of Ruby Inspired the Rails Girls Community</h3>

<p>兩位講者如何認識，並且介紹Rails Girls社群怎麼成長的。</p>

<h3>Ruby on Bioinformatics</h3>

<p>使用ruby 處理生物資訊，列了不少gem但是有的是去使用其他語言的library吧，裡面也有提到使用neo4j處理
個人的健康資料，不過跟ruby沒有太大的關係，現在比較常用還是perl和python吧。</p>

<h3>the Guide to know Ruby implementation for non-C language programer</h3>

<p>講者一開始說因為她的先生是寫ruby的programmer接觸ruby，之後就開始研究Ruby裡面的架構，
講者介紹幾個方法去研究裡面的原始碼。</p>

<h3>Growing Up &ndash; Bringing Concurrency to Ruby</h3>

<p>一開始介紹jruby和jvm，然後說明 prcoess-level和thread-level的做法，concurency的法則和
實現介紹一些實現no-block的library。</p>

<h3>Extreme Makeover &ndash; Rubygems Edition</h3>

<p>bundle，用來管理gem的依賴性，講者講了一些過去bundle的issue，ssl issue，搜尋Gem的效率過低，加上CDN，
加入一些api，建立新的index。</p>

<h3>sweaters as a service &ndash; adventures in electronic knitting</h3>

<p>講者建立一個編織機器，只要上傳圖檔就可以編織出一個圖案，似乎是使用Ruby去控制不過沒有看到整個程式碼。</p>

<h3>Improve and refactor ruby code easier</h3>

<p>利用 synvert工具作ruby 的重構。</p>

<h3>lightning talk</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socket.io Migrating to 1.0]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/25/socket-dot-io-migrating-to-1-dot-0/"/>
    <updated>2014-04-25T22:47:54+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/25/socket-dot-io-migrating-to-1-dot-0</id>
    <content type="html"><![CDATA[<p>socket.io 已經有1.0版本了，所以免不了會有些大改動，wiki上面有一篇<a href="https://github.com/LearnBoost/socket.io/wiki/Migrating-to-1.0">Migrating-to-1.0</a>可以參考，這邊就記錄
目前程式升級有影響的部分。</p>

<!-- more -->


<h2>Authentication differences</h2>

<p>以前在作認證的時候是透過<code>authorization</code>這個事件，在建立socket.io連線根據cliet端傳回的參數作處理。</p>

<pre><code>io.set('authorization', function (handshakeData, callback) {

});
</code></pre>

<p>現在有&#8217;io.use()&lsquo;這個方法，在socket建立的時候執行傳入的函式。</p>

<pre><code>io.use(function(socket, next) {
    var handshakeData = socket.request;
    // make sure the handshake data looks good as before
    // if error do this:
        // next(new Error('not authorized');
    // else just call next
    next();
});
</code></pre>

<h2>Starting the server</h2>

<p>以前會使用listen但是在1.0版本就不用了。</p>

<pre><code>var io = require('socket.io').listen(server);
</code></pre>

<p>vs</p>

<pre><code>var io = require('socket.io');
var socket = io({ /* options */ })
</code></pre>

<h2>Exposed Events</h2>

<p>似乎有些舊版的事件在新版(1.0)就消失或是使用其他事件取代。<br/>
裡面有提到一個socket.io-client manager (lib/manager.js)值得研究，以前沒有注意這個東西。</p>

<h2>Configuration differences</h2>

<p>以前設定socket.io的參數是用set之後是直接丟給socket.io。</p>

<pre><code>io.set(
    'store' ,new RedisStore({
        redisPub : pub,
        redisSub : sub,
        redisClient : client
    })
);
</code></pre>

<p>vs</p>

<pre><code>var socket = require('socket.io')({
    // options go here
});
</code></pre>

<h2>socket.io-adapter</h2>

<p>原本在0.9版本之前有<code>store</code>的選項，到1.0版本之後就拿掉了換成<code>adapter</code>，然後官方有放出<a href="https://github.com/LearnBoost/socket.io-adapter">socket.io-adapter</a>讓開發者可以
自行擴展，另外有一個<a href="https://github.com/Automattic/socket.io-redis">socket.io-redis</a>是官方放出來的參考範例，使用方法如下面所述。</p>

<pre><code>var socketio = require('socket.io');
var RedisStore = require('socket.io-redis');
var io = socketio(3000, {});
io.adapter(RedisStore({ host: host, port: port }));
</code></pre>

<p>這邊有一個參考的簡報<a href="http://www.slideshare.net/lagos.jp/socketio-10-25438209">socketio-10-25438209</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyconf 2014 First Day]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/25/rubyconf-2014-first-day/"/>
    <updated>2014-04-25T20:56:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/25/rubyconf-2014-first-day</id>
    <content type="html"><![CDATA[<p>記錄一下rubyconf 2014第一天(4/25)參加的議程</p>

<!-- more -->


<h3>Understanding Typing, Understanding Ruby</h3>

<p>關於靜態型別跟動態型別語言各自會遇到的問題，這場收益蠻多了前面提到一些以前型別的問題
，並且也提到其他語言在處理型別的方法。</p>

<h3>RubyMotion Gets A Cool New Friend: mruby on iOS</h3>

<p>使用ruby開發ios app，以前孤陋寡聞沒看過這個工具以後有機會可以拿來試試看。</p>

<h3>Practice: Refactoring with tests</h3>

<p>在講重構，不過前面講很多重構很重要然後要需要好好測試，後面就只有講一點點ruby裡面
要怎麼做&hellip;.</p>

<h3>Matz: Keynote</h3>

<p>ruby的生父的議程</p>

<h3>Teo-Happy Teams</h3>

<p>怎樣成為快樂團隊，議程中提到不少常見但是沒有實踐的開發方法或是。</p>

<h3>Tell a good story with Ruby</h3>

<p>講者學習ruby的過程和建構一個ruby程式</p>

<h3>10 Things to Make API Users Like You</h3>

<p>怎麼設計API，聽了之後沒有比較新穎的想法，大部分在以前設計API就有看過了，不過比較有共鳴的是
產生api文件，以前都是手動一個個寫說明文件常常會有參數或是輸出值對不上的問題。</p>

<h3>Make Your Rails Backstage Better</h3>

<p>講者說一下他當初開發後台的經驗，從原本使用gem到自製後台，不過有可能我使用rails沒有多久所有沒有什麼心得。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[socket.io Port問題]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/24/socket-dot-io-portwen-ti/"/>
    <updated>2014-04-24T23:09:10+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/24/socket-dot-io-portwen-ti</id>
    <content type="html"><![CDATA[<p>前端連接socket.io server遇到port問題的解決方法。</p>

<!-- more -->


<h3>haproxy</h3>

<p><a href="http://blog.davidmisshula.com/blog/2013/02/04/configure-haproxy-to-scale-multiple-nodes-with-stickiness-and-ssl/">configure-haproxy-to-scale-multiple-nodes-with-stickiness-and-ssl</a> <br/>
<a href="http://blog.carbonfive.com/2013/05/02/using-haproxy-with-socket-io-and-ssl/">using-haproxy-with-socket-io-and-ssl</a>  <br/>
這個方法有在Centos上面實作過是可行的，網路也有不少設定可以參考，不過當初只有測試websocket的方法。</p>

<h3>nginx</h3>

<p><a href="http://blog.mixu.net/2011/08/13/nginx-websockets-ssl-and-socket-io-deployment/">nginx-websockets-ssl-and-socket-io-deployment</a><br/>
nginx在1.3之後支援websocket可以最為反向代理，這個方法沒有實測過。</p>

<h3>透過改寫xhr-polling</h3>

<p><a href="http://stephenbelanger.com/2011/09/21/how-to-make-socket-io-work-behind-nginx-mostly/">how-to-make-socket-io-work-behind-nginx-mostly</a>  <br/>
這個方法是改寫xhr-polling的方法，前端就可以不用加上port就可以直接連接server，但是就不能使用其他的
連接方法了吧?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-Flow]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/24/git-flow/"/>
    <updated>2014-04-24T21:55:19+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/24/git-flow</id>
    <content type="html"><![CDATA[<p>在工作上使用git已經有一段時間了，跟同事一起開發專案時常有個問題，每個人在撰寫新功能時只有本人才知道
這個分支裡面有實現哪些功能，通常快到上線的時候就大家你併我你併他的分支後在推上去，沒有一個工作流程可以
遵循，之後有看到有篇文章描寫一個git工作流程:<a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>。</p>

<!-- more -->


<p><a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>裡面主要敘述如何管理git的分支，可以做為一個團隊如何實踐專案工作
流程的參考，然後最近才發現他有一個管理工具<a href="https://github.com/danielkummer/git-flow-cheatsheet">git-flow</a>可以更容易去實踐這套工作流程，這邊也有篇管理工具的
<a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html">介紹</a>，以後如果有空在推廣給同事使用吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown參考資料]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/23/markdowncan-kao-zi-liao/"/>
    <updated>2014-04-23T22:48:47+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/23/markdowncan-kao-zi-liao</id>
    <content type="html"><![CDATA[<p>markdown 是一個輕量級標記語言，讓使用者容易撰寫一份格式化的文件，不少網站都能支援markdown的語法例如像是Github，
語法規則可以參考<a href="http://markdown.tw/">markdown.tw</a>，原本我是使用sublime text搭配插件撰寫markdown但是沒辦法立即看到結果，就另外使用
<a href="http://markdownpad.com/">markdownPad 2</a>撰寫文章，不過最近發現一個開源專案<a href="https://github.com/joemccann/dillinger">dillinger</a>讓可以直接在閱覽器上編輯markdown文件，也能夠支援一
些雲端硬碟存取文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Information Retrieval]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/23/information-retrieval/"/>
    <updated>2014-04-23T21:42:02+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/23/information-retrieval</id>
    <content type="html"><![CDATA[<p><a href="IR">Information_retrieval</a>是指使用者在搜尋資訊的過程，而搜尋的資料有文字、圖像、影片、聲音，建構一個IR System包括以下幾種領域:</p>

<!-- more -->


<ol>
<li>自然語言處理</li>
<li>計算語言學</li>
<li>訊號處理</li>
<li>認知心理學</li>
<li>模式識別</li>
<li>Metadata</li>
</ol>


<h3>參考資料</h3>

<ol>
<li><a href="http://nlp.stanford.edu/IR-book/">Introduction to Information Retrieval </a></li>
<li><a href="http://www.mir2ed.org/">Modern Information Retrieval</a></li>
<li><a href="http://nlg.csie.ntu.edu.tw/courses/IR/IR2009.html">IR course</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yeoman Tool]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/22/yeoman-tool/"/>
    <updated>2014-04-22T23:37:09+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/22/yeoman-tool</id>
    <content type="html"><![CDATA[<p><a href="http://yeoman.io/">Yeoman</a> 是一個開發工具，讓使用者能夠建立自己的專案環境，之前在使用Phalcon的時候都需要重新建立開發環境，
之前有看到利用Yeoman建立Angularjs的專案現在就在網路上看到<a href="https://www.npmjs.org/package/generator-phalcon">generator-phalcon</a>建立專案。</p>

<!-- more -->


<h3>Yemoan 內容</h3>

<ol>
<li>yo</li>
<li>Grunt</li>
<li>Bower</li>
</ol>


<h3>安裝Yeoman</h3>

<pre><code>    npm install -g yo
</code></pre>

<h3>建立angular的專案</h3>

<pre><code>    npm install -g generator-angular  
    yo angular                         
    bower install angular-ui           
    grunt test                         
    grunt server                       
    grunt                              
</code></pre>

<h3>安裝Phalcon 模板</h3>

<pre><code>    npm install generator-phalcon
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用git做程式碼debug]]></title>
    <link href="http://fubuki.github.io/blog/2014/04/20/shi-yong-gitzuo-cheng-shi-ma-debug/"/>
    <updated>2014-04-20T17:02:31+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/04/20/shi-yong-gitzuo-cheng-shi-ma-debug</id>
    <content type="html"><![CDATA[<p>專案在多人協作的環境下有時會出現不明原因的bug，通常是因為撰寫的人沒有發現並且沒有經過良好的測試並且又併入主分支，
這導致bug隱藏在程式碼裡面，這邊就記錄一下平常使用git來找出問題點的方法。</p>

<!-- more -->


<p>通常如果知道出錯在哪個檔案可以透過git blame的指令找出此檔案最後修改的人是誰並且還可以得知最後的commit，並且還能夠
下條件限定在某些行數，下面的指令可以顯示 index.php 100行到150行之間的資訊另外我看可以下 <code>-C</code> 的選項可以顯示這段
程式碼的原始出處不過我一般沒有在使用。</p>

<pre><code>    git blame -L 100,150 index.php
</code></pre>

<p>另外一種情形是不知道問題是出錯在哪一個部分，這時可以使用<code>git bisect</code>，這個指令可以讓使用者決定從哪邊開始是運作良好
的commit，然後現在是有問題的commit，接下來會顯示從正常到有問題的commit之間還有多少筆commit並且開一個<code>no branch</code>的
分支使用者讓測試，如果目前的commit是測試出來是正常的狀態便可以下<code>git bisect good</code>告訴 bisect目前的commit是正確的，
如果是錯誤的就可以下<code>git bisect bad</code>說目前是錯誤的狀態，直到確定是在哪一筆commit出錯的，結束後下<code>git bisect reset</code>
就可以回到原本的開發環境。</p>

<pre><code>    git bisect start 開始執行bisect
    git bisect bad   目前的commit是有問題的
    git bisect good [commit] 目前已知的正常狀態是哪一個commit
    git bisect reset 結束 bisect
</code></pre>
]]></content>
  </entry>
  
</feed>

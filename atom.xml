<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Blog]]></title>
  <link href="http://fubuki.github.io/atom.xml" rel="self"/>
  <link href="http://fubuki.github.io/"/>
  <updated>2014-09-28T23:37:06+08:00</updated>
  <id>http://fubuki.github.io/</id>
  <author>
    <name><![CDATA[Fubuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Domains 處理 node.js 的 Expectation]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/28/shi-yong-domains-chu-li-node-dot-js-de-expectation/"/>
    <updated>2014-09-28T22:47:23+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/28/shi-yong-domains-chu-li-node-dot-js-de-expectation</id>
    <content type="html"><![CDATA[<!-- more -->


<p>寫 node.js 久了之後程式會慢慢變大因此有時會出現 <code>uncaughtException</code> 的問題，由於 node.js 異步的特性所以會無法抓取到錯誤並處理它，
所以在 node.js 0.8 之後出現了 domains 的模組讓開發者使用。</p>

<pre><code>var domain = require('domain');
var d = domain.create();
var serverDomain = domain.create();
serverDomain.run(function() {


});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安裝和使用 Neo4j]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/27/an-zhuang-he-shi-yong-neo4j/"/>
    <updated>2014-09-27T23:45:25+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/27/an-zhuang-he-shi-yong-neo4j</id>
    <content type="html"><![CDATA[<p>如何安裝和使用 Neo4j</p>

<!-- more -->


<h4>安裝</h4>

<pre><code>wget -O - http://debian.neo4j.org/neotechnology.gpg.key| apt-key add - # Import our signing key
echo 'deb http://debian.neo4j.org/repo stable/' &gt; /etc/apt/sources.list.d/neo4j.list # Create an Apt sources.list file
aptitude update -y # Find out about the files in our repository
aptitude install neo4j -y # Install Neo4j, community edition
</code></pre>

<h4>使用</h4>

<p>開啟 <a href="http://server-ip:7474%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E5%80%8B">http://server-ip:7474%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E5%80%8B</a> web admin 然後就可以開始玩 Neo4j</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[了解 OAuth 2.0 協定]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/26/liao-jie-oauth-2-dot-0-xie-ding/"/>
    <updated>2014-09-26T23:39:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/26/liao-jie-oauth-2-dot-0-xie-ding</id>
    <content type="html"><![CDATA[<p>最近需要建立 OAuth 2.0 的服務便去尋找一些相關的資訊。</p>

<!-- more -->


<p><a href="http://tools.ietf.org/html/rfc6749">The OAuth 2.0 Authorization Framework</a> 描述關於整個 OAuth 2.0 的 SPEC，有人已經轉換成 <a href="https://gist.github.com/chitsaou/6590756">markdown 的版本</a>看完後
便大致了解了目前在網路那些 OAuth 2.0 的 Library 並且去使用它們。</p>

<p>目前工作上是使用 <a href="https://github.com/thephpleague/oauth2-server">oauth2-server</a> 這個專案，使用的是 <code>Password</code> 的 grant type，透過輸入帳密取得 token 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINE 的 安全性問題]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/25/line-de-an-quan-xing-wen-ti/"/>
    <updated>2014-09-25T22:32:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/25/line-de-an-quan-xing-wen-ti</id>
    <content type="html"><![CDATA[<p>關於 LINE 的安全性問題。</p>

<!-- more -->


<p>日前看到在日本媒體有在報導韓國的國家情報局透過 LINE 收集訊息的事情，最後是由 LINE 的社長出面澄清此事，不過這讓我想去
了解一下 LINE 在通信上是如何加密的保障他的安全性。</p>

<p>LINE 是使用 SPDY + thrift 傳輸資料，而 SPDY 是基於 TLS 實現的本身就有加密，不過在舊的版本似乎沒有全部都走 TLS，在 LINE 的
開發 BLOG 上有寫說由於 TLS 在移動網路上會增加連接時間和導致傳輸異常便允許沒加密的網路連線，不過後面有寫在 3.9.3 版本之後全部都走
加密連線，似乎是透過 RSA 2048 bit 加密。</p>

<pre><code>Updated on 2014/06/21: LINE 3.9.3 or newer versions encrypt all message data even on mobile network like 2G, 3G and LTE
</code></pre>

<p>另外在 BLOG 的文章裡也有提到其他關於安全性的事情，不過在 Server 的資料加密就沒有提到太多的部分。</p>

<h3>參考文章</h3>

<ol>
<li><a href="http://blog.kazuhooku.com/2014/06/line.html">LINE「独自暗号化」のメリットと安全性について</a></li>
<li><a href="http://developers.linecorp.com/blog/?p=2709">LINE Security – Simple, Safe, Secure</a></li>
<li><a href="http://developers.linecorp.com/blog/?p=3262">LINEの暗号化について</a></li>
<li><a href="http://inaz2.hatenablog.com/entry/2014/07/03/000900">Android版LINE Appの通信を覗いてみる</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 的 Lambda 和 Closure]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/24/php-and-closure/"/>
    <updated>2014-09-24T23:49:27+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/24/php-and-closure</id>
    <content type="html"><![CDATA[<p>PHP 的閉包語法和用途。</p>

<!-- more -->


<p>PHP 在改版之後新增了一些其他語言的特性，閉包為其中一種，以前在撰寫 js 腳本的時候會用到閉包的結構，而 Lamdbda 比較像是
從函數式語言來的。</p>

<h3>語法</h3>

<h3>用途</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socket.IO Meetup]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/23/socket-dot-io-meetup/"/>
    <updated>2014-09-23T23:51:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/23/socket-dot-io-meetup</id>
    <content type="html"><![CDATA[<p>在日本的一場跟 Socket.IO 有關的會議。</p>

<!-- more -->


<p><a href="http://www.ustream.tv/recorded/49506480">影片</a></p>

<p>在尋找跟 socket.io-adapter 相關的資訊的時候找到的，<a href="http://connpass.com/event/6911/">Socket.IO Meetup</a> 有邀請到 socket.io 的作者 <code>Guillermo</code>，
裡面有些 LT 很蠻有趣的， 然後重點在於 <code>Guillermo</code> 的 keynote，需要尋找一下演講內容。</p>

<h3>MQTT.IO</h3>

<p><a href="https://speakerdeck.com/hakobera/mqtt-dot-io">MATT.IO</a></p>

<h3>socket.io on SmartFx</h3>

<p>投影片在這 <a href="http://www.slideshare.net/ssuser69ee9b/socketio-on-smartfx">socketio-on-smartfx</a>，似乎是跟 FX 有關的公司，利用 socket.io 更新前端的資料，投影片裡面有寫他們是用 <a href="https://github.com/takeshy/socket.io-reqev">socket.io-reqev</a> 開發的，
包裹 socket.io 的 framework，裡面比較有趣的部分是 socket.io 會將自身的狀態更新到資料庫然後 web server 會從 DB 裡面隨機選出一個 socket.io的連結給 client。</p>

<h3>Web-based multitrack recording</h3>

<p><a href="https://github.com/kuu/WebMTR">WebMTR</a></p>

<h3>Socket.IO 1.0 Client For Java</h3>

<p><a href="https://speakerdeck.com/nkzawa/socket-dot-io-1-dot-0-client-for-javafalseshao-jie">Socket.IO 1.0 Client for Java</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[淘寶技術這十年]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/22/tao-bao-ji-shu-zhe-shi-nian/"/>
    <updated>2014-09-22T23:53:39+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/22/tao-bao-ji-shu-zhe-shi-nian</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近看完了<code>淘寶技術這十年</code>這本書，道盡淘寶技術的發展，從 LAMP 到 JAVA 這其中有些想法可以參考，
在擴展上和建構整個系統的歷史上可以看到淘寶如何建構 DB CDN Cache 還有硬體的過程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js and Php-fpm]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/21/node-dot-js-and-php-fpm/"/>
    <updated>2014-09-21T22:01:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/21/node-dot-js-and-php-fpm</id>
    <content type="html"><![CDATA[<p>php-fpm 實現 fast-cgi 的規格來處理 php script，而 node.js 就可以透過 fast-cgi 執行跟 php-fpm 通信執行 php script。</p>

<!-- more -->


<p>網路上有一些已經時間 node.js 跟 fast-cgi 通信的 library，不過都有點舊，之前有實際跑了一下會有些問題，不過大致上
從別人寫的 library 和 <a href="http://www.fastcgi.com/drupal/node/6?q=node/22">FastCGI Specification</a> 可以了解 fast-cgi 的通信接口，之後可以自己玩玩看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socker.io 1.0 版本有哪些變動]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/21/whats-new-in-socket-dot-io-1-dot-0/"/>
    <updated>2014-09-21T21:43:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/21/whats-new-in-socket-dot-io-1-dot-0</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://juriy.com/p/socket-io.html">What&rsquo;s new in Socket.IO 1.0</a>裡面介紹新版本的架構和哪些更動的地方，可以藉由這篇文章看出
Sockert.io 分成哪些部分。</p>

<ol>
<li>engine.io</li>
<li>engine.io-client</li>
<li>engine.io-parser</li>
<li>socket.io</li>
<li>socket.io-adapter</li>
<li>socket.io-client</li>
<li>socket.io-parser</li>
<li>socket.io-protocol</li>
<li>socket.io-redis</li>
<li>socket.io-emitter</li>
</ol>


<p>另外是關於 scale out 的問題，在 <a href="https://medium.com/@3rdeden/cluster-fucks-when-scaling-socket-io-2c8ad1153332">Cluster fucks when scaling Socket.IO</a> 有提到一些作者覺得當 socket.io scale out 需要
考慮的事情，而在 1.0 版本裡面把 redis 的部分拆開了，可以換用其他方式實現 cluster 架構，在 <a href="https://github.com/Automattic/socket.io/issues/1457">Scalability of socket.io 1.0 in Node.js cluster</a>
裡面有提到一些可以參考的例子。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何建構一個大型的 Javascript 結構]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/20/large-scale-javascript-application-architecture/"/>
    <updated>2014-09-20T23:41:31+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/20/large-scale-javascript-application-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://www.slideshare.net/jibyjohnc/jqquerysummit-largescale-javascript-application-architecture">largescale-javascript-application-architecture</a> 提到一些如何建構一個大型的 Javascript 結構的概念可最為參考，裡面主要提到 MVC 的概念
和一些 Javascript 的設計模式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Singleton Pattern]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/20/javascript-singleton-pattern/"/>
    <updated>2014-09-20T23:21:22+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/20/javascript-singleton-pattern</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Javascript 的單例模式確保對象在全域環境下只會有一個實例。</p>

<h3>使用全域變數實現</h3>

<h3>使用閉包</h3>

<h3>重寫 Constructor 構造函數</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LEGY (LINE Event Gateway)]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/19/legy-line-event-gateway/"/>
    <updated>2014-09-19T23:44:34+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/19/legy-line-event-gateway</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前有機會看到 LINE　的整個架構圖的時候看到一個 LEGY 的區塊，看起來是負責跟 Client 端連結的部分，並且所有的平台都是透過 LEGY 跟後端程式連結，
之後在 Line 的開發者大會跟一些 twitter上的訊息得知 LEGY (LINE Event Gateway) 使用 erlang 撰寫的組件，負責分發前端傳來的請求，據說之後會在 LINE Engineers&#8217; Blog 有
更詳盡的介紹。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Session Handler]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/18/php-session-handler/"/>
    <updated>2014-09-18T23:16:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/18/php-session-handler</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在使用 node.js 搭建 WEB 聊天伺服器的時候，需要跟 PHP 端共用 session ，當時是使用 memcached 儲存 session 資訊，
但是預設是使用 PHP 的序列化格式，所以換成 msgpack 和 igbinary 兩種格式測試，使用 <code>session_set_save_handler</code> 實現，
如此一來透過 memcached 分享兩個平台的認證資訊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install and Use docker.io]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/17/install-and-use-docker-dot-io/"/>
    <updated>2014-09-17T23:35:45+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/17/install-and-use-docker-dot-io</id>
    <content type="html"><![CDATA[<p>在 Centos 下安裝和使用 docker.io。</p>

<!-- more -->


<h3>安裝</h3>

<pre><code>Centos
yum install docker-io
service docker start

Ubuntu
curl -sSL https://get.docker.io/ubuntu/ | sudo sh
</code></pre>

<h3>使用</h3>

<pre><code>docker pull centos
docker run centos:latest cat /etc/centos-release
</code></pre>

<h3>建立 LAMP 環境</h3>

<p>docker-io 藉由映像檔建立環境，所有想說可不可以藉由 docker 快速建立 LAMP 的環境，在網路上找了一下有人寫了類似的東西，
<a href="http://knowledge.sakura.ad.jp/tech/1811/">これから始める「DockerでかんたんLAMP環境 for CentOS」</a> 和 <a href="https://github.com/kunihirotanaka/docker-centos-lamp">docker-centos-lamp</a> 作為參考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis Cluster]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/16/redis-cluster/"/>
    <updated>2014-09-16T23:58:35+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/16/redis-cluster</id>
    <content type="html"><![CDATA[<p>官方 redis  cluster 的規範 和 php-redis library 目前的情況</p>

<!-- more -->


<p><a href="http://redis.io/topics/cluster-spec">cluster-spec</a> redis 的 cluster 架構，然後 <a href="https://github.com/nicolasff/phpredis/issues/476">phpredis</a> 也有在撰寫支援 cluster 結構的版本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile Jdk Source Code]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/16/compile-jdk-source-code/"/>
    <updated>2014-09-16T23:41:36+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/16/compile-jdk-source-code</id>
    <content type="html"><![CDATA[<p>如何編譯 opend jdk 的 source code</p>

<!-- more -->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在專案使用 Scrum]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/15/zai-zhuan-an-shi-yong-scrum/"/>
    <updated>2014-09-15T23:46:20+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/15/zai-zhuan-an-shi-yong-scrum</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近要帶人開發一個專案，想要實踐一下 Scrum 替代原有的瀑布式開發，買了 <code>告別瀑布，擁抱 Scrum</code> 來參考，
另外也買了 <code>Specification by Example</code>， 目前工作上才會有東西不符合規格或是時間上的拖延導致開發進度
出現了不少問題，所以現在是該學習一下關於專案管理的部分。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Pretty]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/14/git-pretty/"/>
    <updated>2014-09-14T20:08:06+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/14/git-pretty</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://justinhileman.info/article/changing-history/">Changing history, or How to Git pretty</a> 和 <a href="http://justinhileman.info/article/git-pretty/">git pretty</a> 介紹如何使用 git 管理專案，裡面有不少可以參考的地方。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xdebug : PHP Debug 工具]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/13/xdebug-php-debug-gong-ju/"/>
    <updated>2014-09-13T23:44:14+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/13/xdebug-php-debug-gong-ju</id>
    <content type="html"><![CDATA[<!-- more -->


<p>xdebug 為一款 PHP 用的除錯工具，透過 pecl 安裝後在 php.ini 打開就可以使用了，然後可以搭配 Sublime text 2 的
xdebug client 除錯，此外要在 chorme 安裝 xdebug 的插件後就可以直接通知 server 需要開啟 xdebug 的環境。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HadoopCon 2014]]></title>
    <link href="http://fubuki.github.io/blog/2014/09/13/hadoopcon-2014/"/>
    <updated>2014-09-13T19:15:07+08:00</updated>
    <id>http://fubuki.github.io/blog/2014/09/13/hadoopcon-2014</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>那些你知道的，但還沒看過的 Big Data 風景 – 致 Hadooper</h3>

<p>Fred 雲中象</p>

<ol>
<li>社群</li>
<li>速度</li>
<li>資料科學</li>
<li>Hadoop</li>
</ol>


<h4>國內 hadoop 圈子裡的人</h4>

<p>Jazz Wang</p>

<pre><code>hadooper
</code></pre>

<p>Wisely Chen</p>

<pre><code>推廣 Spark
</code></pre>

<h4>大資料處理上面處理的速度級別</h4>

<ol>
<li>Batch</li>
<li>Near Real-time</li>
<li>Real-time</li>
</ol>


<h4>資料科學需要哪些方面的能力</h4>

<p>How a typical software vendor approaches Data Science<br/>
PRISM 稜鏡計畫</p>

<h4>Hadoop 分成那些版本</h4>

<p>Hadoop 1<br/>
Hadoop 2</p>

<h3>Lambda Architecture Platform on SQL</h3>

<p>講者為Line 的員工<br/>
介紹一下講者和 Line office 目前在哪些地方</p>

<h4>Data analytics workload</h4>

<h4>batch processing</h4>

<h4>Stream Processing</h4>

<ol>
<li>Apache Storm</li>
<li>Norikra</li>
</ol>


<h4>Why Stream Processing</h4>

<ol>
<li>Less laterncy</li>
<li>Less computing power</li>
<li>No query schedule management</li>
</ol>


<h4>Disadvantage of Stream Processing</h4>

<h4>Lambada Architecture Overview</h4>

<h4>Twitter Summingbird</h4>

<h4>Lambada Structure use sql</h4>

<h4>UseCases in LINE</h4>

<p>Prompt report for Ads service</p>

<p>Summary of application server error log</p>

<p>TMTOWTDI</p>

<h4>A graph service for global web entities traversal and reputation evaluation based on HBase</h4>

<p>趨勢在那些問題上使用 hadoop</p>

<p>Malware的數量不斷成長</p>

<p>介紹趨勢防護分成那幾層</p>

<p>ThreatWeb Threat Enities as a Graph</p>

<p>將 Malware的行為轉換成 Graph 然後使用 PageRank 處理圖形問題</p>

<p>如何 store Graph data</p>

<p>Property Graph Model</p>

<p>使用 HBASE 存放 圖形資料</p>

<p>分成 vertex edge 兩種 table</p>

<h4>如何存取資料</h4>

<p>包裹 原本 HBASE的API</p>

<p>blueprints API</p>

<h4>效能</h4>

<p>HGraph</p>

<p>PageRank Result</p>

<p>DGA Discovered</p>

<h4>Cleints</h4>

<p>Real time Client</p>

<p>Batch Client</p>

<p>Graph Exploring Tools</p>

<h4>SQL on Hadoop: a Perspective of a Cloud-based, Managed Service Provider</h4>

<p>SQL Players on Hadoop</p>

<p>Hive
Spark sql</p>

<p>Presto
Impala
Drill</p>

<p>Norikra
StreamSql</p>

<p>Apache Tez</p>

<h4>Why still use MapReduce</h4>

<h4>Presto `s history</h4>

<h4>Who use Presto</h4>

<h4>Why select Presto</h4>

<p>容易處理</p>

<p>使用 SQL 語法</p>

<p>Batch summary</p>

<p>MapReduce &mdash; based</p>

<p>Hive with Tez</p>

<p>Spark and Spark SQL is a good alternative</p>

<h3>Norikra: Stream processing by SQL</h3>

<p>LINE 的 Analytics phalform team</p>

<p>Norikra 使用 SQL 語法處理資料</p>

<p>Esper EPL</p>

<p>Wiht/Without Schema</p>

<p>介紹一下 Norikra</p>

<p>如何安裝 Norikra</p>

<h4>use case 1</h4>

<p>External API call report s for partners</p>

<p><a href="http://developers.linecorp.com/blog/?p=3386">http://developers.linecorp.com/blog/?p=3386</a></p>

<p>api error response summaries</p>

<h4>use case 2</h4>

<p>Prompt reports for Ad service console</p>

<h4>use case 3</h4>

<p>Realtime access dashboard on Google Platform</p>

<p>Access log visualzation</p>

<p>More queries more simplicity and less latency</p>

<h3>Real-Time Streaming Data Computing for long-term undersea surveillance on top of Storm</h3>

<p>核三廠 排水口 監視資料</p>

<p>介紹 Storm 的架構</p>

<p>魚群辨識</p>

<p>確認鏡頭情形</p>

<p>scalability programing</p>

<p>DRPC</p>

<p>海洋影像資料處理過程</p>

<h3>Speed up Interactive Analytic Queries over Existing Big Data on Hadoop with Presto</h3>

<p>使用 Presto 分析在 hadoop 上面的資料。</p>

<p>SQL on/over Hadoop</p>

<p>Presto 的架構</p>

<p>可以支援多種 Database</p>

<p>Base on DAG model</p>

<p>Query 怎麼在 Presto上運行</p>

<p>Node 參數設定</p>

<p>Presto`s Roadmap</p>

<p>Data visualization with Presto &ndash; Demo</p>

<p>Grafana</p>

<h3>Mahout 資料分析基礎入門</h3>

<p>資料分析基礎入門</p>

<p>分析工具</p>

<ol>
<li>scikit-learn</li>
<li>R</li>
<li>Weka, Matlab</li>
<li>Mathout</li>
</ol>


<p>Introduction to apache mahout in youtube BTI360</p>

<p>User Mode 直接使用內建指令</p>

<p>Developer Mode 撰寫新的ML 演算法</p>

<p>Hortonworks</p>

<p>動動手玩推薦系統</p>

<h4>參考資料</h4>

<p>Frequent pattern analysis</p>

<p>Mahout fpgrowth</p>
]]></content>
  </entry>
  
</feed>
